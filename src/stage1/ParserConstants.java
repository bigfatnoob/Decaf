/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package stage1;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BREAK = 9;
  /** RegularExpression Id. */
  int CLASS = 10;
  /** RegularExpression Id. */
  int CONTINUE = 11;
  /** RegularExpression Id. */
  int ELSE = 12;
  /** RegularExpression Id. */
  int EXTENDS = 13;
  /** RegularExpression Id. */
  int IF = 14;
  /** RegularExpression Id. */
  int NEW = 15;
  /** RegularExpression Id. */
  int PRIVATE = 16;
  /** RegularExpression Id. */
  int PROTECTED = 17;
  /** RegularExpression Id. */
  int PUBLIC = 18;
  /** RegularExpression Id. */
  int RETURN = 19;
  /** RegularExpression Id. */
  int STATIC = 20;
  /** RegularExpression Id. */
  int SUPER = 21;
  /** RegularExpression Id. */
  int THIS = 22;
  /** RegularExpression Id. */
  int WHILE = 23;
  /** RegularExpression Id. */
  int ABSTRACT = 24;
  /** RegularExpression Id. */
  int BYTE = 25;
  /** RegularExpression Id. */
  int CASE = 26;
  /** RegularExpression Id. */
  int CATCH = 27;
  /** RegularExpression Id. */
  int CONST = 28;
  /** RegularExpression Id. */
  int DEFLT = 29;
  /** RegularExpression Id. */
  int DO = 30;
  /** RegularExpression Id. */
  int DOUBLE = 31;
  /** RegularExpression Id. */
  int FINAL = 32;
  /** RegularExpression Id. */
  int FINALLY = 33;
  /** RegularExpression Id. */
  int FOR = 34;
  /** RegularExpression Id. */
  int IMPLEMENTS = 35;
  /** RegularExpression Id. */
  int IMPORT = 36;
  /** RegularExpression Id. */
  int INSTANCEOF = 37;
  /** RegularExpression Id. */
  int INTERFACE = 38;
  /** RegularExpression Id. */
  int LONG = 39;
  /** RegularExpression Id. */
  int NATIVE = 40;
  /** RegularExpression Id. */
  int GOTO = 41;
  /** RegularExpression Id. */
  int PACKAGE = 42;
  /** RegularExpression Id. */
  int SHORT = 43;
  /** RegularExpression Id. */
  int SWITCH = 44;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 45;
  /** RegularExpression Id. */
  int THROW = 46;
  /** RegularExpression Id. */
  int THROWS = 47;
  /** RegularExpression Id. */
  int TRANSIENT = 48;
  /** RegularExpression Id. */
  int TRY = 49;
  /** RegularExpression Id. */
  int VOLATILE = 50;
  /** RegularExpression Id. */
  int BYVALUE = 51;
  /** RegularExpression Id. */
  int CAST = 52;
  /** RegularExpression Id. */
  int FUTURE = 53;
  /** RegularExpression Id. */
  int GENERIC = 54;
  /** RegularExpression Id. */
  int INNER = 55;
  /** RegularExpression Id. */
  int NONE = 56;
  /** RegularExpression Id. */
  int OPERATOR = 57;
  /** RegularExpression Id. */
  int OUTER = 58;
  /** RegularExpression Id. */
  int REST = 59;
  /** RegularExpression Id. */
  int VAR = 60;
  /** RegularExpression Id. */
  int INTEGER = 61;
  /** RegularExpression Id. */
  int TRUE = 62;
  /** RegularExpression Id. */
  int FALSE = 63;
  /** RegularExpression Id. */
  int CHAR = 64;
  /** RegularExpression Id. */
  int STRING = 65;
  /** RegularExpression Id. */
  int NULL = 66;
  /** RegularExpression Id. */
  int LP = 67;
  /** RegularExpression Id. */
  int RP = 68;
  /** RegularExpression Id. */
  int LCB = 69;
  /** RegularExpression Id. */
  int RCB = 70;
  /** RegularExpression Id. */
  int LSB = 71;
  /** RegularExpression Id. */
  int RSB = 72;
  /** RegularExpression Id. */
  int SCOLON = 73;
  /** RegularExpression Id. */
  int COMMA = 74;
  /** RegularExpression Id. */
  int DOT = 75;
  /** RegularExpression Id. */
  int ASSIGN = 76;
  /** RegularExpression Id. */
  int GREATER = 77;
  /** RegularExpression Id. */
  int LESSER = 78;
  /** RegularExpression Id. */
  int NOT = 79;
  /** RegularExpression Id. */
  int EQUAL = 80;
  /** RegularExpression Id. */
  int GREATEREQ = 81;
  /** RegularExpression Id. */
  int LESSEREQ = 82;
  /** RegularExpression Id. */
  int NOTEQUAL = 83;
  /** RegularExpression Id. */
  int PLUS = 84;
  /** RegularExpression Id. */
  int MINUS = 85;
  /** RegularExpression Id. */
  int MULTIPLY = 86;
  /** RegularExpression Id. */
  int DIVIDE = 87;
  /** RegularExpression Id. */
  int AND = 88;
  /** RegularExpression Id. */
  int OR = 89;
  /** RegularExpression Id. */
  int MODULO = 90;
  /** RegularExpression Id. */
  int Let = 91;
  /** RegularExpression Id. */
  int Dig = 92;
  /** RegularExpression Id. */
  int ID = 93;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int CMNT_BODY = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 5>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "\"break\"",
    "\"class\"",
    "\"continue\"",
    "\"else\"",
    "\"extends\"",
    "\"if\"",
    "\"new\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"static\"",
    "\"super\"",
    "\"this\"",
    "\"while\"",
    "\"abstract\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"const\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"final\"",
    "\"finally\"",
    "\"for\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"goto\"",
    "\"package\"",
    "\"short\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"try\"",
    "\"volatile\"",
    "\"byvalue\"",
    "\"cast\"",
    "\"future\"",
    "\"generic\"",
    "\"inner\"",
    "\"none\"",
    "\"operator\"",
    "\"outer\"",
    "\"rest\"",
    "\"var\"",
    "<INTEGER>",
    "\"true\"",
    "\"false\"",
    "<CHAR>",
    "<STRING>",
    "\"null\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\" >\"",
    "\"<\"",
    "\"!\"",
    "\"==\"",
    "\">=\"",
    "\"<=\"",
    "\"!=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&&\"",
    "\"||\"",
    "\"%\"",
    "<Let>",
    "<Dig>",
    "<ID>",
  };

}

/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";}PARSER_BEGIN(Parser)package stage1;

public class Parser{  public static void main(String args []) throws ParseException  {    Parser parser;

    if (args.length == 1) {
      try {        parser = new Parser(new java.io.FileInputStream(args[0]));        } catch (java.io.FileNotFoundException e) {
        System.out.println("File "+args[0]+ " not found," +
            " reading from terminal instead");
        parser = new Parser(System.in);      }    } else {
      parser = new Parser(System.in);    }
    parser.Start();
    System.out.println("Parsed Successfully");  }
}PARSER_END(Parser)SKIP :  /* Whitespace */{  " "| "\r"| "\t"| "\n"
| <"//"(~["\n","\r"])*("\n"|"\r"|"\n\r")>   // Single Line Comment
| <"/*">: CMNT_BODY                         // Multi Line Comment}

<CMNT_BODY>
SKIP:
{
  <"*/">: DEFAULT
| <~[]>}


TOKEN : {
  /* Keywords */
  < BREAK : "break">
| < CLASS : "class">
| < CONTINUE : "continue">
| < ELSE : "else">
| < EXTENDS : "extends">
| < IF : "if">
| < NEW : "new">
| < PRIVATE : "private">
| < PROTECTED : "protected">
| < PUBLIC : "public">
| < RETURN : "return">
| < STATIC : "static">
| < SUPER : "super">
| < THIS : "this">
| < WHILE : "while">
| < BOOLEAN : "boolean">
| < CHAR : "char" >
| < VOID : "void" >
  /* Forbidden Keywords from JAVA */
| < ABSTRACT : "abstract">
| < BYTE : "byte">
| < CASE : "case">
| < CATCH : "catch">
| < CONST : "const">
| < DEFLT : "default">
| < DO : "do">
| < DOUBLE : "double">
| < FINAL : "final">
| < FINALLY : "finally">
| < FOR : "for">
| < IMPLEMENTS : "implements">
| < IMPORT : "import">
| < INSTANCEOF : "instanceof">
| < INTERFACE : "interface">
| < LONG : "long">
| < NATIVE : "native">
| < GOTO : "goto">
| < PACKAGE : "package">
| < SHORT : "short">
| < SWITCH : "switch">
| < SYNCHRONIZED : "synchronized">
| < THROW : "throw">
| < THROWS : "throws">
| < TRANSIENT : "transient">
| < TRY : "try">
| < VOLATILE : "volatile">
  /* Reserved for possible future extension */
| < BYVALUE : "byvalue">
| < CAST : "cast">
| < FUTURE : "future">
| < GENERIC : "generic">
| < INNER : "inner">
| < NONE : "none">
| < OPERATOR : "operator">
| < OUTER : "outer">
| < REST : "rest">
| < VAR : "var">
  /* Literals */
| < INTEGER: "0"|(["1"-"9"](["0"-"9"])*)>
| < TRUE: "true" >
| < FALSE: "false" >
// TODO verify character definition
//| < CHARLITERAL: "'"(~["'", "\\"])|("\\"["a"-"z", "A"-"Z", "0"-"9"])|(" ")"'">
| < CHARLITERAL: "'"((~["'", "\\"])|" "|("\\t")|("\\n"))"'">
| < STRINGLITERAL: "\""((~["\"","\n","\r"])|("\\\""))*"\"">
| < NULL: "null">
  /* Punctuation */
| < LP: "(" >
| < RP: ")" >
| < LCB: "{" >
| < RCB: "}" >
| < LSB: "[" >
| < RSB: "]" >
| < SCOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
  /* Operators */
| < ASSIGN: "=" >
| < GREATER: ">" >
| < LESSER: "<" >
| < NOT: "!" >
| < EQUAL: "==" >
| < GREATEREQ: ">=" >
| < LESSEREQ: "<=" >
| < NOTEQUAL: "!=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < AND: "&&">
| < OR: "||">
| < MODULO: "%">
  /* Identifiers */
| < #Let : ["a"-"z", "A"-"Z"]>
| < #Dig : ["0"-"9"]>
| < ID: ("$"|"_"|<Let>)("$"|"_"|<Let>|<Dig>)*>
| < EMPTY : ""> : MATCH_NON_EMPTY
}

< MATCH_NON_EMPTY>
TOKEN:{
  <NON_EMPTY : ~[]>}

void Start() : {}
{
  (Class())+ <EOF>}

void Class():{}
{
  <CLASS> <ID> (Super())? <LCB> (Member())* <RCB>
}

void Super():{}
{
  <EXTENDS> <ID>
}

void Member():{}
{
  (LOOKAHEAD(10) Method() | LOOKAHEAD(10) Ctor() |  Field())
}

void Field():{}
{
  (Modifier())* Type() VarDeclaratorList() <SCOLON>
}

void Method():{}
{
  (Modifier())* Type() <ID> <LP > FormalArgs() <RP> Block()
}

void Ctor():{}
{
  (Modifier())* <ID> <LP> FormalArgs() < RP> Block()
}

void Modifier():{}
{
  <STATIC>| <PUBLIC>| <PRIVATE>| <PROTECTED>
}

void FormalArgs():{}
{
  (FormalArgList())?
}

void FormalArgList():{}
{
  FormalArg() ( <COMMA> FormalArgList() )? 
}

void FormalArg():{}
{
  Type() VarDeclaratorId()
}

void Type():{}          //removing left recursion
{
  PrimitiveType() Type2() | <ID> Type2()
}

void Type2():{}{
  (<LSB> <RSB> Type2())? // | <EMPTY>     }

void PrimitiveType():{}
{
  <BOOLEAN> | <CHAR> | <INTEGER> | <VOID>  
}

void VarDeclaratorList():{}
{
  (VarDeclarator() (<COMMA> VarDeclaratorList())?)
}

void VarDeclarator():{}
{
  VarDeclaratorId() (<ASSIGN> Expression())?
}

void VarDeclaratorId():{}
{
  <ID> VarDeclaratorId2()
}

void VarDeclaratorId2():{}{
   (<LSB> <RSB> VarDeclaratorId2())? // | <EMPTY>  //empty prod}

void Block():{}
{
  <LCB> (Statement())* <RCB>
}

void Statement():{}
{
  <SCOLON>  |
  <IF> <LP> Expression() <RP> Statement() (LOOKAHEAD(2) <ELSE> Statement())? |
  <WHILE> <LP> Expression() <RP> Statement() |
  <RETURN> (Expression())? <SCOLON> |
  <CONTINUE> <SCOLON> |
  <BREAK> <SCOLON> |
  Block() |
  LOOKAHEAD(3) Expression() <SCOLON> |
  Type() VarDeclaratorList() <SCOLON>
}

//Mathematical expression productions start here
void Expression():{}{
  St() (<ASSIGN> Expression())?
  // | < EMPTY>
}

void St():{}{
  L() St2()}

void St2():{}{
  (<OR> L() St2())?
  //| <EMPTY>}

void L():{}{
  M() L2()}

void L2():{}{
  (<AND> M() L2())?
//| <EMPTY>}

void M():{}
{
  N() M2()
}

void M2():{}
{
  (<EQUAL> N() M2()
| <NOTEQUAL> N() M2())?
//| <EMPTY>
}

void N():{}
{
  P() ( (<LESSEREQ> | <GREATEREQ> | <LESSER> | <GREATER> ) P()) ?
}

void P():{}
{
  Q() P2()
}

void P2():{}
{
  (<PLUS> Q() P2()
| <MINUS> Q() P2())?
//| <EMPTY>
}

void Q():{}
{
  R() Q2()
}

void Q2():{}
{
  (<MULTIPLY> R() Q2()
| <DIVIDE> R() Q2()
| <MODULO> R() Q2())?
//| <EMPTY>
}

void R():{}
{
  UnaryOp() Expression()
| Primary()
}

/*
void Expression():{}
{
  UnaryOp() Expression() Expression2() | Primary() Expression2()
}

void Expression2():{}{
  BinaryOp() Expression() Expression2() | <EMPTY>    //empty prod}

void BinaryOp():{}
{
  <ASSIGN> | <OR> | <AND> | <EQUAL> | <NOTEQUAL> | <LESSER> | <GREATER> | <LESSEREQ> | <GREATEREQ> | <PLUS> | <MINUS> | <MULTIPLY> | <DIVIDE> | <MODULO> 
}
*/
void UnaryOp():{}
{
  <MINUS> | <PLUS> | <NOT>
}

/**
void Primary():{}       //changed production here to remove recursion
{
  NewArrayExpr() Primary2() | NonNewArrayExpr() Primary2() | <ID> Primary2() 
}
**/

void Primary():{}
{
  LOOKAHEAD(3) NewArrayExpr() Primary2() |
  Literal() NonNewArrayExpr2() Primary2() |
  <THIS> NonNewArrayExpr2() Primary2() |
  <LP> Expression() <RP> NonNewArrayExpr2() Primary2() |
  LOOKAHEAD(3) <NEW> <ID> ActualArgs() NonNewArrayExpr2() Primary2() |
  <SUPER> <DOT> <ID> (ActualArgs() NonNewArrayExpr2())? Primary2() |
  <ID> (ActualArgs() NonNewArrayExpr2() Primary2() |
   (Dimension())? NonNewArrayExpr2() Primary2() )
}


void Primary2():{}{
  (<DOT> <ID> (ActualArgs())? Primary2() )?//| <EMPTY>   //empty production}

void NewArrayExpr():{}
{
  <NEW> ( <ID> | PrimitiveType() ) (Dimension())+
}

void Dimension():{}
{
  <LSB> Expression() <RSB>
}

void NonNewArrayExpr():{}
{
  LOOKAHEAD(3) Literal() NonNewArrayExpr2() |
  LOOKAHEAD(3) <THIS> NonNewArrayExpr2() |
  LOOKAHEAD(3) <LP> Expression() <RP> NonNewArrayExpr2() |
  LOOKAHEAD(3) <NEW> <ID> ActualArgs() NonNewArrayExpr2() |
  LOOKAHEAD(3) <ID> ActualArgs() NonNewArrayExpr2() |
  LOOKAHEAD(3) <SUPER> <DOT> <ID> ActualArgs() NonNewArrayExpr2() |
  LOOKAHEAD(3) ArrayExpr() NonNewArrayExpr2() |
  LOOKAHEAD(3) FieldExpr() NonNewArrayExpr2()
}

void NonNewArrayExpr2():{}{
  (Dimension() NonNewArrayExpr2())?}


void FieldExpr():{}
{
  LOOKAHEAD(3) Primary() <DOT> <ID> | <SUPER><DOT><ID>
}

void ArrayExpr():{}
{
  <ID> Dimension() 
}

void Literal():{}
{
  <NULL>|<TRUE>|<FALSE>|<INTEGER>|<CHARLITERAL>|<STRINGLITERAL>
}

void ActualArgs():{}
{
  <LP> (ExprList())? <RP>
}

void ExprList():{}
{
  Expression() ( <COMMA> ExprList() ) ?
}
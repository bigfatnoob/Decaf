/* Generated By:JavaCC: Do not edit this line. Parser.java */
package stage1;

public class Parser implements ParserConstants {
  public static void main(String args []) throws ParseException
  {
    Parser parser;

    if (args.length == 1) {
      try {
        parser = new Parser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File "+args[0]+ " not found," +
            " reading from terminal instead");
        parser = new Parser(System.in);
      }
    } else {
      parser = new Parser(System.in);
    }
    parser.Start();
    System.out.println("Parsed Successfully");
  }

  static final public void Start() throws ParseException {
    label_1:
    while (true) {
      Class();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static final public void Class() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      Super();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(LCB);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case BOOLEAN:
      case CHAR:
      case VOID:
      case INT:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      Member();
    }
    jj_consume_token(RCB);
  }

  static final public void Super() throws ParseException {
    jj_consume_token(EXTENDS);
    jj_consume_token(ID);
  }

  static final public void Member() throws ParseException {
    if (jj_2_1(10)) {
      Method();
    } else if (jj_2_2(10)) {
      Ctor();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case BOOLEAN:
      case CHAR:
      case VOID:
      case INT:
      case ID:
        Field();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Field() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      Modifier();
    }
    Type();
    VarDeclaratorList();
    jj_consume_token(SCOLON);
  }

  static final public void Method() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      Modifier();
    }
    Type();
    jj_consume_token(ID);
    jj_consume_token(LP);
    FormalArgs();
    jj_consume_token(RP);
    Block();
  }

  static final public void Ctor() throws ParseException {
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      Modifier();
    }
    jj_consume_token(ID);
    jj_consume_token(LP);
    FormalArgs();
    jj_consume_token(RP);
    Block();
  }

  static final public void Modifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FormalArgs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case VOID:
    case INT:
    case ID:
      FormalArgList();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  static final public void FormalArgList() throws ParseException {
    FormalArg();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      FormalArgList();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  static final public void FormalArg() throws ParseException {
    Type();
    VarDeclaratorId();
  }

  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case VOID:
    case INT:
      PrimitiveType();
      Type2();
      break;
    case ID:
      jj_consume_token(ID);
      Type2();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Type2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSB:
      jj_consume_token(LSB);
      jj_consume_token(RSB);
      Type2();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void PrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void VarDeclaratorList() throws ParseException {
    VarDeclarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      VarDeclaratorList();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void VarDeclarator() throws ParseException {
    VarDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      Expression();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void VarDeclaratorId() throws ParseException {
    jj_consume_token(ID);
    VarDeclaratorId2();
  }

  static final public void VarDeclaratorId2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSB:
      jj_consume_token(LSB);
      jj_consume_token(RSB);
      VarDeclaratorId2();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  static final public void Block() throws ParseException {
    jj_consume_token(LCB);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case IF:
      case NEW:
      case RETURN:
      case SUPER:
      case THIS:
      case WHILE:
      case BOOLEAN:
      case CHAR:
      case VOID:
      case INT:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case LCB:
      case SCOLON:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      Statement();
    }
    jj_consume_token(RCB);
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCOLON:
      jj_consume_token(SCOLON);
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(LP);
      Expression();
      jj_consume_token(RP);
      Statement();
      if (jj_2_3(2)) {
        jj_consume_token(ELSE);
        Statement();
      } else {
        ;
      }
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(LP);
      Expression();
      jj_consume_token(RP);
      Statement();
      break;
    case RETURN:
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        Expression();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(SCOLON);
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
      jj_consume_token(SCOLON);
      break;
    case BREAK:
      jj_consume_token(BREAK);
      jj_consume_token(SCOLON);
      break;
    case LCB:
      Block();
      break;
    default:
      jj_la1[18] = jj_gen;
      if (jj_2_4(3)) {
        Expression();
        jj_consume_token(SCOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case VOID:
        case INT:
        case ID:
          Type();
          VarDeclaratorList();
          jj_consume_token(SCOLON);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

//Mathematical expression productions start here
  static final public void Expression() throws ParseException {
    St();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      Expression();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  static final public void St() throws ParseException {
    L();
    St2();
  }

  static final public void St2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      L();
      St2();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  static final public void L() throws ParseException {
    M();
    L2();
  }

  static final public void L2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      M();
      L2();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

  static final public void M() throws ParseException {
    N();
    M2();
  }

  static final public void M2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
    case NOTEQUAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        N();
        M2();
        break;
      case NOTEQUAL:
        jj_consume_token(NOTEQUAL);
        N();
        M2();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  static final public void N() throws ParseException {
    P();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GREATER:
    case LESSER:
    case GREATEREQ:
    case LESSEREQ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSEREQ:
        jj_consume_token(LESSEREQ);
        break;
      case GREATEREQ:
        jj_consume_token(GREATEREQ);
        break;
      case LESSER:
        jj_consume_token(LESSER);
        break;
      case GREATER:
        jj_consume_token(GREATER);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      P();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

  static final public void P() throws ParseException {
    Q();
    P2();
  }

  static final public void P2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        Q();
        P2();
        break;
      case MINUS:
        jj_consume_token(MINUS);
        Q();
        P2();
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
  }

  static final public void Q() throws ParseException {
    R();
    Q2();
  }

  static final public void Q2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
    case DIVIDE:
    case MODULO:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        R();
        Q2();
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        R();
        Q2();
        break;
      case MODULO:
        jj_consume_token(MODULO);
        R();
        Q2();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  static final public void R() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case PLUS:
    case MINUS:
      UnaryOp();
      Expression();
      break;
    case NEW:
    case SUPER:
    case THIS:
    case INTEGER:
    case TRUE:
    case FALSE:
    case CHARLITERAL:
    case STRINGLITERAL:
    case NULL:
    case LP:
    case ID:
      Primary();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
void Expression():{}
{
  UnaryOp() Expression() Expression2() | Primary() Expression2()
}

void Expression2():{}{
  BinaryOp() Expression() Expression2() | <EMPTY>    //empty prod}

void BinaryOp():{}
{
  <ASSIGN> | <OR> | <AND> | <EQUAL> | <NOTEQUAL> | <LESSER> | <GREATER> | <LESSEREQ> | <GREATEREQ> | <PLUS> | <MINUS> | <MULTIPLY> | <DIVIDE> | <MODULO> 
}
*/
  static final public void UnaryOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
void Primary():{}       //changed production here to remove recursion
{
  NewArrayExpr() Primary2() | NonNewArrayExpr() Primary2() | <ID> Primary2() 
}
**/
  static final public void Primary() throws ParseException {
    if (jj_2_5(3)) {
      NewArrayExpr();
      Primary2();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
        Literal();
        NonNewArrayExpr2();
        Primary2();
        break;
      case THIS:
        jj_consume_token(THIS);
        NonNewArrayExpr2();
        Primary2();
        break;
      case LP:
        jj_consume_token(LP);
        Expression();
        jj_consume_token(RP);
        NonNewArrayExpr2();
        Primary2();
        break;
      default:
        jj_la1[36] = jj_gen;
        if (jj_2_6(3)) {
          jj_consume_token(NEW);
          jj_consume_token(ID);
          ActualArgs();
          NonNewArrayExpr2();
          Primary2();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SUPER:
            jj_consume_token(SUPER);
            jj_consume_token(DOT);
            jj_consume_token(ID);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LP:
              ActualArgs();
              NonNewArrayExpr2();
              break;
            default:
              jj_la1[33] = jj_gen;
              ;
            }
            Primary2();
            break;
          case ID:
            jj_consume_token(ID);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LP:
              ActualArgs();
              NonNewArrayExpr2();
              Primary2();
              break;
            default:
              jj_la1[35] = jj_gen;
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case LSB:
                Dimension();
                break;
              default:
                jj_la1[34] = jj_gen;
                ;
              }
              NonNewArrayExpr2();
              Primary2();
            }
            break;
          default:
            jj_la1[37] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  static final public void Primary2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LP:
        ActualArgs();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      Primary2();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
  }

  static final public void NewArrayExpr() throws ParseException {
    jj_consume_token(NEW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case BOOLEAN:
    case CHAR:
    case VOID:
    case INT:
      PrimitiveType();
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_7:
    while (true) {
      Dimension();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_7;
      }
    }
  }

  static final public void Dimension() throws ParseException {
    jj_consume_token(LSB);
    Expression();
    jj_consume_token(RSB);
  }

  static final public void NonNewArrayExpr() throws ParseException {
    if (jj_2_7(3)) {
      Literal();
      NonNewArrayExpr2();
    } else if (jj_2_8(3)) {
      jj_consume_token(THIS);
      NonNewArrayExpr2();
    } else if (jj_2_9(3)) {
      jj_consume_token(LP);
      Expression();
      jj_consume_token(RP);
      NonNewArrayExpr2();
    } else if (jj_2_10(3)) {
      jj_consume_token(NEW);
      jj_consume_token(ID);
      ActualArgs();
      NonNewArrayExpr2();
    } else if (jj_2_11(3)) {
      jj_consume_token(ID);
      ActualArgs();
      NonNewArrayExpr2();
    } else if (jj_2_12(3)) {
      jj_consume_token(SUPER);
      jj_consume_token(DOT);
      jj_consume_token(ID);
      ActualArgs();
      NonNewArrayExpr2();
    } else if (jj_2_13(3)) {
      ArrayExpr();
      NonNewArrayExpr2();
    } else if (jj_2_14(3)) {
      FieldExpr();
      NonNewArrayExpr2();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void NonNewArrayExpr2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSB:
      Dimension();
      NonNewArrayExpr2();
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
  }

  static final public void FieldExpr() throws ParseException {
    if (jj_2_15(3)) {
      Primary();
      jj_consume_token(DOT);
      jj_consume_token(ID);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUPER:
        jj_consume_token(SUPER);
        jj_consume_token(DOT);
        jj_consume_token(ID);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ArrayExpr() throws ParseException {
    jj_consume_token(ID);
    Dimension();
  }

  static final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      jj_consume_token(NULL);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case CHARLITERAL:
      jj_consume_token(CHARLITERAL);
      break;
    case STRINGLITERAL:
      jj_consume_token(STRINGLITERAL);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ActualArgs() throws ParseException {
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case SUPER:
    case THIS:
    case INTEGER:
    case TRUE:
    case FALSE:
    case CHARLITERAL:
    case STRINGLITERAL:
    case NULL:
    case LP:
    case NOT:
    case PLUS:
    case MINUS:
    case ID:
      ExprList();
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    jj_consume_token(RP);
  }

  static final public void ExprList() throws ParseException {
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      ExprList();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_3R_92()) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_scan_token(MODULO)) return true;
    if (jj_3R_84()) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_84()) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_3R_84()) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_84()) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_78()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_78()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    return false;
  }

  static private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    }
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_78()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_72()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(NOTEQUAL)) return true;
    if (jj_3R_66()) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_66()) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  static private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_66()) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_58()) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_49()) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_49()) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_20()) return true;
    if (jj_3R_71()) return true;
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_10()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(LCB)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCB)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_11()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(LSB)) return true;
    if (jj_scan_token(RSB)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_76()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_37()) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(LSB)) return true;
    if (jj_scan_token(RSB)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_51()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_20()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_14()) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_3R_13()) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_64()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    if (jj_3R_34()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_13()) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_13()) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_20()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_14()) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[47];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x2000,0xf170000,0xf170000,0x170000,0x170000,0x170000,0x170000,0xf000000,0x0,0xf000000,0x0,0xf000000,0x0,0x0,0x0,0xfe8ca00,0x608000,0x884a00,0xf000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x608000,0x0,0x0,0x0,0x0,0x400000,0x200000,0x0,0x0,0xf000000,0x0,0x0,0x200000,0x0,0x608000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x800,0x0,0x4000,0x10000,0x800,0x30822fe,0x30800fe,0x2200,0x0,0x10000,0x20000000,0x10000000,0x900000,0x900000,0x660000,0x660000,0x3000000,0x3000000,0x4c000000,0x4c000000,0x30800fe,0x3080000,0x80,0x800,0x80,0xfe,0x0,0x80,0x8000,0x0,0x800,0x800,0x0,0x7e,0x30800fe,0x4000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x2,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[15];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[100];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 47; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 100; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 15; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

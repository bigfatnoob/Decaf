/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package stage1;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private int jjMoveStringLiteralDfa0_2()
{
   return 1;
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40L) != 0L || (active1 & 0x4000000L) != 0L)
            return 0;
         if ((active0 & 0xfffffffffffffe00L) != 0L || (active1 & 0x26L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 0;
            return 21;
         }
         return -1;
      case 1:
         if ((active0 & 0x600004000L) != 0L)
            return 21;
         if ((active0 & 0xfffffff9ffffbe00L) != 0L || (active1 & 0x26L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 96;
               jjmatchedPos = 1;
            }
            return 21;
         }
         return -1;
      case 2:
         if ((active0 & 0x7fefffddffff3e00L) != 0L || (active1 & 0x26L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 2;
            return 21;
         }
         if ((active0 & 0x8010002000008000L) != 0L)
            return 21;
         return -1;
      case 3:
         if ((active0 & 0x4880140036401000L) != 0L || (active1 & 0x22L) != 0L)
            return 21;
         if ((active0 & 0x376febddc9bf2e00L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 3;
            return 21;
         }
         return -1;
      case 4:
         if ((active0 & 0x24064018c0a00600L) != 0L || (active1 & 0x4L) != 0L)
            return 21;
         if ((active0 & 0x1369abc5091f2800L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 96;
               jjmatchedPos = 4;
            }
            return 21;
         }
         return -1;
      case 5:
         if ((active0 & 0x1269235109032800L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 5;
            return 21;
         }
         if ((active0 & 0x1048884001c0000L) != 0L)
            return 21;
         return -1;
      case 6:
         if ((active0 & 0x1029034008020800L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 6;
            return 21;
         }
         if ((active0 & 0x240201101012000L) != 0L)
            return 21;
         return -1;
      case 7:
         if ((active0 & 0x1020000008000800L) != 0L)
            return 21;
         if ((active0 & 0x9034000020000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 7;
            return 21;
         }
         return -1;
      case 8:
         if ((active0 & 0x1014000000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 8;
            return 21;
         }
         if ((active0 & 0x8020000020000L) != 0L)
            return 21;
         return -1;
      case 9:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 9;
            return 21;
         }
         if ((active0 & 0x14000000000L) != 0L)
            return 21;
         return -1;
      case 10:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 10;
            return 21;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         {
         jjmatchedKind = 82;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 37:
         return jjStopAtPos(0, 93);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L);
      case 40:
         return jjStopAtPos(0, 70);
      case 41:
         return jjStopAtPos(0, 71);
      case 42:
         return jjStopAtPos(0, 89);
      case 43:
         return jjStopAtPos(0, 87);
      case 44:
         return jjStopAtPos(0, 77);
      case 45:
         return jjStopAtPos(0, 88);
      case 46:
         return jjStopAtPos(0, 78);
      case 47:
         {
         jjmatchedKind = 90;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
      case 59:
         return jjStopAtPos(0, 76);
      case 60:
         {
         jjmatchedKind = 81;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 61:
         {
         jjmatchedKind = 79;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 62:
         {
         jjmatchedKind = 80;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 91:
         return jjStopAtPos(0, 74);
      case 93:
         return jjStopAtPos(0, 75);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40000011000200L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800000e2000c00L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x700000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100003800000000L, 0x4L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x200100000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40003c000004000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800080000008000L, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x3000000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x200000070000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000000080000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1c00000300000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1e000000400000L, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x8020000004000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 72);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 125:
         return jjStopAtPos(0, 73);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 61:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8080280060000000L, active1, 0x4L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4200000100088000L, active1, 0L);
      case 102:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 21);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x6400002c00000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x400030000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x820142485000800L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000030200L, active1, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2100000000240000L, active1, 0x20L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x41000010000000L, active1, 0L);
      case 124:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000002100400L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000200L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800004c10000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x24L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xe01041880000800L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400001020000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000200000L, active1, 0L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 21);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 21);
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4080010028001000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x21001a0050082000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 21);
         break;
      case 121:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x60001900000200L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000040000000L, active1, 0L);
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 21);
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 21);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 21);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 21);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 21);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 21);
         return jjMoveStringLiteralDfa4_0(active0, 0x2600020000202000L, active1, 0L);
      case 103:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 21);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
      case 108:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 21);
         return jjMoveStringLiteralDfa4_0(active0, 0x4001840000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 21);
         return jjMoveStringLiteralDfa4_0(active0, 0x6008000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 21);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000400000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 21);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000400L, active1, 0x4L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 21);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 21);
         return jjMoveStringLiteralDfa4_0(active0, 0x810008120800L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000080000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000210000010000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 21);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 21);
         return jjMoveStringLiteralDfa5_0(active0, 0x4001020000L, active1, 0L);
      case 104:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 21);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x140800L, active1, 0L);
      case 107:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 21);
         break;
      case 108:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40001400000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 21);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 21);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 21);
         return jjMoveStringLiteralDfa5_0(active0, 0x300028008080000L, active1, 0L);
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 21);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 21);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 21);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x9000000L);
      case 99:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 21);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 21);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 21);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 21);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 21);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 104:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 21);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x228000000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1100000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 21);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000800L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L);
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 21);
         break;
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 21);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000010000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 99:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 21);
         return jjMoveStringLiteralDfa7_0(active0, 0x10008000000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 21);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 21);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 21);
         return jjMoveStringLiteralDfa7_0(active0, 0x8004000000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 21);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1001000000000000L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 21);
         break;
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 21);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 21);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 21);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000020000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x9004000000000L);
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 21);
         break;
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 17, 21);
         break;
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 41, 21);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 51, 21);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 40, 21);
         break;
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 38, 21);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 48, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 22;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(8);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 39)
                     jjAddStates(3, 4);
                  else if (curChar == 48)
                  {
                     if (kind > 64)
                        kind = 64;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 47)
                     jjCheckNAddStates(5, 7);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 13 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 48 && kind > 64)
                     kind = 64;
                  break;
               case 7:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(3, 4);
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if (curChar == 39 && kind > 67)
                     kind = 67;
                  break;
               case 15:
               case 17:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 16:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 19:
                  if (curChar == 34 && kind > 68)
                     kind = 68;
                  break;
               case 20:
                  if (curChar != 36)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(21);
                  break;
               case 1:
                  jjAddStates(5, 7);
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(8, 9);
                  break;
               case 13:
                  if (curChar == 116)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if (curChar == 110)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  jjAddStates(0, 2);
                  break;
               case 18:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 22 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   16, 18, 19, 10, 12, 1, 2, 4, 13, 14, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\142\162\145\141\153", 
"\143\154\141\163\163", "\143\157\156\164\151\156\165\145", "\145\154\163\145", 
"\145\170\164\145\156\144\163", "\151\146", "\156\145\167", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\164\141\164\151\143", "\163\165\160\145\162", "\164\150\151\163", "\167\150\151\154\145", 
"\142\157\157\154\145\141\156", "\143\150\141\162", "\166\157\151\144", "\141\142\163\164\162\141\143\164", 
"\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", "\143\157\156\163\164", 
"\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", "\146\151\156\141\154", 
"\146\151\156\141\154\154\171", "\146\157\162", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\147\157\164\157", 
"\160\141\143\153\141\147\145", "\163\150\157\162\164", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\171", "\166\157\154\141\164\151\154\145", 
"\142\171\166\141\154\165\145", "\143\141\163\164", "\146\165\164\165\162\145", 
"\147\145\156\145\162\151\143", "\151\156\156\145\162", "\156\157\156\145", 
"\157\160\145\162\141\164\157\162", "\157\165\164\145\162", "\162\145\163\164", "\166\141\162", null, 
"\164\162\165\145", "\146\141\154\163\145", null, null, "\156\165\154\154", "\50", "\51", "\173", 
"\175", "\133", "\135", "\73", "\54", "\56", "\75", "\76", "\74", "\41", "\75\75", 
"\76\75", "\74\75", "\41\75", "\53", "\55", "\52", "\57", "\46\46", "\174\174", "\45", 
null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "CMNT_BODY",
   "MATCH_NON_EMPTY",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0x73fffffffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[22];
static private final int[] jjstateSet = new int[44];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 22; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 97;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 8)
       {
          jjmatchedKind = 8;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 98)
       {
          jjmatchedKind = 98;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}

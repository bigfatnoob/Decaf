/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Decaf.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
               
                           
                   
  STATIC = false;
                 
                                     
}

PARSER_BEGIN(Decaf)
package stage2;
import java.util.*;
import java.lang.*;
public class Decaf/*@bgen(jjtree)*/implements DecafTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTDecafState jjtree = new JJTDecafState();

/*@egen*/
  public static SymbolTable SYMBOL_TABLE = SymbolTable.getSymbolTable();
  /**
  * Mode = 0 represents scope construction
    Mode = 1 represents symbol table construction 
  */
  public static int MODE = 0;
  
  public static void main(String args []) throws Exception
  {
    Decaf parser;
    if (args.length == 1) {
      try {
        parser = new Decaf(new java.io.FileInputStream(args[0]));  
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File "+args[0]+ " not found," +
            " reading from terminal instead");
        parser = new Decaf(System.in);
      }
    } else {
      System.out.println("Reading from standard input...");
      parser =  new Decaf(System.in);
    }
    start_AST start = null;
    try
    {
      /**
      *Parser and Symbol Table Generator
      */
      start = parser.Start();
      System.out.println("Parsed Successfully.");
      MODE = 1;

      /**
      *Symbol Table Verification
      */
      parser = new Decaf(new java.io.FileInputStream(args[0]));
      start = parser.Start();

      /**
      *TypeChecking
      */
      //ScopeFactory sf = ScopeFactory.getScopeFactory();
      /*for(String key: SYMBOL_TABLE.getTable().keySet()) {
        System.out.println(SYMBOL_TABLE.getTable().get(key));      }*/
      //start.dump(" -> ");
    }
    catch (Exception e)
    {
      System.out.println("ERROR : " + e.getMessage());
      throw e;
    }
    
  }
}

PARSER_END(Decaf)

SKIP :  /* Whitespace */
{
  " "
| "\r"
| "\t"
| "\n"
| <"//"(~["\n","\r"])*("\n"|"\r"|"\n\r")>   // Single Line Comment
| <"/*">: CMNT_BODY                         // Multi Line Comment
}

<CMNT_BODY>
SKIP:
{
  <"*/">: DEFAULT
| <~[]>
}



TOKEN : 
{
  /* Keywords */
  < BREAK : "break">
| < CLASS : "class">
| < CONTINUE : "continue">
| < ELSE : "else">
| < EXTENDS : "extends">
| < IF : "if">
| < NEW : "new">
| < PRIVATE : "private">
| < PROTECTED : "protected">
| < PUBLIC : "public">
| < RETURN : "return">
| < STATIC : "static">
| < SUPER : "super">
| < THIS : "this">
| < WHILE : "while">
| < BOOLEAN : "boolean">
| < CHAR : "char" >
| < VOID : "void" >
| < INT : "int">
  /* Forbidden Keywords from JAVA */
| < ABSTRACT : "abstract">
| < BYTE : "byte">
| < CASE : "case">
| < CATCH : "catch">
| < CONST : "const">
| < DEFLT : "default">
| < DO : "do">
| < DOUBLE : "double">
| < FINAL : "final">
| < FINALLY : "finally">
| < FOR : "for">
| < IMPLEMENTS : "implements">
| < IMPORT : "import">
| < INSTANCEOF : "instanceof">
| < INTERFACE : "interface">
| < LONG : "long">
| < NATIVE : "native">
| < GOTO : "goto">
| < PACKAGE : "package">
| < SHORT : "short">
| < SWITCH : "switch">
| < SYNCHRONIZED : "synchronized">
| < THROW : "throw">
| < THROWS : "throws">
| < TRANSIENT : "transient">
| < TRY : "try">
| < VOLATILE : "volatile">
  /* Reserved for possible future extension */
| < BYVALUE : "byvalue">
| < CAST : "cast">
| < FUTURE : "future">
| < GENERIC : "generic">
| < INNER : "inner">
| < NONE : "none">
| < OPERATOR : "operator">
| < OUTER : "outer">
| < REST : "rest">
| < VAR : "var">
  /* Literals */
| < INTEGER: "0"|(["1"-"9"](["0"-"9"])*)>
| < TRUE: "true" >
| < FALSE: "false" >
// TODO verify character definition
//| < CHARLITERAL: "'"(~["'", "\\"])|("\\"["a"-"z", "A"-"Z", "0"-"9"])|(" ")"'">
| < CHARLITERAL: "'"((~["'", "\\"])|" "|("\\t")|("\\n"))"'">
| < STRINGLITERAL: "\""((~["\"","\n","\r"])|("\\\""))*"\"">
| < NULL: "null">
  /* Punctuation */
| < LP: "(" >
| < RP: ")" >
| < LCB: "{" >
| < RCB: "}" >
| < LSB: "[" >
| < RSB: "]" >
| < SCOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
  /* Operators */
| < ASSIGN: "=" >
| < GREATER: ">" >
| < LESSER: "<" >
| < NOT: "!" >
| < EQUAL: "==" >
| < GREATEREQ: ">=" >
| < LESSEREQ: "<=" >
| < NOTEQUAL: "!=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < AND: "&&">
| < OR: "||">
| < MODULO: "%">
  /* Identifiers */
| < #Let : ["a"-"z", "A"-"Z"]>
| < #Dig : ["0"-"9"]>
| < ID: ("$"|"_"|<Let>)("$"|"_"|<Let>|<Dig>)*>
| < EMPTY : ""> : MATCH_NON_EMPTY
}

< MATCH_NON_EMPTY>
TOKEN:
{
  <NON_EMPTY : ~[]>
}

String ID():
{
  Token t;
}
{
  t = <ID>{return t.image;}
}

start_AST Start()           :
{/*@bgen(jjtree) start_AST */
  start_AST jjtn000 = new start_AST(JJTSTART_AST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Unit classUnit = null;
  List<Unit> classUnitList = new ArrayList<Unit >();
}
{/*@bgen(jjtree) start_AST */
  try {
/*@egen*/
  {SYMBOL_TABLE.enterScope(true, MODE);
  if (MODE==0) {	  SYMBOL_TABLE.add("String", UnitType.CLASS);
	  SYMBOL_TABLE.add("IO", UnitType.CLASS);
	  SYMBOL_TABLE.add("Object", UnitType.CLASS);}
  }
  (classUnit = Class(){classUnitList.add(classUnit);})*
  {SYMBOL_TABLE.exitScope(MODE);}
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setClasses(classUnitList);
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Unit Class():
{
  ClassUnit classUnit = null;
  ClassUnit superClassUnit = null;
  List<Unit> classFields = new ArrayList<Unit>();
  List<Unit> classFieldsCollection = new ArrayList<Unit>();
  String className = null;
  String superClassName = null;
}
{
  <CLASS> className = ID() (< EXTENDS > superClassName = ID())? 
    {
        if  (MODE == 0){
          /*classUnit = (ClassUnit)UnitFactory.generateUnit(UnitType.CLASS);
          classUnit.setName(className);*/
          classUnit = (ClassUnit) SYMBOL_TABLE.add(className, UnitType.CLASS);
        } else {
            IntegerMuted intBaseMuted = new IntegerMuted(-1);
		    classUnit = (ClassUnit) SYMBOL_TABLE.lookUp(className, UnitType.CLASS, intBaseMuted);
		    if (superClassName != null) {
		      IntegerMuted intMuted = new IntegerMuted(-1);
		      superClassUnit = (ClassUnit)SYMBOL_TABLE.lookUp(superClassName, UnitType.CLASS, intMuted);
		      if (superClassUnit == null){
		        throw new ParseException("Super class " + superClassName + " has not been declared.");		      }
		      classUnit.setSuperClass(superClassUnit);		    }
        }
    }
    <LCB>
    {SYMBOL_TABLE.enterScopeForUnit(classUnit,MODE);}
    (classFields = Member(){
        /*
        for (Unit memberUnit: classFields) {
          for (Unit existingUnit : classFieldsCollection) {
            if (existingUnit.getName().equals(memberUnit.getName())) {
             throw new ParseException(memberUnit.getName() + " already declared in  " + className);             }          }        }*/
        classFieldsCollection.addAll(classFields);
      })*
    {
      if (MODE == 0) {        classUnit.setMembersAndMethods(classFieldsCollection);
      }    }
    <RCB>
    {
      SYMBOL_TABLE.exitScope(MODE);
      return classUnit;    }
}

List<Unit> Member():
{
  Unit member = null;
  List<Unit> memberList = null;
  List<Unit> allMembers = new ArrayList<Unit>();
}
{
  LOOKAHEAD(10)
  memberList = Field(){allMembers.addAll(memberList); return allMembers;}
  |LOOKAHEAD(10)
  member = Method(){allMembers.add(member); return allMembers;}
  |LOOKAHEAD(10)
  member = Ctor(){
    MethodUnit cMember = (MethodUnit)member;
    cMember.setConstructor(true);
    allMembers.add(cMember); return allMembers;
  }
}

List<Unit> Field():
{
  FieldDetails fieldDetails = new FieldDetails();
  Modifier modifier = null;
  List<Unit> fieldList = null;
}
{
  modifier = Modifier(){fieldDetails.setModifier(modifier);}
  fieldList = FieldDeclarations(fieldDetails)
  {
    for(Unit fieldUnit: fieldList){
      VariableUnit vUnit = (VariableUnit) fieldUnit;
      vUnit.setLocalVariable(true);    }
    return fieldList;
  }
}

Modifier Modifier():
{
  Modifier modifier = new Modifier();
}
{
  (LOOKAHEAD(2)(<PUBLIC>{modifier.setScopePublic(true);}|<PRIVATE>{modifier.setScopePrivate(true);}|<PROTECTED>{modifier.setScopeProtected(true);})(<STATIC>{modifier.setScopeStatic(true);})
  |LOOKAHEAD(2)(<STATIC>{modifier.setScopeStatic(true);})(<PUBLIC>{modifier.setScopePublic(true);}|<PRIVATE>{modifier.setScopePrivate(true);}|<PROTECTED>{modifier.setScopeProtected(true);})
  |LOOKAHEAD(2)(<PUBLIC>{modifier.setScopePublic(true);}|<PRIVATE>{modifier.setScopePrivate(true);}|<PROTECTED>{modifier.setScopeProtected(true);})
  |LOOKAHEAD(2)(<STATIC>{modifier.setScopeStatic(true);}))?
  {return modifier;}
}

List<Unit> FieldDeclarations(FieldDetails fieldDetails):
{
  SimpleNode type = null;
  List<Unit> variables = null;
  boolean isArray = false;
  int arraySize = 0;
}
{
  type = Type(){
    jjtree.popNode();
    fieldDetails.setType(type);
  }
  (< LSB > < RSB >  {
    type.typeObj.isArray = true;
    type.typeObj.arraySize += 1;
    fieldDetails.isArray = true;
    fieldDetails.arraySize += 1;  })*
  variables = Variables(fieldDetails)<SCOLON>{return variables;}
}

SimpleNode Type():{
  Token t = null;
  ClassUnit varUnit = null;
}
{
  (t = <INT>/*@bgen(jjtree) int_AST */
             {
               int_AST jjtn001 = new int_AST(JJTINT_AST);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn001, true);
               jjtc001 = false;
             }
/*@egen*/ {
    jjtn001.jjtSetValue("int");
    jjtn001.typeObj.name = "int";
    return jjtn001;
  }/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
             }
/*@egen*/          
  |t = <CHAR>/*@bgen(jjtree) char_AST */
              {
                char_AST jjtn002 = new char_AST(JJTCHAR_AST);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn002, true);
                jjtc002 = false;
              }
/*@egen*/ {
    jjtn002.jjtSetValue("char");
    jjtn002.typeObj.name = "char";
    return jjtn002;
  }/*@bgen(jjtree)*/
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
              }
/*@egen*/          
  |t = <BOOLEAN>/*@bgen(jjtree) boolean_AST */
                 {
                   boolean_AST jjtn003 = new boolean_AST(JJTBOOLEAN_AST);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn003, true);
                   jjtc003 = false;
                 }
/*@egen*/ {
    jjtn003.jjtSetValue("boolean");
    jjtn003.typeObj.name = "boolean";
    return jjtn003;
  }/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
                 }
/*@egen*/             
  |t = <ID>/*@bgen(jjtree) id_AST */
            {
              id_AST jjtn004 = new id_AST(JJTID_AST);
              boolean jjtc004 = true;
              jjtree.openNodeScope(jjtn004);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn004, true);
              jjtc004 = false;
            }
/*@egen*/ {
    IntegerMuted currentScope = new IntegerMuted(-1);
    if (MODE == 1){		varUnit = (ClassUnit) SYMBOL_TABLE.lookUp(t.image,UnitType.CLASS, currentScope);
		if (varUnit == null){
		  throw new ParseException(t.image + " has not been declared yet");		}
		varUnit.setType(jjtn004);
		jjtn004.jjtSetValue(t.image);
		jjtn004.typeObj.name = t.image;
		jjtn004.typeObj.isClass = true;
		jjtn004.setUnit(varUnit);
    }
    //System.out.println(jjtThis.jjtGetValue());
    return jjtn004;
  }/*@bgen(jjtree)*/
            } finally {
              if (jjtc004) {
                jjtree.closeNodeScope(jjtn004, true);
              }
            }
/*@egen*/        )
  }

List<Unit> Variables(FieldDetails fieldDetails):{
  List<Unit> variables = new ArrayList<Unit>();
  Unit variable = null;
}
{
  variable=Variable(fieldDetails){variables.add(variable);}
  (<COMMA> variable=Variable(fieldDetails){variables.add(variable);})*{return variables;}
}

Unit Variable(FieldDetails fieldDetails):{
  VariableUnit variable;
  String variableName = null;
}
{
  variableName = ID(){
    if (MODE == 0) {	    variable = (VariableUnit)SYMBOL_TABLE.add(variableName, UnitType.VARIABLE);
    } else {
        IntegerMuted intMuted = new IntegerMuted(-1);
        variable = (VariableUnit)SYMBOL_TABLE.lookUp(variableName, UnitType.VARIABLE, intMuted);    }
  }
  (<LSB><RSB>{variable.setArray(true);})*
  (/*@bgen(jjtree) assignOperator_AST */
   {
     assignOperator_AST jjtn001 = new assignOperator_AST(JJTASSIGNOPERATOR_AST);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/<ASSIGN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/                     Expression()
    // TODO -- Store value of variable
  )?
  {
    if (MODE == 1) {
	    variable.setType(fieldDetails.getType());
	    variable.setModifier(fieldDetails.getModifier());
	    variable.setArray(fieldDetails.isArray);
	    variable.setArraySize(fieldDetails.arraySize);
    }
    return variable; 
  }
}

Unit Method():{
  MethodUnit methodUnit = new MethodUnit();
  Modifier modifier = null;
  SimpleNode type = null;
  List<Unit> formalArgs = null;
  String methodName = null;
  SimpleNode block = null;
  String functionName = null;
  boolean isArray = false;
}
{
  modifier = Modifier()
  
   
  ( type = Type() | < VOID >/*@bgen(jjtree) voidType_AST */
                             {
                               voidType_AST jjtn001 = new voidType_AST(JJTVOIDTYPE_AST);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn001, true);
                               jjtc001 = false;
                             }
/*@egen*/ {type = jjtn001; }/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, true);
                               }
                             }
/*@egen*/               )//{methodUnit.setReturnType(type);}
  (< LSB > < RSB >  {
    type.typeObj.isArray = true;
    type.typeObj.arraySize+=1;  })*
  functionName = ID() {
    if (MODE == 0) {
	    methodUnit = (MethodUnit)SYMBOL_TABLE.add(functionName,UnitType.METHOD);
	    methodUnit.setModifier(modifier);
	    methodUnit.setName(functionName);
	    methodUnit.setReturnType(type);
   }  }
  <LP>
  { 
    SYMBOL_TABLE.enterScopeForUnit(methodUnit, MODE);  }
  ((formalArgs = FormalArgs()){
    if (MODE == 0){
        methodUnit.setFormalArgs(formalArgs);
    }
   })?
  <RP>
  {
    SYMBOL_TABLE.exitScope(MODE);
  }
  block = Block()  {
    methodUnit.setMethodBlock((block_AST)block);      }
  {return methodUnit;}
}

Unit Ctor():{
  MethodUnit methodUnit = new MethodUnit();
  Modifier modifier = null;
  List<Unit> formalArgs = null;
  Token t = null;
  String functionName = null;
  id_AST type = null;
  block_AST block = null;
}
{
  modifier = Modifier(){methodUnit.setModifier(modifier);}/*@bgen(jjtree) id_AST */
  {
    id_AST jjtn001 = new id_AST(JJTID_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/
  {
    type = jjtn001;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       
  functionName = ID()
  <LP>
  {
    if (MODE == 0) {
       methodUnit = (MethodUnit)SYMBOL_TABLE.add(t.image,UnitType.METHOD);
       methodUnit.setName(functionName);
       methodUnit.setConstructor(true);
       methodUnit.setReturnType(type);
    } else {
      IntegerMuted intMuted = new IntegerMuted(-1);
      methodUnit = (MethodUnit)SYMBOL_TABLE.lookUp(t.image,UnitType.METHOD, intMuted);    }
   
    SYMBOL_TABLE.enterScopeForUnit(methodUnit,MODE);
  }
  (formalArgs = FormalArgs(){
    if (MODE == 0) {
      methodUnit.setFormalArgs(formalArgs);
    }
   })?
  <RP>
  {
    SYMBOL_TABLE.exitScope(MODE);
  }
  block = Block()
  {
    methodUnit.setMethodBlock((block_AST)block);    
  }
  {return methodUnit;}
}

List<Unit> FormalArgs():
{
  Unit formalArg = null;
  List<Unit> formalArgs = new ArrayList<Unit>();
}
{
  formalArg = FormalArg(){formalArgs.add(formalArg);}
  (<COMMA> formalArg = FormalArg(){formalArgs.add(formalArg);})*
  {return formalArgs;}
}

Unit FormalArg():{
  FieldDetails fieldDetails = new FieldDetails();
  Unit formalArg = null;
  SimpleNode type = null;
  boolean isArray = false;
  int arraySize = 0;
}
{
  type = Type()
  (< LSB > < RSB >  {
    isArray = true;
    arraySize += arraySize;  })*
  {
    fieldDetails.isArray = true;
    fieldDetails.arraySize = arraySize;
    type.typeObj.isArray = true;
    type.typeObj.arraySize = arraySize;
    fieldDetails.setType(type);
  }
  formalArg = Variable(fieldDetails){return formalArg;}
}

block_AST Block()           :{/*@bgen(jjtree) block_AST */
  block_AST jjtn000 = new block_AST(JJTBLOCK_AST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  List<SimpleNode> stmts = new ArrayList<SimpleNode>();
  SimpleNode stmt = null;
}
{/*@bgen(jjtree) block_AST */
  try {
/*@egen*/
  <LCB>
  {
    SYMBOL_TABLE.enterScope(false, MODE);
  }
  (stmt = Statement(){stmts.add(stmt);})*
  <RCB>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setStatements(stmts);
    SYMBOL_TABLE.exitScope(MODE);
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode Statement():{
  SimpleNode ifStat = null;
  SimpleNode elseStat = null;
  binaryExpression_AST expr = null;
  SimpleNode body = null;
  List<Unit> variables = null;
}
{
  LOOKAHEAD(3)/*@bgen(jjtree) ifThenElseStat_AST */
              {
                ifThenElseStat_AST jjtn001 = new ifThenElseStat_AST(JJTIFTHENELSESTAT_AST);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/(<IF> <LP> expr = Expression() <RP> ifStat = Statement() (LOOKAHEAD(1) <ELSE> elseStat = Statement())?/*@bgen(jjtree)*/
                                                                                                                     {
                                                                                                                       jjtree.closeNodeScope(jjtn001, true);
                                                                                                                       jjtc001 = false;
                                                                                                                     }
/*@egen*/ {
    jjtn001.ifStat = ifStat;
    jjtn001.elseStat = elseStat;
    jjtn001.condition = expr;
    return jjtn001;
   })/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
              }
/*@egen*/                    
  |/*@bgen(jjtree) whileStat_AST */
   {
     whileStat_AST jjtn002 = new whileStat_AST(JJTWHILESTAT_AST);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
   }
   try {
/*@egen*/(<WHILE> <LP> expr = Expression() <RP> body = Statement()/*@bgen(jjtree)*/
                                                             {
                                                               jjtree.closeNodeScope(jjtn002, true);
                                                               jjtc002 = false;
                                                             }
/*@egen*/ {
     jjtn002.condition = expr;
     jjtn002.body = body;
     return jjtn002;
  })/*@bgen(jjtree)*/
   } catch (Throwable jjte002) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte002 instanceof RuntimeException) {
       throw (RuntimeException)jjte002;
     }
     if (jjte002 instanceof ParseException) {
       throw (ParseException)jjte002;
     }
     throw (Error)jjte002;
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
   }
/*@egen*/               
  |/*@bgen(jjtree) returnStat_AST */
   {
     returnStat_AST jjtn003 = new returnStat_AST(JJTRETURNSTAT_AST);
     boolean jjtc003 = true;
     jjtree.openNodeScope(jjtn003);
   }
   try {
/*@egen*/(<RETURN> (expr = Expression())? <SCOLON>/*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn003, true);
                                               jjtc003 = false;
                                             }
/*@egen*/ {
    jjtn003.expr = expr;
    return jjtn003;
  })/*@bgen(jjtree)*/
   } catch (Throwable jjte003) {
     if (jjtc003) {
       jjtree.clearNodeScope(jjtn003);
       jjtc003 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte003 instanceof RuntimeException) {
       throw (RuntimeException)jjte003;
     }
     if (jjte003 instanceof ParseException) {
       throw (ParseException)jjte003;
     }
     throw (Error)jjte003;
   } finally {
     if (jjtc003) {
       jjtree.closeNodeScope(jjtn003, true);
     }
   }
/*@egen*/               
  |LOOKAHEAD(3)/*@bgen(jjtree) expressionStat_AST */
               {
                 expressionStat_AST jjtn004 = new expressionStat_AST(JJTEXPRESSIONSTAT_AST);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
               }
               try {
/*@egen*/( body = StatementExpression() <SCOLON>/*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn004, true);
                                                         jjtc004 = false;
                                                       }
/*@egen*/ {
    jjtn004.expressionStat = body;
    return jjtn004;
  })/*@bgen(jjtree)*/
               } catch (Throwable jjte004) {
                 if (jjtc004) {
                   jjtree.clearNodeScope(jjtn004);
                   jjtc004 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte004 instanceof RuntimeException) {
                   throw (RuntimeException)jjte004;
                 }
                 if (jjte004 instanceof ParseException) {
                   throw (ParseException)jjte004;
                 }
                 throw (Error)jjte004;
               } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004, true);
                 }
               }
/*@egen*/                     // Add to Statements attributes
  |LOOKAHEAD(3)/*@bgen(jjtree) varDeclStat_AST */
               {
                 varDeclStat_AST jjtn005 = new varDeclStat_AST(JJTVARDECLSTAT_AST);
                 boolean jjtc005 = true;
                 jjtree.openNodeScope(jjtn005);
               }
               try {
/*@egen*/( variables = FieldDeclarations(new FieldDetails())/*@bgen(jjtree)*/
                                                                   {
                                                                     jjtree.closeNodeScope(jjtn005, true);
                                                                     jjtc005 = false;
                                                                   }
/*@egen*/ {
    jjtn005.variables = variables;
    return jjtn005;
  })/*@bgen(jjtree)*/
               } catch (Throwable jjte005) {
                 if (jjtc005) {
                   jjtree.clearNodeScope(jjtn005);
                   jjtc005 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte005 instanceof RuntimeException) {
                   throw (RuntimeException)jjte005;
                 }
                 if (jjte005 instanceof ParseException) {
                   throw (ParseException)jjte005;
                 }
                 throw (Error)jjte005;
               } finally {
                 if (jjtc005) {
                   jjtree.closeNodeScope(jjtn005, true);
                 }
               }
/*@egen*/                  // Add to Statements attributes
  |LOOKAHEAD(3)/*@bgen(jjtree) block_AST */
               {
                 block_AST jjtn006 = new block_AST(JJTBLOCK_AST);
                 boolean jjtc006 = true;
                 jjtree.openNodeScope(jjtn006);
               }
               try {
/*@egen*/(Block()/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn006, true);
                          jjtc006 = false;
                        }
/*@egen*/ {return jjtn006;})/*@bgen(jjtree)*/
               } catch (Throwable jjte006) {
                 if (jjtc006) {
                   jjtree.clearNodeScope(jjtn006);
                   jjtc006 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte006 instanceof RuntimeException) {
                   throw (RuntimeException)jjte006;
                 }
                 if (jjte006 instanceof ParseException) {
                   throw (ParseException)jjte006;
                 }
                 throw (Error)jjte006;
               } finally {
                 if (jjtc006) {
                   jjtree.closeNodeScope(jjtn006, true);
                 }
               }
/*@egen*/           
  |/*@bgen(jjtree) breakStat_AST */
   {
     breakStat_AST jjtn007 = new breakStat_AST(JJTBREAKSTAT_AST);
     boolean jjtc007 = true;
     jjtree.openNodeScope(jjtn007);
   }
   try {
/*@egen*/(<BREAK> <SCOLON>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn007, true);
                       jjtc007 = false;
                     }
/*@egen*/ {return jjtn007;})/*@bgen(jjtree)*/
   } finally {
     if (jjtc007) {
       jjtree.closeNodeScope(jjtn007, true);
     }
   }
/*@egen*/              
  |/*@bgen(jjtree) continueStat_AST */
   {
     continueStat_AST jjtn008 = new continueStat_AST(JJTCONTINUESTAT_AST);
     boolean jjtc008 = true;
     jjtree.openNodeScope(jjtn008);
   }
   try {
/*@egen*/(<CONTINUE> <SCOLON>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn008, true);
                          jjtc008 = false;
                        }
/*@egen*/ {return jjtn008;})/*@bgen(jjtree)*/
   } finally {
     if (jjtc008) {
       jjtree.closeNodeScope(jjtn008, true);
     }
   }
/*@egen*/                 
  |/*@bgen(jjtree) emptyStat_AST */
   {
     emptyStat_AST jjtn009 = new emptyStat_AST(JJTEMPTYSTAT_AST);
     boolean jjtc009 = true;
     jjtree.openNodeScope(jjtn009);
   }
   try {
/*@egen*/(<SCOLON>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn009, true);
               jjtc009 = false;
             }
/*@egen*/ {return jjtn009;})/*@bgen(jjtree)*/
   } finally {
     if (jjtc009) {
       jjtree.closeNodeScope(jjtn009, true);
     }
   }
/*@egen*/              
}

SimpleNode Literal():{
    Token t = null;
}
{
  <NULL>/*@bgen(jjtree) nullExpr_AST */
  {
    nullExpr_AST jjtn001 = new nullExpr_AST(JJTNULLEXPR_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/
  {
    jjtn001.typeObj.name="null";
    return jjtn001;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/              
  |<TRUE>/*@bgen(jjtree) boolExpr_AST */
  {
    boolExpr_AST jjtn002 = new boolExpr_AST(JJTBOOLEXPR_AST);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;
  }
/*@egen*/  {
    jjtn002.typeObj.name="boolean";
    jjtn002.value = true;
    return jjtn002;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/              
  |<FALSE>/*@bgen(jjtree) boolExpr_AST */
  {
    boolExpr_AST jjtn003 = new boolExpr_AST(JJTBOOLEXPR_AST);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn003, true);
    jjtc003 = false;
  }
/*@egen*/
  {
    jjtn003.typeObj.name="boolean";
    jjtn003.value = false;
    return jjtn003;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/              
  |t = <INTEGER>/*@bgen(jjtree) intExpr_AST */
                {
                  intExpr_AST jjtn004 = new intExpr_AST(JJTINTEXPR_AST);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn004, true);
                  jjtc004 = false;
                }
/*@egen*/{
    jjtn004.typeObj.name="int";
    jjtn004.value = Integer.parseInt(t.image);
    return jjtn004;
  }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004, true);
                  }
                }
/*@egen*/             
  |t = <CHARLITERAL>/*@bgen(jjtree) charExpr_AST */
                    {
                      charExpr_AST jjtn005 = new charExpr_AST(JJTCHAREXPR_AST);
                      boolean jjtc005 = true;
                      jjtree.openNodeScope(jjtn005);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn005, true);
                      jjtc005 = false;
                    }
/*@egen*/{
    jjtn005.typeObj.name="char";
    jjtn005.value = t.image.charAt(0);
    return jjtn005;
  }/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005, true);
                      }
                    }
/*@egen*/              
  |t = <STRINGLITERAL>/*@bgen(jjtree) stringExpr_AST */
                      {
                        stringExpr_AST jjtn006 = new stringExpr_AST(JJTSTRINGEXPR_AST);
                        boolean jjtc006 = true;
                        jjtree.openNodeScope(jjtn006);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn006, true);
                        jjtc006 = false;
                      }
/*@egen*/{
    jjtn006.typeObj.name="String";
    jjtn006.typeObj.isClass=true;
    jjtn006.value = t.image;
    return jjtn006;
  }/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc006) {
                          jjtree.closeNodeScope(jjtn006, true);
                        }
                      }
/*@egen*/                
}

SimpleNode StatementExpression():{
    SimpleNode statExpr = null;
}
{
  LOOKAHEAD(10)
  statExpr = MethodCall()
  |LOOKAHEAD(10)
  statExpr = Assignment()
  |LOOKAHEAD(10)
  statExpr = Expression()
  {
    return statExpr;  }
}

assignOperator_AST Assignment():{}
{/*@bgen(jjtree) assignOperator_AST */
  {
    assignOperator_AST jjtn001 = new assignOperator_AST(JJTASSIGNOPERATOR_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (FieldAccess() <ASSIGN>  Expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {
    return jjtn001;  })/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/                   
}

fieldAccess_AST FieldAccess():{}
{
  FieldAccess_1()(MethodPrime())?/*@bgen(jjtree) fieldAccess_AST */
  {
    fieldAccess_AST jjtn001 = new fieldAccess_AST(JJTFIELDACCESS_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {
    return jjtn001;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/                
} 

fieldAccess1_AST FieldAccess_1():{
  SimpleNode primaryFieldAccess = null;
  Token id =null;
  binaryExpression_AST index = null;
  List<binaryExpression_AST> arrayIndices = null;
}
{
  (LOOKAHEAD(6)
  (primaryFieldAccess = PrimaryFieldAccess() <DOT>/*@bgen(jjtree) fieldExpr_AST */
                                                   {
                                                     fieldExpr_AST jjtn001 = new fieldExpr_AST(JJTFIELDEXPR_AST);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                   }
                                                   try {
/*@egen*/ id = <ID>/*@bgen(jjtree)*/
                                                   } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                     }
                                                   }
/*@egen*/               ) (/*@bgen(jjtree) arrayExpr_AST */
                                                                              {
                                                                                arrayExpr_AST jjtn002 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                                                                boolean jjtc002 = true;
                                                                                jjtree.openNodeScope(jjtn002);
                                                                              }
                                                                              try {
/*@egen*/(<LSB> index = Expression() <RSB> {
  	if (arrayIndices == null) {
  	  arrayIndices = new ArrayList<binaryExpression_AST>();  	}  
	arrayIndices.add(index);
  })+/*@bgen(jjtree)*/
                                                                              } catch (Throwable jjte002) {
                                                                                if (jjtc002) {
                                                                                  jjtree.clearNodeScope(jjtn002);
                                                                                  jjtc002 = false;
                                                                                } else {
                                                                                  jjtree.popNode();
                                                                                }
                                                                                if (jjte002 instanceof RuntimeException) {
                                                                                  throw (RuntimeException)jjte002;
                                                                                }
                                                                                if (jjte002 instanceof ParseException) {
                                                                                  throw (ParseException)jjte002;
                                                                                }
                                                                                throw (Error)jjte002;
                                                                              } finally {
                                                                                if (jjtc002) {
                                                                                  jjtree.closeNodeScope(jjtn002, true);
                                                                                }
                                                                              }
/*@egen*/               )
  | LOOKAHEAD(6)
  primaryFieldAccess = PrimaryFieldAccess() <DOT>/*@bgen(jjtree) fieldExpr_AST */
                                                  {
                                                    fieldExpr_AST jjtn003 = new fieldExpr_AST(JJTFIELDEXPR_AST);
                                                    boolean jjtc003 = true;
                                                    jjtree.openNodeScope(jjtn003);
                                                  }
                                                  try {
/*@egen*/ id = <ID>/*@bgen(jjtree)*/
                                                  } finally {
                                                    if (jjtc003) {
                                                      jjtree.closeNodeScope(jjtn003, true);
                                                    }
                                                  }
/*@egen*/               
  | LOOKAHEAD(6)
  (/*@bgen(jjtree) idExpr_AST */
   {
     idExpr_AST jjtn004 = new idExpr_AST(JJTIDEXPR_AST);
     boolean jjtc004 = true;
     jjtree.openNodeScope(jjtn004);
   }
   try {
/*@egen*/id = <ID>/*@bgen(jjtree)*/
   } finally {
     if (jjtc004) {
       jjtree.closeNodeScope(jjtn004, true);
     }
   }
/*@egen*/            ) (/*@bgen(jjtree) arrayExpr_AST */
                           {
                             arrayExpr_AST jjtn005 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                             boolean jjtc005 = true;
                             jjtree.openNodeScope(jjtn005);
                           }
                           try {
/*@egen*/(<LSB> index = Expression() <RSB> {
    if (arrayIndices == null) {
  	  arrayIndices = new ArrayList<binaryExpression_AST>();
  	}  
	arrayIndices.add(index);
  })+/*@bgen(jjtree)*/
                           } catch (Throwable jjte005) {
                             if (jjtc005) {
                               jjtree.clearNodeScope(jjtn005);
                               jjtc005 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte005 instanceof RuntimeException) {
                               throw (RuntimeException)jjte005;
                             }
                             if (jjte005 instanceof ParseException) {
                               throw (ParseException)jjte005;
                             }
                             throw (Error)jjte005;
                           } finally {
                             if (jjtc005) {
                               jjtree.closeNodeScope(jjtn005, true);
                             }
                           }
/*@egen*/               ) 
  |/*@bgen(jjtree) idExpr_AST */
    {
      idExpr_AST jjtn006 = new idExpr_AST(JJTIDEXPR_AST);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
    }
    try {
/*@egen*/ id = <ID>/*@bgen(jjtree)*/
    } finally {
      if (jjtc006) {
        jjtree.closeNodeScope(jjtn006, true);
      }
    }
/*@egen*/            )/*@bgen(jjtree) fieldAccess1_AST */
  {
    fieldAccess1_AST jjtn007 = new fieldAccess1_AST(JJTFIELDACCESS1_AST);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn007, true);
    jjtc007 = false;
  }
/*@egen*/  {
    jjtn007.name = id.image;
    jjtn007.arrayIndices = arrayIndices;
    jjtn007.primaryFieldAccess = primaryFieldAccess;
    return jjtn007;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
  }
/*@egen*/                 
}

SimpleNode PrimaryFieldAccess():{
  SimpleNode primaryFieldAccess = null;
  Token id = null;
  List< binaryExpression_AST> args = null;
}
{
  (LOOKAHEAD(3) primaryFieldAccess = Literal()
  | LOOKAHEAD(3) <THIS>/*@bgen(jjtree) thisExpr_AST */
  {
    thisExpr_AST jjtn001 = new thisExpr_AST(JJTTHISEXPR_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {
    primaryFieldAccess = jjtn001;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/             
  | LOOKAHEAD(3) <SUPER>/*@bgen(jjtree) superExpr_AST */
  {
    superExpr_AST jjtn002 = new superExpr_AST(JJTSUPEREXPR_AST);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;
  }
/*@egen*/  {
    primaryFieldAccess = jjtn002;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/              
  | LOOKAHEAD(3) <LP> primaryFieldAccess = Expression() <RP>
  | LOOKAHEAD(3) <NEW> <ID> <LP> (ActualArguments())? <RP>/*@bgen(jjtree) newClassExpr_AST */
  {
    newClassExpr_AST jjtn003 = new newClassExpr_AST(JJTNEWCLASSEXPR_AST);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn003, true);
    jjtc003 = false;
  }
/*@egen*/  {
    jjtn003.name = id.image;
  	IntegerMuted intBaseMuted = new IntegerMuted(-1);
  	ClassUnit classUnit = (ClassUnit) SYMBOL_TABLE.lookUp(id.image, UnitType.CLASS, intBaseMuted);
  	jjtn003.arguments =  args;
  	if (classUnit == null) {
    	throw new ParseException("Class " + id.image + " has not been declared.");
  	}
  	jjtn003.classUnit = classUnit;
  	primaryFieldAccess = jjtn003;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/                 )  {
    return primaryFieldAccess;  }
 
}

methodCall_AST MethodCall() :{
	methodCall1_AST m1 = null;
	methodCall2_AST m2 = null;
}
{
  m1 = MethodCall_1() (m2 = MethodCall_2())?/*@bgen(jjtree) methodCall_AST */
  {
    methodCall_AST jjtn001 = new methodCall_AST(JJTMETHODCALL_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/
  {
    jjtn001.m1 = m1;
    jjtn001.m2 = m2;    return jjtn001;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/                
}

methodCall1_AST MethodCall_1():{
  methodParent_AST mParent = null;
  methodPrime_AST mPrime = null;
  List<binaryExpression_AST> actualArgs = null;
}
{
  mParent = MethodParent() (mPrime = MethodPrime())? <LP>(actualArgs = ActualArguments())?<RP>/*@bgen(jjtree) methodCall1_AST */
  {
    methodCall1_AST jjtn001 = new methodCall1_AST(JJTMETHODCALL1_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/
  {
    jjtn001.mParent = mParent;
    jjtn001.mPrime = mPrime;
    jjtn001.actualArgs = actualArgs;    return jjtn001;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/                 
}

methodCall2_AST MethodCall_2():{
	Token id = null;
	List<binaryExpression_AST> actualArgs = null;
	methodCall2_AST m2 = null;
	binaryExpression_AST arrayIndex = null;
	methodPrime_AST mPrime = null;
}
{
  (LOOKAHEAD(5)<DOT> id = <ID> <LP> (actualArgs = ActualArguments())?/*@bgen(jjtree) methodExpr_AST */
                                                                      {
                                                                        methodExpr_AST jjtn001 = new methodExpr_AST(JJTMETHODEXPR_AST);
                                                                        boolean jjtc001 = true;
                                                                        jjtree.openNodeScope(jjtn001);
                                                                      }
                                                                      try {
/*@egen*/ <RP>/*@bgen(jjtree)*/
                                                                      } finally {
                                                                        if (jjtc001) {
                                                                          jjtree.closeNodeScope(jjtn001, true);
                                                                        }
                                                                      }
/*@egen*/                 m2 = MethodCall_2()
  | LOOKAHEAD(5)
    <DOT> id = <ID> <LSB> arrayIndex = Expression() <RSB> <LP> (actualArgs = ActualArguments())? <RP> m2 = MethodCall_2()
  | LOOKAHEAD(5)
    <DOT> id = <ID> mPrime = MethodPrime() <LP> (actualArgs = ActualArguments())? <RP> m2 = MethodCall_2()
  | LOOKAHEAD(5)
    <DOT> id = <ID> <LSB> arrayIndex = Expression() <RSB> mPrime = MethodPrime() <LP> (actualArgs = ActualArguments())? <RP> m2 = MethodCall_2()
  | LOOKAHEAD(5)
    <DOT> id = <ID> <LP> (actualArgs = ActualArguments())? <RP>
  | LOOKAHEAD(5)
    <DOT> id = <ID> <LSB> arrayIndex = Expression() <RSB> <LP> (actualArgs = ActualArguments())? <RP>
  | LOOKAHEAD(5)
    <DOT> id = <ID> mPrime = MethodPrime() <LP> (actualArgs = ActualArguments())? <RP>
  | LOOKAHEAD(5)
    <DOT> id = <ID> <LSB> arrayIndex = Expression() <RSB> mPrime = MethodPrime() <LP> (actualArgs = ActualArguments())? <RP>)/*@bgen(jjtree) methodCall2_AST */
    {
      methodCall2_AST jjtn002 = new methodCall2_AST(JJTMETHODCALL2_AST);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
    }
/*@egen*/    {
      jjtn002.name = id.image;
      jjtn002.actualArgs = actualArgs;
      jjtn002.m2 = m2;
      jjtn002.arrayIndex = arrayIndex;
      jjtn002.mPrime = mPrime;
      return jjtn002;    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/                
}

methodParent_AST MethodParent():{
	SimpleNode primaryMethodParent = null;
	Token id = null;
	binaryExpression_AST arrayIndex = null;
}
{
  ((primaryMethodParent = PrimaryMethodParent() <DOT>/*@bgen(jjtree) fieldExpr_AST */
                                                      {
                                                        fieldExpr_AST jjtn001 = new fieldExpr_AST(JJTFIELDEXPR_AST);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
                                                      }
                                                      try {
/*@egen*/ id = <ID>/*@bgen(jjtree)*/
                                                      } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                        }
                                                      }
/*@egen*/               )  (<LSB> arrayIndex = Expression()/*@bgen(jjtree) arrayExpr_AST */
                                                                                                                  {
                                                                                                                    arrayExpr_AST jjtn002 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                                                                                                    boolean jjtc002 = true;
                                                                                                                    jjtree.openNodeScope(jjtn002);
                                                                                                                  }
                                                                                                                  try {
/*@egen*/ <RSB>/*@bgen(jjtree)*/
                                                                                                                  } finally {
                                                                                                                    if (jjtc002) {
                                                                                                                      jjtree.closeNodeScope(jjtn002, true);
                                                                                                                    }
                                                                                                                  }
/*@egen*/               )? 
  | (/*@bgen(jjtree) idExpr_AST */
     {
       idExpr_AST jjtn003 = new idExpr_AST(JJTIDEXPR_AST);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
     }
     try {
/*@egen*/id = <ID>/*@bgen(jjtree)*/
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
       }
     }
/*@egen*/            ) (<LSB> arrayIndex = Expression()/*@bgen(jjtree) arrayExpr_AST */
                                                             {
                                                               arrayExpr_AST jjtn004 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                                               boolean jjtc004 = true;
                                                               jjtree.openNodeScope(jjtn004);
                                                             }
                                                             try {
/*@egen*/ <RSB>/*@bgen(jjtree)*/
                                                             } finally {
                                                               if (jjtc004) {
                                                                 jjtree.closeNodeScope(jjtn004, true);
                                                               }
                                                             }
/*@egen*/               )?)/*@bgen(jjtree) methodParent_AST */
        {
          methodParent_AST jjtn005 = new methodParent_AST(JJTMETHODPARENT_AST);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn005, true);
          jjtc005 = false;
        }
/*@egen*/	{
	  jjtn005.primaryMethodParent = primaryMethodParent;
	  jjtn005.name = id.image;
	  jjtn005.arrayIndex = arrayIndex;
	  return jjtn005;	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
        }
/*@egen*/                 

}

SimpleNode PrimaryMethodParent():{
	SimpleNode primaryMethodParent = null;
	Token id = null;
	List< binaryExpression_AST> args = null;
}
{
  (LOOKAHEAD(3)
    primaryMethodParent = Literal()
  | LOOKAHEAD(3)
    <THIS>/*@bgen(jjtree) thisExpr_AST */
    {
      thisExpr_AST jjtn001 = new thisExpr_AST(JJTTHISEXPR_AST);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
    }
/*@egen*/    {
      primaryMethodParent = jjtn001;    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/             
  | LOOKAHEAD(3)
    <SUPER>/*@bgen(jjtree) superExpr_AST */
    {
      superExpr_AST jjtn002 = new superExpr_AST(JJTSUPEREXPR_AST);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
    }
/*@egen*/    {
      primaryMethodParent = jjtn002;    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/              
  | LOOKAHEAD(3)
    <LP> primaryMethodParent = Expression() <RP>
  | LOOKAHEAD(3)/*@bgen(jjtree) newClassExpr_AST */
    {
      newClassExpr_AST jjtn003 = new newClassExpr_AST(JJTNEWCLASSEXPR_AST);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/
    (<NEW> id =<ID> <LP> (args = ActualArguments())? <RP>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn003, true);
      jjtc003 = false;
    }
/*@egen*/    {
      jjtn003.name = id.image;
      IntegerMuted intBaseMuted = new IntegerMuted(-1);
      ClassUnit classUnit = (ClassUnit) SYMBOL_TABLE.lookUp(id.image, UnitType.CLASS, intBaseMuted);
      jjtn003.arguments =  args;
      if (classUnit == null) {
        throw new ParseException("Class " + id.image + " has not been declared.");
      }
      jjtn003.classUnit = classUnit;
      primaryMethodParent = jjtn003;    })/*@bgen(jjtree)*/
    } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        throw (RuntimeException)jjte003;
      }
      if (jjte003 instanceof ParseException) {
        throw (ParseException)jjte003;
      }
      throw (Error)jjte003;
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/                 )    {
      return primaryMethodParent;    }
}

methodPrime_AST MethodPrime():{
	methodPrime_AST mPrime = null;
	Token id = null;
	binaryExpression_AST arrayIndex = null;
}
{
  (LOOKAHEAD (3)
    <DOT>/*@bgen(jjtree) fieldExpr_AST */
          {
            fieldExpr_AST jjtn001 = new fieldExpr_AST(JJTFIELDEXPR_AST);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ id = <ID>/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/                mPrime = MethodPrime()
  | LOOKAHEAD(3)
    <DOT>/*@bgen(jjtree) fieldExpr_AST */
          {
            fieldExpr_AST jjtn002 = new fieldExpr_AST(JJTFIELDEXPR_AST);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ id = <ID>/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/                <LSB> arrayIndex = Expression()/*@bgen(jjtree) arrayExpr_AST */
                                                                   {
                                                                     arrayExpr_AST jjtn003 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                                                     boolean jjtc003 = true;
                                                                     jjtree.openNodeScope(jjtn003);
                                                                   }
                                                                   try {
/*@egen*/ <RSB>/*@bgen(jjtree)*/
                                                                   } finally {
                                                                     if (jjtc003) {
                                                                       jjtree.closeNodeScope(jjtn003, true);
                                                                     }
                                                                   }
/*@egen*/                mPrime = MethodPrime()
  | LOOKAHEAD(3) <DOT>/*@bgen(jjtree) fieldExpr_AST */
                       {
                         fieldExpr_AST jjtn004 = new fieldExpr_AST(JJTFIELDEXPR_AST);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
                       }
                       try {
/*@egen*/ id = <ID>/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004, true);
                         }
                       }
/*@egen*/                <LSB> arrayIndex = Expression()/*@bgen(jjtree) arrayExpr_AST */
                                                                                {
                                                                                  arrayExpr_AST jjtn005 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                                                                  boolean jjtc005 = true;
                                                                                  jjtree.openNodeScope(jjtn005);
                                                                                }
                                                                                try {
/*@egen*/ <RSB>/*@bgen(jjtree)*/
                                                                                } finally {
                                                                                  if (jjtc005) {
                                                                                    jjtree.closeNodeScope(jjtn005, true);
                                                                                  }
                                                                                }
/*@egen*/               
  | <DOT>/*@bgen(jjtree) fieldExpr_AST */
          {
            fieldExpr_AST jjtn006 = new fieldExpr_AST(JJTFIELDEXPR_AST);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
          }
          try {
/*@egen*/ id = <ID>/*@bgen(jjtree)*/
          } finally {
            if (jjtc006) {
              jjtree.closeNodeScope(jjtn006, true);
            }
          }
/*@egen*/               )/*@bgen(jjtree) methodPrime_AST */
  {
    methodPrime_AST jjtn007 = new methodPrime_AST(JJTMETHODPRIME_AST);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn007, true);
    jjtc007 = false;
  }
/*@egen*/  {
    jjtn007.name = id.image;
    jjtn007.mPrime = mPrime;
    jjtn007.arrayIndex = arrayIndex;
    return jjtn007;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
  }
/*@egen*/                
}

List<binaryExpression_AST> ActualArguments():{
    List<binaryExpression_AST> expressions = new ArrayList<binaryExpression_AST>();
    binaryExpression_AST expression = null;
}
{
  expression = Expression()  {
    expressions.add(expression);  } (<COMMA> expression = Expression()  {
    expressions.add(expression);  })*  {    return expressions;
  }
}

// Same as OR operation since it has lowest precedence
binaryExpression_AST Expression():{
    andOperator_AST lhs = null;
    binaryExpression_AST rhs = null;
}
{/*@bgen(jjtree) binaryExpression_AST */
  {
    binaryExpression_AST jjtn001 = new binaryExpression_AST(JJTBINARYEXPRESSION_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (lhs = AndExpression() (LOOKAHEAD(1) <OR> rhs = Expression())?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {
    jjtn001.lhs = lhs;
    jjtn001.rhs = rhs; 
    return jjtn001;
  })/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/                       
}


andOperator_AST AndExpression():{
  equality_AST equalityExpr =null;
  andOperator_AST andExpr = null;
}
{/*@bgen(jjtree) andOperator_AST */
  {
    andOperator_AST jjtn001 = new andOperator_AST(JJTANDOPERATOR_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (equalityExpr = EqualityExpression() (LOOKAHEAD(1) <AND> andExpr = AndExpression())?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {
    jjtn001.lhs = equalityExpr;
    jjtn001.rhs = andExpr;
    return jjtn001;  })/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/                  
  /*(LOOKAHEAD(10)
  EqualityExpression() <AND> #andOperator_AST AndExpression()
  | LOOKAHEAD(10) EqualityExpression()) #binaryExpression_AST(>1)*/
}

equality_AST EqualityExpression():{}
{/*@bgen(jjtree) equality_AST */
  {
    equality_AST jjtn001 = new equality_AST(JJTEQUALITY_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (RelationalExpression() (LOOKAHEAD(1)(LOOKAHEAD(1) (<EQUAL> EqualityExpression())
  | LOOKAHEAD(1) (<NOTEQUAL> EqualityExpression())))?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {
    return jjtn001;  })/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/              
  /*(LOOKAHEAD(10)
  RelationalExpression() <EQUAL> #equalOperator_AST EqualityExpression()
  | LOOKAHEAD(10) RelationalExpression()) #binaryExpression_AST(>1)*/
}

relational_AST RelationalExpression():{}
{/*@bgen(jjtree) relational_AST */
  {
    relational_AST jjtn001 = new relational_AST(JJTRELATIONAL_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (SumExpression() (LOOKAHEAD(1)(LOOKAHEAD(1) (<GREATER> RelationalExpression())
  | LOOKAHEAD(1) (<GREATEREQ> RelationalExpression())
  | LOOKAHEAD(1) (<LESSER>  RelationalExpression())
  | LOOKAHEAD(1) (<LESSEREQ> RelationalExpression())))?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {
    return jjtn001;  })/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/                
  /*(LOOKAHEAD(10) SumExpression() <GREATER> #greaterOperator_AST RelationalExpression()
  |LOOKAHEAD(10) SumExpression() <GREATEREQ> #greaterEqualOperator_AST RelationalExpression()
  |LOOKAHEAD(10) SumExpression() <LESSER> #lesserOperator_AST RelationalExpression()
  |LOOKAHEAD(10) SumExpression() <LESSEREQ> #lesserEqualOperator_AST RelationalExpression()
  |LOOKAHEAD(10) SumExpression()) #binaryExpression_AST(>1)*/
}

sum_AST SumExpression():{}
{/*@bgen(jjtree) #sum_AST(> 1) */
  {
    sum_AST jjtn001 = new sum_AST(JJTSUM_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (FactorExpression() (LOOKAHEAD(1)(LOOKAHEAD(1)(<PLUS> SumExpression())
  | LOOKAHEAD(1)( <MINUS> SumExpression())))?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    jjtc001 = false;
  }
/*@egen*/  {
    return jjtn001;  }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/             
  /*
  (LOOKAHEAD(10) FactorExpression() <PLUS> #plusOperator_AST SumExpression()
  |LOOKAHEAD(10) FactorExpression() <MINUS> #minusOperator_AST SumExpression()
  |LOOKAHEAD(10) FactorExpression())#binaryExpression_AST(>1)*/
}

factor_AST FactorExpression():{}
{/*@bgen(jjtree) #factor_AST(> 1) */
  {
    factor_AST jjtn001 = new factor_AST(JJTFACTOR_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (UnaryExpression() (LOOKAHEAD(1)(LOOKAHEAD(1)( <MULTIPLY> FactorExpression())
  | LOOKAHEAD(1)( <DIVIDE> FactorExpression())
  | LOOKAHEAD(1)( <MODULO> FactorExpression())))?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    jjtc001 = false;
  }
/*@egen*/  {
    return jjtn001;  })/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/                
  /*
  (LOOKAHEAD(10) UnaryExpression() <MULTIPLY> #multiplyOperator_AST FactorExpression()
  |LOOKAHEAD(10) UnaryExpression() <DIVIDE> #divideOperator_AST FactorExpression()
  |LOOKAHEAD(10) UnaryExpression())#binaryExpression_AST(>1)*/
}

unary_AST UnaryExpression():{
	binaryExpression_AST expression = null;
	Token sign = null;
	SimpleNode primary = null;
}
{/*@bgen(jjtree) unary_AST */
  {
    unary_AST jjtn001 = new unary_AST(JJTUNARY_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ((((token = <PLUS> | token = <MINUS> | token = <NOT> ) expression = Expression()  {
    jjtn001.sign = token;
    jjtn001.expr = expression;  })
  | (primary = Primary())  {
    jjtn001.primary = primary;  })/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {
    return jjtn001;  })/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/           
}

SimpleNode Primary(): {
	primaryExisting_AST primaryExist = null;
	newArray_AST newArray = null;
}
{
  LOOKAHEAD(5) (primaryExist = PrimaryExisting()  {
    return primaryExist;  })
  | LOOKAHEAD(5) (newArray = NewArray())  {
      return newArray;  }
}

primaryExisting_AST PrimaryExisting(): {
    SimpleNode p1 = null;
    primaryExisiting2_AST p2 = null;
}
{/*@bgen(jjtree) primaryExisting_AST */
  {
    primaryExisting_AST jjtn001 = new primaryExisting_AST(JJTPRIMARYEXISTING_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (p1 = PrimaryExisting_1()  (p2 = PrimaryExisting_2())?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {
    jjtn001.p1 = p1;
    jjtn001.p2 = p2;
    return jjtn001;  })/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/                     
}

SimpleNode PrimaryExisting_1():{
  Token t = null;
  List<binaryExpression_AST> arguments = null;
  List<binaryExpression_AST> arrayIndices = new ArrayList<binaryExpression_AST>();
  binaryExpression_AST arrayExpr = null;
  int size = 0;
}
{
  LOOKAHEAD(3)
    Literal()/*@bgen(jjtree) literal_AST */
    {
      literal_AST jjtn001 = new literal_AST(JJTLITERAL_AST);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
    }
/*@egen*/    {
      return jjtn001;    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/            
  | LOOKAHEAD(3)
    <THIS>/*@bgen(jjtree) thisExpr_AST */
    {
      thisExpr_AST jjtn002 = new thisExpr_AST(JJTTHISEXPR_AST);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
    }
/*@egen*/    {
      return jjtn002;    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/             
  | LOOKAHEAD(3)
    <SUPER>/*@bgen(jjtree) superExpr_AST */
            {
              superExpr_AST jjtn003 = new superExpr_AST(JJTSUPEREXPR_AST);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn003, true);
              jjtc003 = false;
            }
/*@egen*/ {
      return jjtn003;
    }/*@bgen(jjtree)*/
            } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003, true);
              }
            }
/*@egen*/              
  | LOOKAHEAD(3)
    <LP> Expression() <RP>/*@bgen(jjtree) binaryExpression_AST */
                           {
                             binaryExpression_AST jjtn004 = new binaryExpression_AST(JJTBINARYEXPRESSION_AST);
                             boolean jjtc004 = true;
                             jjtree.openNodeScope(jjtn004);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn004, true);
                             jjtc004 = false;
                           }
/*@egen*/ {
      return jjtn004;
    }/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc004) {
                               jjtree.closeNodeScope(jjtn004, true);
                             }
                           }
/*@egen*/                      
  | LOOKAHEAD(3)/*@bgen(jjtree) newClassExpr_AST */
    {
      newClassExpr_AST jjtn005 = new newClassExpr_AST(JJTNEWCLASSEXPR_AST);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
    }
    try {
/*@egen*/
    (<NEW> t = <ID> <LP> (arguments = ActualArguments())? <RP>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn005, true);
      jjtc005 = false;
    }
/*@egen*/    {
      jjtn005.name = t.image;
      IntegerMuted intBaseMuted = new IntegerMuted(-1);
      ClassUnit classUnit = (ClassUnit) SYMBOL_TABLE.lookUp(t.image, UnitType.CLASS, intBaseMuted);
      jjtn005.arguments =  arguments;
      if (classUnit == null) {
        throw new ParseException("Class " + t.image + " has not been declared.");      }
      jjtn005.classUnit = classUnit;
      return jjtn005;    })/*@bgen(jjtree)*/
    } catch (Throwable jjte005) {
      if (jjtc005) {
        jjtree.clearNodeScope(jjtn005);
        jjtc005 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte005 instanceof RuntimeException) {
        throw (RuntimeException)jjte005;
      }
      if (jjte005 instanceof ParseException) {
        throw (ParseException)jjte005;
      }
      throw (Error)jjte005;
    } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005, true);
      }
    }
/*@egen*/                  
  | LOOKAHEAD(3)/*@bgen(jjtree) methodExpr_AST */
    {
      methodExpr_AST jjtn006 = new methodExpr_AST(JJTMETHODEXPR_AST);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
    }
    try {
/*@egen*/
    (t = <ID>  <LP> (arguments = ActualArguments())? <RP>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn006, true);
      jjtc006 = false;
    }
/*@egen*/    {
      jjtn006.name = t.image;
      IntegerMuted intBaseMuted = new IntegerMuted(-1);
      MethodUnit methodUnit = (MethodUnit) SYMBOL_TABLE.lookUp(t.image, UnitType.METHOD, intBaseMuted);
      jjtn006.arguments =  arguments;
      if (methodUnit == null) {
        throw new ParseException("Method " + t.image + " has not been defined.");
      }
      jjtn006.methodUnit = methodUnit;
      return jjtn006;    })/*@bgen(jjtree)*/
    } catch (Throwable jjte006) {
      if (jjtc006) {
        jjtree.clearNodeScope(jjtn006);
        jjtc006 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte006 instanceof RuntimeException) {
        throw (RuntimeException)jjte006;
      }
      if (jjte006 instanceof ParseException) {
        throw (ParseException)jjte006;
      }
      throw (Error)jjte006;
    } finally {
      if (jjtc006) {
        jjtree.closeNodeScope(jjtn006, true);
      }
    }
/*@egen*/                
  | LOOKAHEAD(3)/*@bgen(jjtree) arrayExpr_AST */
    {
      arrayExpr_AST jjtn007 = new arrayExpr_AST(JJTARRAYEXPR_AST);
      boolean jjtc007 = true;
      jjtree.openNodeScope(jjtn007);
    }
    try {
/*@egen*/
    (t = <ID> (<LSB> arrayExpr = Expression() <RSB>    {
      size = size + 1;
      arrayIndices.add(arrayExpr);    })+/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn007, true);
      jjtc007 = false;
    }
/*@egen*/    {
      jjtn007.name = t.image;
      jjtn007.size = size;
      jjtn007.arrayIndices = arrayIndices;
      IntegerMuted intBaseMuted = new IntegerMuted(-1);
      VariableUnit variableUnit = (VariableUnit) SYMBOL_TABLE.lookUp(t.image, UnitType.VARIABLE, intBaseMuted);
      if (variableUnit == null) {
        throw new ParseException("Variable " + t.image + " has not been defined.");
      }
      jjtn007.variableUnit = variableUnit;
      return jjtn007;    })/*@bgen(jjtree)*/
    } catch (Throwable jjte007) {
      if (jjtc007) {
        jjtree.clearNodeScope(jjtn007);
        jjtc007 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte007 instanceof RuntimeException) {
        throw (RuntimeException)jjte007;
      }
      if (jjte007 instanceof ParseException) {
        throw (ParseException)jjte007;
      }
      throw (Error)jjte007;
    } finally {
      if (jjtc007) {
        jjtree.closeNodeScope(jjtn007, true);
      }
    }
/*@egen*/               
  | t = <ID>/*@bgen(jjtree) idExpr_AST */
  {
    idExpr_AST jjtn008 = new idExpr_AST(JJTIDEXPR_AST);
    boolean jjtc008 = true;
    jjtree.openNodeScope(jjtn008);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn008, true);
    jjtc008 = false;
  }
/*@egen*/  {
    jjtn008.name = t.image;
    IntegerMuted intBaseMuted = new IntegerMuted(-1);
    VariableUnit variableUnit = (VariableUnit) SYMBOL_TABLE.lookUp(t.image, UnitType.VARIABLE, intBaseMuted);
    if (variableUnit == null) {
	  throw new ParseException("Variable " + t.image + " has not been defined.");
	}
    jjtn008.variableUnit = variableUnit;
    return jjtn008;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc008) {
      jjtree.closeNodeScope(jjtn008, true);
    }
  }
/*@egen*/            
}
 
primaryExisiting2_AST PrimaryExisting_2():{
    Token t = null;
    List<binaryExpression_AST> args = null;
    binaryExpression_AST arrayExpression = null;
    primaryExisiting2_AST p2 = null;
}
{/*@bgen(jjtree) primaryExisiting2_AST */
    {
      primaryExisiting2_AST jjtn004 = new primaryExisiting2_AST(JJTPRIMARYEXISITING2_AST);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
    }
    try {
/*@egen*/
    ((<DOT>/*@bgen(jjtree) fieldExpr_AST */
            {
              fieldExpr_AST jjtn001 = new fieldExpr_AST(JJTFIELDEXPR_AST);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ t = <ID>/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/               ) ((<LP> (args = ActualArguments())?/*@bgen(jjtree) methodExpr_AST */
                                                                        {
                                                                          methodExpr_AST jjtn002 = new methodExpr_AST(JJTMETHODEXPR_AST);
                                                                          boolean jjtc002 = true;
                                                                          jjtree.openNodeScope(jjtn002);
                                                                        }
                                                                        try {
/*@egen*/ <RP>/*@bgen(jjtree)*/
                                                                        } finally {
                                                                          if (jjtc002) {
                                                                            jjtree.closeNodeScope(jjtn002, true);
                                                                          }
                                                                        }
/*@egen*/                )
    | (<LSB> arrayExpression = Expression()/*@bgen(jjtree) arrayExpr_AST */
                                            {
                                              arrayExpr_AST jjtn003 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                              boolean jjtc003 = true;
                                              jjtree.openNodeScope(jjtn003);
                                            }
                                            try {
/*@egen*/ <RSB>/*@bgen(jjtree)*/
                                            } finally {
                                              if (jjtc003) {
                                                jjtree.closeNodeScope(jjtn003, true);
                                              }
                                            }
/*@egen*/               ))? (p2 = PrimaryExisting_2())?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn004, true);
      jjtc004 = false;
    }
/*@egen*/    {
      jjtn004.attribute = t.image;
      jjtn004.arguments = args;
      jjtn004.arrayExpression = arrayExpression;
      jjtn004.p2 = p2;
      return jjtn004;    })/*@bgen(jjtree)*/
    } catch (Throwable jjte004) {
      if (jjtc004) {
        jjtree.clearNodeScope(jjtn004);
        jjtc004 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte004 instanceof RuntimeException) {
        throw (RuntimeException)jjte004;
      }
      if (jjte004 instanceof ParseException) {
        throw (ParseException)jjte004;
      }
      throw (Error)jjte004;
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
    }
/*@egen*/                         
    
    /*LOOKAHEAD(5)  
      < DOT > <ID > <LP> (ActualArguments())? <RP> #methodExpr_AST PrimaryExisting_2()
    | LOOKAHEAD(5)
      < DOT > <ID > #fieldExpr_AST PrimaryExisting_2()
    | LOOKAHEAD(5)
      < DOT > <ID > <LSB> Expression() <RSB> #arrayExpr_AST PrimaryExisting_2()
    | LOOKAHEAD(3)
      < DOT > <ID > <LSB> Expression() <RSB> #arrayExpr_AST
    | LOOKAHEAD(3)
      < DOT > <ID > <LP> (ActualArguments())? <RP> #methodExpr_AST
    | < DOT > <ID > #fieldExpr_AST*/
}

newArray_AST NewArray():{
	SimpleNode type = null;
	List<binaryExpression_AST> arrayIndices = new ArrayList<binaryExpression_AST>();
	binaryExpression_AST arrayIndex  = null;
	int size  = 0;
}
{/*@bgen(jjtree) newArray_AST */
  {
    newArray_AST jjtn001 = new newArray_AST(JJTNEWARRAY_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (<NEW> type = Type() (<LSB> arrayIndex = Expression() <RSB>  {
 	size = size + 1;
 	arrayIndices.add(arrayIndex);      })+/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {
    type.typeObj.arraySize = size;
    type.typeObj.isArray = true;
    jjtn001.size = size;
    jjtn001.arrayIndices = arrayIndices;
    jjtn001.typeObj = type.typeObj;
    return jjtn001;  })/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/             
}
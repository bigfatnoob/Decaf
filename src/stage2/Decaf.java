/* Generated By:JJTree&JavaCC: Do not edit this line. Decaf.java */
package stage2;
import java.util.*;
import java.lang.*;
public class Decaf/*@bgen(jjtree)*/implements DecafTreeConstants, DecafConstants {/*@bgen(jjtree)*/
  protected JJTDecafState jjtree = new JJTDecafState();public static SymbolTable SYMBOL_TABLE = SymbolTable.getSymbolTable();
  /**
  * Mode = 0 represents scope construction
    Mode = 1 represents symbol table construction 
  */
  public static int MODE = 0;

  public static void main(String args []) throws Exception
  {
    Decaf parser;
    DecafVisitor visitor = new TypeChecker();
    CodeGenerator codeGen = new CodeGenerator();
    ScopeFactory sf = ScopeFactory.getScopeFactory();
    if (args.length == 1) {
      try {
        parser = new Decaf(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File "+args[0]+ " not found," +
            " reading from terminal instead");
        parser = new Decaf(System.in);
      }
    } else {
      System.out.println("Reading from standard input...");
      parser =  new Decaf(System.in);
    }
    start_AST start = null;
    try
    {
           /**
      *Defaults IO
      */
          parser = new Decaf(new java.io.FileInputStream("src/stage2/Defaults.decaf"));
      start = parser.Start();
      System.out.println("Parsed Successfully.");
      MODE = 1;
      sf.getCurrentScope().setKidLevel(0);

      parser = new Decaf(new java.io.FileInputStream("src/stage2/Defaults.decaf"));
      start = parser.Start();
          MODE = 0;
      sf.getCurrentScope().setKidLevel(0);
      /**
      *Parser and Symbol Table Generator
      */
          parser = new Decaf(new java.io.FileInputStream(args[0]));
      start = parser.Start();
      System.out.println("Parsed Successfully.");
      MODE = 1;
          sf.getCurrentScope().setKidLevel(0);
      /**
      *Symbol Table Verification
      */
      parser = new Decaf(new java.io.FileInputStream(args[0]));
      start = parser.Start();
          sf.getCurrentScope().setKidLevel(0);
      /**
      *TypeChecking
      */
      SYMBOL_TABLE.enterScope(true, 1);
      visitor.visitStart_AST(start,sf.getCurrentScope());
      SYMBOL_TABLE.exitScope(1);
      sf.getCurrentScope().setKidLevel(0);
          /**
	  *Code Generation
	  */
      SYMBOL_TABLE.enterScope(true, 1);
      codeGen.visitStart(start, sf.getCurrentScope());
      SYMBOL_TABLE.exitScope(1);
      //start.dump(" -> ");
    }
    catch (Exception e)
    {
      System.out.println("ERROR : " + e.getMessage());
      throw e;
    }

  }

  final public String ID() throws ParseException {
  Token t;
    t = jj_consume_token(ID);
           {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public start_AST Start() throws ParseException {
 /*@bgen(jjtree) start_AST */
  start_AST jjtn000 = new start_AST(JJTSTART_AST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Unit classUnit = null;
  List<Unit> classUnitList = new ArrayList<Unit >();
    try {
   SYMBOL_TABLE.enterScope(true, MODE);
  if (MODE==0) {
          //SYMBOL_TABLE.add("String", UnitType.CLASS);
          //SYMBOL_TABLE.add("IO", UnitType.CLASS);
          //SYMBOL_TABLE.add("Object", UnitType.CLASS);
          }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        classUnit = Class();
                       classUnitList.add(classUnit);
      }
   SYMBOL_TABLE.exitScope(MODE);
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setClasses(classUnitList);
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Unit Class() throws ParseException {
  ClassUnit classUnit = null;
  ClassUnit superClassUnit = null;
  List<Unit> classFields = new ArrayList<Unit>();
  List<Unit> classFieldsCollection = new ArrayList<Unit>();
  String className = null;
  String superClassName = null;
    jj_consume_token(CLASS);
    className = ID();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      superClassName = ID();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
        if  (MODE == 0){
          /*classUnit = (ClassUnit)UnitFactory.generateUnit(UnitType.CLASS);
          classUnit.setName(className);*/
          classUnit = (ClassUnit) SYMBOL_TABLE.add(className, UnitType.CLASS);
        } else {
            IntegerMuted intBaseMuted = new IntegerMuted(-1);
                    classUnit = (ClassUnit) SYMBOL_TABLE.lookUp(className, UnitType.CLASS, intBaseMuted);
                    if (superClassName == null) {
                      superClassName = "Object";
                    }
                    IntegerMuted intMuted = new IntegerMuted(-1);
                superClassUnit = (ClassUnit)SYMBOL_TABLE.lookUp(superClassName, UnitType.CLASS, intMuted);
                if (superClassUnit == null){
                        {if (true) throw new ParseException("Super class " + superClassName + " has not been declared.");}
                }
                classUnit.setSuperClass(superClassUnit);
        }
    jj_consume_token(LCB);
     SYMBOL_TABLE.enterScopeForUnit(classUnit,MODE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case BOOLEAN:
      case CHAR:
      case VOID:
      case INT:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      classFields = Member(classUnit);
        /*
        for (Unit memberUnit: classFields) {
          for (Unit existingUnit : classFieldsCollection) {
            if (existingUnit.getName().equals(memberUnit.getName())) {
             throw new ParseException(memberUnit.getName() + " already declared in  " + className); 
            }
          }
        }*/
        classFieldsCollection.addAll(classFields);
    }
      if (MODE == 0) {
        classUnit.setMembersAndMethods(classFieldsCollection);
      }
    jj_consume_token(RCB);
      SYMBOL_TABLE.exitScope(MODE);
      {if (true) return classUnit;}
    throw new Error("Missing return statement in function");
  }

  final public List<Unit> Member(ClassUnit classUnit) throws ParseException {
  Unit member = null;
  List<Unit> memberList = null;
  List<Unit> allMembers = new ArrayList<Unit>();
    if (jj_2_1(10)) {
      memberList = Field(classUnit);
                                allMembers.addAll(memberList); {if (true) return allMembers;}
    } else if (jj_2_2(10)) {
      member = Method(classUnit);
                             allMembers.add(member); {if (true) return allMembers;}
    } else if (jj_2_3(10)) {
      member = Ctor(classUnit);
    MethodUnit cMember = (MethodUnit)member;
    cMember.setConstructor(true);
    allMembers.add(cMember); {if (true) return allMembers;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Unit> Field(ClassUnit classUnit) throws ParseException {
  FieldDetails fieldDetails = new FieldDetails();
  Modifier modifier = null;
  List<Unit> fieldList = null;
    modifier = Modifier();
                        fieldDetails.setModifier(modifier);
    fieldList = FieldDeclarations(fieldDetails);
    for(Unit fieldUnit: fieldList){
      VariableUnit vUnit = (VariableUnit) fieldUnit;
      vUnit.classUnit = classUnit;
      vUnit.setLocalVariable(true);
    }
    {if (true) return fieldList;}
    throw new Error("Missing return statement in function");
  }

  final public Modifier Modifier() throws ParseException {
  Modifier modifier = new Modifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
      if (jj_2_4(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
                         modifier.setScopePublic(true);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
                                                                   modifier.setScopePrivate(true);
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
                                                                                                                modifier.setScopeProtected(true);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(STATIC);
                                                                                                                                                             modifier.setScopeStatic(true);
      } else if (jj_2_5(2)) {
        jj_consume_token(STATIC);
                         modifier.setScopeStatic(true);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
                                                                   modifier.setScopePublic(true);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
                                                                                                             modifier.setScopePrivate(true);
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
                                                                                                                                                          modifier.setScopeProtected(true);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_6(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
                         modifier.setScopePublic(true);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
                                                                   modifier.setScopePrivate(true);
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
                                                                                                                modifier.setScopeProtected(true);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_7(2)) {
        jj_consume_token(STATIC);
                         modifier.setScopeStatic(true);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
   {if (true) return modifier;}
    throw new Error("Missing return statement in function");
  }

  final public List<Unit> FieldDeclarations(FieldDetails fieldDetails) throws ParseException {
  SimpleNode type = null;
  List<Unit> variables = null;
  boolean isArray = false;
  int arraySize = 0;
    type = Type();
    jjtree.popNode();
    fieldDetails.setType(type);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(LSB);
      jj_consume_token(RSB);
    type.typeObj.isArray = true;
    type.typeObj.arraySize += 1;
    fieldDetails.isArray = true;
    fieldDetails.arraySize += 1;
    }
    variables = Variables(fieldDetails);
    jj_consume_token(SCOLON);
                                              {if (true) return variables;}
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode Type() throws ParseException {
  Token t = null;
  ClassUnit varUnit = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      t = jj_consume_token(INT);
               int_AST jjtn001 = new int_AST(JJTINT_AST);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
      try {
               jjtree.closeNodeScope(jjtn001, true);
               jjtc001 = false;
    jjtn001.jjtSetValue("int");
    jjtn001.typeObj.name = "int";
    {if (true) return jjtn001;}
      } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
      }
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
                char_AST jjtn002 = new char_AST(JJTCHAR_AST);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
      try {
                jjtree.closeNodeScope(jjtn002, true);
                jjtc002 = false;
    jjtn002.jjtSetValue("char");
    jjtn002.typeObj.name = "char";
    {if (true) return jjtn002;}
      } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
      }
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
                   boolean_AST jjtn003 = new boolean_AST(JJTBOOLEAN_AST);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
      try {
                   jjtree.closeNodeScope(jjtn003, true);
                   jjtc003 = false;
    jjtn003.jjtSetValue("boolean");
    jjtn003.typeObj.name = "boolean";
    {if (true) return jjtn003;}
      } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
      }
      break;
    case ID:
      t = jj_consume_token(ID);
              id_AST jjtn004 = new id_AST(JJTID_AST);
              boolean jjtc004 = true;
              jjtree.openNodeScope(jjtn004);
      try {
              jjtree.closeNodeScope(jjtn004, true);
              jjtc004 = false;
    jjtn004.typeObj.name = t.image;
        jjtn004.typeObj.isClass = true;
    IntegerMuted currentScope = new IntegerMuted(-1);
    if (MODE == 1){
                varUnit = (ClassUnit) SYMBOL_TABLE.lookUp(t.image,UnitType.CLASS, currentScope);
                if (varUnit == null){
                  {if (true) throw new ParseException(t.image + " has not been declared yet");}
                }
                varUnit.setType(jjtn004);
                jjtn004.jjtSetValue(t.image);
                jjtn004.setUnit(varUnit);
    }
    //System.out.println(jjtThis.jjtGetValue());
    {if (true) return jjtn004;}
      } finally {
              if (jjtc004) {
                jjtree.closeNodeScope(jjtn004, true);
              }
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Unit> Variables(FieldDetails fieldDetails) throws ParseException {
  List<Unit> variables = new ArrayList<Unit>();
  Unit variable = null;
    variable = Variable(fieldDetails);
                                  variables.add(variable);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      variable = Variable(fieldDetails);
                                           variables.add(variable);
    }
                                                                       {if (true) return variables;}
    throw new Error("Missing return statement in function");
  }

  final public Unit Variable(FieldDetails fieldDetails) throws ParseException {
  VariableUnit variable;
  String variableName = null;
  binaryExpression_AST expr = null;
    variableName = ID();
    if (MODE == 0) {
            variable = (VariableUnit)SYMBOL_TABLE.add(variableName, UnitType.VARIABLE);
    } else {
        IntegerMuted intMuted = new IntegerMuted(-1);
        variable = (VariableUnit)SYMBOL_TABLE.lookUp(variableName, UnitType.VARIABLE, intMuted);
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      jj_consume_token(LSB);
      jj_consume_token(RSB);
              variable.setArray(true);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      expr = Expression();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    if (MODE == 1) {
            variable.setType(fieldDetails.getType());
            variable.setModifier(fieldDetails.getModifier());
            variable.setArray(fieldDetails.isArray);
            variable.setArraySize(fieldDetails.arraySize);
            variable.rhs = expr;
    }
    {if (true) return variable;}
    throw new Error("Missing return statement in function");
  }

  final public Unit Method(ClassUnit classUnit) throws ParseException {
  MethodUnit methodUnit = new MethodUnit();
  Modifier modifier = null;
  SimpleNode type = null;
  List<Unit> formalArgs = null;
  String methodName = null;
  SimpleNode block = null;
  String functionName = null;
  boolean isArray = false;
    modifier = Modifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
    case ID:
      type = Type();
      break;
    case VOID:
      jj_consume_token(VOID);
                               voidType_AST jjtn001 = new voidType_AST(JJTVOIDTYPE_AST);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
      try {
                               jjtree.closeNodeScope(jjtn001, true);
                               jjtc001 = false;
                              type = jjtn001;
      } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, true);
                               }
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      jj_consume_token(LSB);
      jj_consume_token(RSB);
    type.typeObj.isArray = true;
    type.typeObj.arraySize+=1;
    }
    functionName = ID();
    if (MODE == 0) {
            methodUnit = (MethodUnit)SYMBOL_TABLE.add(functionName,UnitType.METHOD);
   }
   methodUnit.setModifier(modifier);
   methodUnit.setName(functionName);
   methodUnit.setReturnType(type);
   methodUnit.classUnit = classUnit;
    jj_consume_token(LP);
    SYMBOL_TABLE.enterScopeForUnit(methodUnit, MODE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
    case ID:
      formalArgs = FormalArgs();
    if (MODE == 0){
        methodUnit.setFormalArgs(formalArgs);
    }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(RP);
    block = Block();
    SYMBOL_TABLE.exitScope(MODE);
    methodUnit.setMethodBlock((block_AST)block);
   {if (true) return methodUnit;}
    throw new Error("Missing return statement in function");
  }

  final public Unit Ctor(ClassUnit classUnit) throws ParseException {
  MethodUnit methodUnit = new MethodUnit();
  Modifier modifier = null;
  List<Unit> formalArgs = null;
  Token t = null;
  String functionName = null;
  SimpleNode type = null;
  block_AST block = null;
    modifier = Modifier();
    functionName = ID();
    id_AST jjtn001 = new id_AST(JJTID_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    type = jjtn001;
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
    jj_consume_token(LP);
    if (MODE == 0) {
       methodUnit = (MethodUnit)SYMBOL_TABLE.add(functionName,UnitType.METHOD);
       methodUnit.setName(functionName);
       methodUnit.setConstructor(true);
    } else {
      IntegerMuted intMuted = new IntegerMuted(-1);
      methodUnit = (MethodUnit)SYMBOL_TABLE.lookUp(functionName,UnitType.METHOD, intMuted);
    }
    type.typeObj.name = functionName;
    type.typeObj.isClass = true;
    methodUnit.setReturnType(type);
    methodUnit.classUnit = classUnit;
    methodUnit.setModifier(modifier);
    SYMBOL_TABLE.enterScopeForUnit(methodUnit,MODE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
    case ID:
      formalArgs = FormalArgs();
    if (MODE == 0) {
      methodUnit.setFormalArgs(formalArgs);
    }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(RP);
    block = Block();
    SYMBOL_TABLE.exitScope(MODE);
    methodUnit.setMethodBlock((block_AST)block);
   {if (true) return methodUnit;}
    throw new Error("Missing return statement in function");
  }

  final public List<Unit> FormalArgs() throws ParseException {
  Unit formalArg = null;
  List<Unit> formalArgs = new ArrayList<Unit>();
    formalArg = FormalArg();
                          formalArgs.add(formalArg);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      formalArg = FormalArg();
                                   formalArgs.add(formalArg);
    }
   {if (true) return formalArgs;}
    throw new Error("Missing return statement in function");
  }

  final public Unit FormalArg() throws ParseException {
  FieldDetails fieldDetails = new FieldDetails();
  Unit formalArg = null;
  SimpleNode type = null;
  boolean isArray = false;
  int arraySize = 0;
    type = Type();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      jj_consume_token(LSB);
      jj_consume_token(RSB);
    isArray = true;
    arraySize += arraySize;
    }
    fieldDetails.isArray = isArray;
    fieldDetails.arraySize = arraySize;
    type.typeObj.isArray = isArray;
    type.typeObj.arraySize = arraySize;
    fieldDetails.setType(type);
    formalArg = Variable(fieldDetails);
                                     {if (true) return formalArg;}
    throw new Error("Missing return statement in function");
  }

  final public block_AST Block() throws ParseException {
                              /*@bgen(jjtree) block_AST */
  block_AST jjtn000 = new block_AST(JJTBLOCK_AST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);List<SimpleNode> stmts = new ArrayList<SimpleNode>();
  SimpleNode stmt = null;
    try {
      jj_consume_token(LCB);
    SYMBOL_TABLE.enterScope(false, MODE);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case CONTINUE:
        case IF:
        case NEW:
        case RETURN:
        case SUPER:
        case THIS:
        case WHILE:
        case BOOLEAN:
        case CHAR:
        case INT:
        case INTEGER:
        case TRUE:
        case FALSE:
        case CHARLITERAL:
        case STRINGLITERAL:
        case NULL:
        case LP:
        case LCB:
        case SCOLON:
        case NOT:
        case PLUS:
        case MINUS:
        case ID:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_9;
        }
        stmt = Statement();
                      stmts.add(stmt);
      }
      jj_consume_token(RCB);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setStatements(stmts);
    SYMBOL_TABLE.exitScope(MODE);
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode Statement() throws ParseException {
  SimpleNode ifStat = null;
  SimpleNode elseStat = null;
  binaryExpression_AST expr = null;
  SimpleNode body = null;
  List<Unit> variables = null;
    if (jj_2_8(3)) {
                ifThenElseStat_AST jjtn001 = new ifThenElseStat_AST(JJTIFTHENELSESTAT_AST);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(IF);
        jj_consume_token(LP);
        expr = Expression();
        jj_consume_token(RP);
        ifStat = Statement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          elseStat = Statement();
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
                                                                                                                       jjtree.closeNodeScope(jjtn001, true);
                                                                                                                       jjtc001 = false;
    jjtn001.ifStat = ifStat;
    jjtn001.elseStat = elseStat;
    jjtn001.condition = expr;
    {if (true) return jjtn001;}
      } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
     whileStat_AST jjtn002 = new whileStat_AST(JJTWHILESTAT_AST);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(WHILE);
          jj_consume_token(LP);
          expr = Expression();
          jj_consume_token(RP);
          body = Statement();
                                                               jjtree.closeNodeScope(jjtn002, true);
                                                               jjtc002 = false;
     jjtn002.condition = expr;
     jjtn002.body = body;
     {if (true) return jjtn002;}
        } catch (Throwable jjte002) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte002 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte002;}
     }
     if (jjte002 instanceof ParseException) {
       {if (true) throw (ParseException)jjte002;}
     }
     {if (true) throw (Error)jjte002;}
        } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
        }
        break;
      case RETURN:
     returnStat_AST jjtn003 = new returnStat_AST(JJTRETURNSTAT_AST);
     boolean jjtc003 = true;
     jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(RETURN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
          case SUPER:
          case THIS:
          case INTEGER:
          case TRUE:
          case FALSE:
          case CHARLITERAL:
          case STRINGLITERAL:
          case NULL:
          case LP:
          case NOT:
          case PLUS:
          case MINUS:
          case ID:
            expr = Expression();
            break;
          default:
            jj_la1[20] = jj_gen;
            ;
          }
          jj_consume_token(SCOLON);
                                               jjtree.closeNodeScope(jjtn003, true);
                                               jjtc003 = false;
    jjtn003.expr = expr;
    {if (true) return jjtn003;}
        } catch (Throwable jjte003) {
     if (jjtc003) {
       jjtree.clearNodeScope(jjtn003);
       jjtc003 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte003 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte003;}
     }
     if (jjte003 instanceof ParseException) {
       {if (true) throw (ParseException)jjte003;}
     }
     {if (true) throw (Error)jjte003;}
        } finally {
     if (jjtc003) {
       jjtree.closeNodeScope(jjtn003, true);
     }
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        if (jj_2_9(3)) {
                 expressionStat_AST jjtn004 = new expressionStat_AST(JJTEXPRESSIONSTAT_AST);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
          try {
            body = StatementExpression();
            jj_consume_token(SCOLON);
                                                         jjtree.closeNodeScope(jjtn004, true);
                                                         jjtc004 = false;
    jjtn004.expressionStat = body;
    {if (true) return jjtn004;}
          } catch (Throwable jjte004) {
                 if (jjtc004) {
                   jjtree.clearNodeScope(jjtn004);
                   jjtc004 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte004 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte004;}
                 }
                 if (jjte004 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte004;}
                 }
                 {if (true) throw (Error)jjte004;}
          } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004, true);
                 }
          }
        } else if (jj_2_10(3)) {
                 varDeclStat_AST jjtn005 = new varDeclStat_AST(JJTVARDECLSTAT_AST);
                 boolean jjtc005 = true;
                 jjtree.openNodeScope(jjtn005);
          try {
            variables = FieldDeclarations(new FieldDetails());
                                                                     jjtree.closeNodeScope(jjtn005, true);
                                                                     jjtc005 = false;
    if (MODE == 0)
    {
        SYMBOL_TABLE.addVariablesToMethod(variables);
    }
    jjtn005.variables = variables;
    {if (true) return jjtn005;}
          } catch (Throwable jjte005) {
                 if (jjtc005) {
                   jjtree.clearNodeScope(jjtn005);
                   jjtc005 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte005 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte005;}
                 }
                 if (jjte005 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte005;}
                 }
                 {if (true) throw (Error)jjte005;}
          } finally {
                 if (jjtc005) {
                   jjtree.closeNodeScope(jjtn005, true);
                 }
          }
        } else if (jj_2_11(3)) {
                 block_AST jjtn006 = new block_AST(JJTBLOCK_AST);
                 boolean jjtc006 = true;
                 jjtree.openNodeScope(jjtn006);
          try {
            Block();
                          jjtree.closeNodeScope(jjtn006, true);
                          jjtc006 = false;
                         {if (true) return jjtn006;}
          } catch (Throwable jjte006) {
                 if (jjtc006) {
                   jjtree.clearNodeScope(jjtn006);
                   jjtc006 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte006 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte006;}
                 }
                 if (jjte006 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte006;}
                 }
                 {if (true) throw (Error)jjte006;}
          } finally {
                 if (jjtc006) {
                   jjtree.closeNodeScope(jjtn006, true);
                 }
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BREAK:
     breakStat_AST jjtn007 = new breakStat_AST(JJTBREAKSTAT_AST);
     boolean jjtc007 = true;
     jjtree.openNodeScope(jjtn007);
            try {
              jj_consume_token(BREAK);
              jj_consume_token(SCOLON);
                       jjtree.closeNodeScope(jjtn007, true);
                       jjtc007 = false;
                      {if (true) return jjtn007;}
            } finally {
     if (jjtc007) {
       jjtree.closeNodeScope(jjtn007, true);
     }
            }
            break;
          case CONTINUE:
     continueStat_AST jjtn008 = new continueStat_AST(JJTCONTINUESTAT_AST);
     boolean jjtc008 = true;
     jjtree.openNodeScope(jjtn008);
            try {
              jj_consume_token(CONTINUE);
              jj_consume_token(SCOLON);
                          jjtree.closeNodeScope(jjtn008, true);
                          jjtc008 = false;
                         {if (true) return jjtn008;}
            } finally {
     if (jjtc008) {
       jjtree.closeNodeScope(jjtn008, true);
     }
            }
            break;
          case SCOLON:
     emptyStat_AST jjtn009 = new emptyStat_AST(JJTEMPTYSTAT_AST);
     boolean jjtc009 = true;
     jjtree.openNodeScope(jjtn009);
            try {
              jj_consume_token(SCOLON);
               jjtree.closeNodeScope(jjtn009, true);
               jjtc009 = false;
              {if (true) return jjtn009;}
            } finally {
     if (jjtc009) {
       jjtree.closeNodeScope(jjtn009, true);
     }
            }
            break;
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode Literal() throws ParseException {
    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      jj_consume_token(NULL);
    nullExpr_AST jjtn001 = new nullExpr_AST(JJTNULLEXPR_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.typeObj.name="null";
    {if (true) return jjtn001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case TRUE:
      jj_consume_token(TRUE);
    boolExpr_AST jjtn002 = new boolExpr_AST(JJTBOOLEXPR_AST);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
    jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;
    jjtn002.typeObj.name="boolean";
    jjtn002.value = true;
    {if (true) return jjtn002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
    case FALSE:
      jj_consume_token(FALSE);
    boolExpr_AST jjtn003 = new boolExpr_AST(JJTBOOLEXPR_AST);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
    jjtree.closeNodeScope(jjtn003, true);
    jjtc003 = false;
    jjtn003.typeObj.name="boolean";
    jjtn003.value = false;
    {if (true) return jjtn003;}
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
                  intExpr_AST jjtn004 = new intExpr_AST(JJTINTEXPR_AST);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
      try {
                  jjtree.closeNodeScope(jjtn004, true);
                  jjtc004 = false;
    jjtn004.typeObj.name="int";
    jjtn004.value = Integer.parseInt(t.image);
    {if (true) return jjtn004;}
      } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004, true);
                  }
      }
      break;
    case CHARLITERAL:
      t = jj_consume_token(CHARLITERAL);
                      charExpr_AST jjtn005 = new charExpr_AST(JJTCHAREXPR_AST);
                      boolean jjtc005 = true;
                      jjtree.openNodeScope(jjtn005);
      try {
                      jjtree.closeNodeScope(jjtn005, true);
                      jjtc005 = false;
    jjtn005.typeObj.name="char";
    jjtn005.value = t.image.charAt(0);
    {if (true) return jjtn005;}
      } finally {
                      if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005, true);
                      }
      }
      break;
    case STRINGLITERAL:
      t = jj_consume_token(STRINGLITERAL);
                        stringExpr_AST jjtn006 = new stringExpr_AST(JJTSTRINGEXPR_AST);
                        boolean jjtc006 = true;
                        jjtree.openNodeScope(jjtn006);
      try {
                        jjtree.closeNodeScope(jjtn006, true);
                        jjtc006 = false;
    jjtn006.typeObj.name="String";
    jjtn006.typeObj.isClass=true;
    jjtn006.value = t.image;
    {if (true) return jjtn006;}
      } finally {
                        if (jjtc006) {
                          jjtree.closeNodeScope(jjtn006, true);
                        }
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode StatementExpression() throws ParseException {
    SimpleNode statExpr = null;
    if (jj_2_12(10)) {
      statExpr = MethodCall();
    } else if (jj_2_13(10)) {
      statExpr = Assignment();
    } else if (jj_2_14(10)) {
      statExpr = Expression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return statExpr;}
    throw new Error("Missing return statement in function");
  }

  final public assignOperator_AST Assignment() throws ParseException {
        fieldAccess_AST lhs = null;
        binaryExpression_AST rhs = null;
    assignOperator_AST jjtn001 = new assignOperator_AST(JJTASSIGNOPERATOR_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      lhs = FieldAccess();
      jj_consume_token(ASSIGN);
      rhs = Expression();
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.lhs = lhs;
    jjtn001.rhs = rhs;
    {if (true) return jjtn001;}
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public fieldAccess_AST FieldAccess() throws ParseException {
        fieldAccess1_AST fAccess1 =null;
        methodPrime_AST mPrime =null;
    fAccess1 = FieldAccess_1();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      mPrime = MethodPrime();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    fieldAccess_AST jjtn001 = new fieldAccess_AST(JJTFIELDACCESS_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.fAccess1 = fAccess1;
    jjtn001.mPrime = mPrime;
    {if (true) return jjtn001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public fieldAccess1_AST FieldAccess_1() throws ParseException {
  SimpleNode primaryFieldAccess = null;
  Token id =null;
  binaryExpression_AST index = null;
  List<binaryExpression_AST> arrayIndices = null;
    if (jj_2_15(6)) {
      primaryFieldAccess = PrimaryFieldAccess();
      jj_consume_token(DOT);
                                                     fieldExpr_AST jjtn001 = new fieldExpr_AST(JJTFIELDEXPR_AST);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
      try {
        id = jj_consume_token(ID);
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                     }
      }
                                                                                arrayExpr_AST jjtn002 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                                                                boolean jjtc002 = true;
                                                                                jjtree.openNodeScope(jjtn002);
      try {
        label_10:
        while (true) {
          jj_consume_token(LSB);
          index = Expression();
          jj_consume_token(RSB);
        if (arrayIndices == null) {
          arrayIndices = new ArrayList<binaryExpression_AST>();
        }
        arrayIndices.add(index);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LSB:
            ;
            break;
          default:
            jj_la1[25] = jj_gen;
            break label_10;
          }
        }
      } catch (Throwable jjte002) {
                                                                                if (jjtc002) {
                                                                                  jjtree.clearNodeScope(jjtn002);
                                                                                  jjtc002 = false;
                                                                                } else {
                                                                                  jjtree.popNode();
                                                                                }
                                                                                if (jjte002 instanceof RuntimeException) {
                                                                                  {if (true) throw (RuntimeException)jjte002;}
                                                                                }
                                                                                if (jjte002 instanceof ParseException) {
                                                                                  {if (true) throw (ParseException)jjte002;}
                                                                                }
                                                                                {if (true) throw (Error)jjte002;}
      } finally {
                                                                                if (jjtc002) {
                                                                                  jjtree.closeNodeScope(jjtn002, true);
                                                                                }
      }
    } else if (jj_2_16(6)) {
      primaryFieldAccess = PrimaryFieldAccess();
      jj_consume_token(DOT);
                                                    fieldExpr_AST jjtn003 = new fieldExpr_AST(JJTFIELDEXPR_AST);
                                                    boolean jjtc003 = true;
                                                    jjtree.openNodeScope(jjtn003);
      try {
        id = jj_consume_token(ID);
      } finally {
                                                    if (jjtc003) {
                                                      jjtree.closeNodeScope(jjtn003, true);
                                                    }
      }
    } else if (jj_2_17(6)) {
     idExpr_AST jjtn004 = new idExpr_AST(JJTIDEXPR_AST);
     boolean jjtc004 = true;
     jjtree.openNodeScope(jjtn004);
      try {
        id = jj_consume_token(ID);
      } finally {
     if (jjtc004) {
       jjtree.closeNodeScope(jjtn004, true);
     }
      }
                             arrayExpr_AST jjtn005 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                             boolean jjtc005 = true;
                             jjtree.openNodeScope(jjtn005);
      try {
        label_11:
        while (true) {
          jj_consume_token(LSB);
          index = Expression();
          jj_consume_token(RSB);
    if (arrayIndices == null) {
          arrayIndices = new ArrayList<binaryExpression_AST>();
        }
        arrayIndices.add(index);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LSB:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_11;
          }
        }
      } catch (Throwable jjte005) {
                             if (jjtc005) {
                               jjtree.clearNodeScope(jjtn005);
                               jjtc005 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte005 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte005;}
                             }
                             if (jjte005 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte005;}
                             }
                             {if (true) throw (Error)jjte005;}
      } finally {
                             if (jjtc005) {
                               jjtree.closeNodeScope(jjtn005, true);
                             }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      idExpr_AST jjtn006 = new idExpr_AST(JJTIDEXPR_AST);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
        try {
          id = jj_consume_token(ID);
        } finally {
      if (jjtc006) {
        jjtree.closeNodeScope(jjtn006, true);
      }
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    fieldAccess1_AST jjtn007 = new fieldAccess1_AST(JJTFIELDACCESS1_AST);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
    try {
    jjtree.closeNodeScope(jjtn007, true);
    jjtc007 = false;
    jjtn007.name = id.image;
    jjtn007.arrayIndices = arrayIndices;
    jjtn007.primaryFieldAccess = primaryFieldAccess;
    {if (true) return jjtn007;}
    } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode PrimaryFieldAccess() throws ParseException {
  SimpleNode primaryFieldAccess = null;
  Token id = null;
  List< binaryExpression_AST> args = null;
    if (jj_2_18(3)) {
      primaryFieldAccess = Literal();
    } else if (jj_2_19(3)) {
      jj_consume_token(THIS);
    thisExpr_AST jjtn001 = new thisExpr_AST(JJTTHISEXPR_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    primaryFieldAccess = jjtn001;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } else if (jj_2_20(3)) {
      jj_consume_token(SUPER);
    superExpr_AST jjtn002 = new superExpr_AST(JJTSUPEREXPR_AST);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
    jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;
    primaryFieldAccess = jjtn002;
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
    } else if (jj_2_21(3)) {
      jj_consume_token(LP);
      primaryFieldAccess = Expression();
      jj_consume_token(RP);
    } else if (jj_2_22(3)) {
      jj_consume_token(NEW);
      jj_consume_token(ID);
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        ActualArguments();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      jj_consume_token(RP);
    newClassExpr_AST jjtn003 = new newClassExpr_AST(JJTNEWCLASSEXPR_AST);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
    jjtree.closeNodeScope(jjtn003, true);
    jjtc003 = false;
    jjtn003.name = id.image;
        IntegerMuted intBaseMuted = new IntegerMuted(-1);
        ClassUnit classUnit = (ClassUnit) SYMBOL_TABLE.lookUp(id.image, UnitType.CLASS, intBaseMuted);
        jjtn003.arguments =  args;
        if (classUnit == null) {
        {if (true) throw new ParseException("Class " + id.image + " has not been declared.");}
        }
        jjtn003.classUnit = classUnit;
        primaryFieldAccess = jjtn003;
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return primaryFieldAccess;}
    throw new Error("Missing return statement in function");
  }

  final public methodCall_AST MethodCall() throws ParseException {
        methodCall1_AST m1 = null;
        methodCall2_AST m2 = null;
    m1 = MethodCall_1();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      m2 = MethodCall_2();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    methodCall_AST jjtn001 = new methodCall_AST(JJTMETHODCALL_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.m1 = m1;
    jjtn001.m2 = m2;
    {if (true) return jjtn001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public methodCall1_AST MethodCall_1() throws ParseException {
  methodParent_AST mParent = null;
  methodPrime_AST mPrime = null;
  List<binaryExpression_AST> actualArgs = null;
    mParent = MethodParent();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      mPrime = MethodPrime();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case SUPER:
    case THIS:
    case INTEGER:
    case TRUE:
    case FALSE:
    case CHARLITERAL:
    case STRINGLITERAL:
    case NULL:
    case LP:
    case NOT:
    case PLUS:
    case MINUS:
    case ID:
      actualArgs = ActualArguments();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(RP);
    methodCall1_AST jjtn001 = new methodCall1_AST(JJTMETHODCALL1_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.mParent = mParent;
    jjtn001.mPrime = mPrime;
    jjtn001.actualArgs = actualArgs;
    {if (true) return jjtn001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public methodCall2_AST MethodCall_2() throws ParseException {
        Token id = null;
        List<binaryExpression_AST> actualArgs = null;
        methodCall2_AST m2 = null;
        binaryExpression_AST arrayIndex = null;
        methodPrime_AST mPrime = null;
    if (jj_2_23(5)) {
      jj_consume_token(DOT);
      id = jj_consume_token(ID);
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        actualArgs = ActualArguments();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
                                                                        methodExpr_AST jjtn001 = new methodExpr_AST(JJTMETHODEXPR_AST);
                                                                        boolean jjtc001 = true;
                                                                        jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RP);
      } finally {
                                                                        if (jjtc001) {
                                                                          jjtree.closeNodeScope(jjtn001, true);
                                                                        }
      }
      m2 = MethodCall_2();
    } else if (jj_2_24(5)) {
      jj_consume_token(DOT);
      id = jj_consume_token(ID);
      jj_consume_token(LSB);
      arrayIndex = Expression();
      jj_consume_token(RSB);
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        actualArgs = ActualArguments();
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      jj_consume_token(RP);
      m2 = MethodCall_2();
    } else if (jj_2_25(5)) {
      jj_consume_token(DOT);
      id = jj_consume_token(ID);
      mPrime = MethodPrime();
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        actualArgs = ActualArguments();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(RP);
      m2 = MethodCall_2();
    } else if (jj_2_26(5)) {
      jj_consume_token(DOT);
      id = jj_consume_token(ID);
      jj_consume_token(LSB);
      arrayIndex = Expression();
      jj_consume_token(RSB);
      mPrime = MethodPrime();
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        actualArgs = ActualArguments();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jj_consume_token(RP);
      m2 = MethodCall_2();
    } else if (jj_2_27(5)) {
      jj_consume_token(DOT);
      id = jj_consume_token(ID);
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        actualArgs = ActualArguments();
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(RP);
    } else if (jj_2_28(5)) {
      jj_consume_token(DOT);
      id = jj_consume_token(ID);
      jj_consume_token(LSB);
      arrayIndex = Expression();
      jj_consume_token(RSB);
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        actualArgs = ActualArguments();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      jj_consume_token(RP);
    } else if (jj_2_29(5)) {
      jj_consume_token(DOT);
      id = jj_consume_token(ID);
      mPrime = MethodPrime();
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        actualArgs = ActualArguments();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(RP);
    } else if (jj_2_30(5)) {
      jj_consume_token(DOT);
      id = jj_consume_token(ID);
      jj_consume_token(LSB);
      arrayIndex = Expression();
      jj_consume_token(RSB);
      mPrime = MethodPrime();
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        actualArgs = ActualArguments();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      jj_consume_token(RP);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
      methodCall2_AST jjtn002 = new methodCall2_AST(JJTMETHODCALL2_AST);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    try {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      jjtn002.name = id.image;
      jjtn002.actualArgs = actualArgs;
      jjtn002.m2 = m2;
      jjtn002.arrayIndex = arrayIndex;
      jjtn002.mPrime = mPrime;
      {if (true) return jjtn002;}
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public methodParent_AST MethodParent() throws ParseException {
        SimpleNode primaryMethodParent = null;
        Token id = null;
        binaryExpression_AST arrayIndex = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case SUPER:
    case THIS:
    case INTEGER:
    case TRUE:
    case FALSE:
    case CHARLITERAL:
    case STRINGLITERAL:
    case NULL:
    case LP:
      primaryMethodParent = PrimaryMethodParent();
      jj_consume_token(DOT);
                                                        fieldExpr_AST jjtn001 = new fieldExpr_AST(JJTFIELDEXPR_AST);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
      try {
        id = jj_consume_token(ID);
      } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
        jj_consume_token(LSB);
        arrayIndex = Expression();
                                                                                                                    arrayExpr_AST jjtn002 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                                                                                                    boolean jjtc002 = true;
                                                                                                                    jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(RSB);
        } finally {
                                                                                                                    if (jjtc002) {
                                                                                                                      jjtree.closeNodeScope(jjtn002, true);
                                                                                                                    }
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      break;
    case ID:
       idExpr_AST jjtn003 = new idExpr_AST(JJTIDEXPR_AST);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
      try {
        id = jj_consume_token(ID);
      } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
       }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
        jj_consume_token(LSB);
        arrayIndex = Expression();
                                                               arrayExpr_AST jjtn004 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                                               boolean jjtc004 = true;
                                                               jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(RSB);
        } finally {
                                                               if (jjtc004) {
                                                                 jjtree.closeNodeScope(jjtn004, true);
                                                               }
        }
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          methodParent_AST jjtn005 = new methodParent_AST(JJTMETHODPARENT_AST);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
    try {
          jjtree.closeNodeScope(jjtn005, true);
          jjtc005 = false;
          jjtn005.primaryMethodParent = primaryMethodParent;
          jjtn005.name = id.image;
          jjtn005.arrayIndex = arrayIndex;
          {if (true) return jjtn005;}
    } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode PrimaryMethodParent() throws ParseException {
        SimpleNode primaryMethodParent = null;
        Token id = null;
        List< binaryExpression_AST> args = null;
    if (jj_2_31(3)) {
      primaryMethodParent = Literal();
    } else if (jj_2_32(3)) {
      jj_consume_token(THIS);
      thisExpr_AST jjtn001 = new thisExpr_AST(JJTTHISEXPR_AST);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      primaryMethodParent = jjtn001;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } else if (jj_2_33(3)) {
      jj_consume_token(SUPER);
      superExpr_AST jjtn002 = new superExpr_AST(JJTSUPEREXPR_AST);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      primaryMethodParent = jjtn002;
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
    } else if (jj_2_34(3)) {
      jj_consume_token(LP);
      primaryMethodParent = Expression();
      jj_consume_token(RP);
    } else if (jj_2_35(3)) {
      newClassExpr_AST jjtn003 = new newClassExpr_AST(JJTNEWCLASSEXPR_AST);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(NEW);
        id = jj_consume_token(ID);
        jj_consume_token(LP);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case SUPER:
        case THIS:
        case INTEGER:
        case TRUE:
        case FALSE:
        case CHARLITERAL:
        case STRINGLITERAL:
        case NULL:
        case LP:
        case NOT:
        case PLUS:
        case MINUS:
        case ID:
          args = ActualArguments();
          break;
        default:
          jj_la1[43] = jj_gen;
          ;
        }
        jj_consume_token(RP);
      jjtree.closeNodeScope(jjtn003, true);
      jjtc003 = false;
      jjtn003.name = id.image;
      IntegerMuted intBaseMuted = new IntegerMuted(-1);
      ClassUnit classUnit = (ClassUnit) SYMBOL_TABLE.lookUp(id.image, UnitType.CLASS, intBaseMuted);
      jjtn003.arguments =  args;
      if (classUnit == null) {
        {if (true) throw new ParseException("Class " + id.image + " has not been declared.");}
      }
      jjtn003.classUnit = classUnit;
      primaryMethodParent = jjtn003;
      } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte003;}
      }
      if (jjte003 instanceof ParseException) {
        {if (true) throw (ParseException)jjte003;}
      }
      {if (true) throw (Error)jjte003;}
      } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return primaryMethodParent;}
    throw new Error("Missing return statement in function");
  }

  final public methodPrime_AST MethodPrime() throws ParseException {
        methodPrime_AST mPrime = null;
        Token id = null;
        binaryExpression_AST arrayIndex = null;
    if (jj_2_36(3)) {
      jj_consume_token(DOT);
            fieldExpr_AST jjtn001 = new fieldExpr_AST(JJTFIELDEXPR_AST);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        id = jj_consume_token(ID);
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
      mPrime = MethodPrime();
    } else if (jj_2_37(3)) {
      jj_consume_token(DOT);
            fieldExpr_AST jjtn002 = new fieldExpr_AST(JJTFIELDEXPR_AST);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
        id = jj_consume_token(ID);
      } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
      }
      jj_consume_token(LSB);
      arrayIndex = Expression();
                                                                     arrayExpr_AST jjtn003 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                                                     boolean jjtc003 = true;
                                                                     jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(RSB);
      } finally {
                                                                     if (jjtc003) {
                                                                       jjtree.closeNodeScope(jjtn003, true);
                                                                     }
      }
      mPrime = MethodPrime();
    } else if (jj_2_38(3)) {
      jj_consume_token(DOT);
                         fieldExpr_AST jjtn004 = new fieldExpr_AST(JJTFIELDEXPR_AST);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
      try {
        id = jj_consume_token(ID);
      } finally {
                         if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004, true);
                         }
      }
      jj_consume_token(LSB);
      arrayIndex = Expression();
                                                                                  arrayExpr_AST jjtn005 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                                                                  boolean jjtc005 = true;
                                                                                  jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(RSB);
      } finally {
                                                                                  if (jjtc005) {
                                                                                    jjtree.closeNodeScope(jjtn005, true);
                                                                                  }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
            fieldExpr_AST jjtn006 = new fieldExpr_AST(JJTFIELDEXPR_AST);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
        try {
          id = jj_consume_token(ID);
        } finally {
            if (jjtc006) {
              jjtree.closeNodeScope(jjtn006, true);
            }
        }
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    methodPrime_AST jjtn007 = new methodPrime_AST(JJTMETHODPRIME_AST);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
    try {
    jjtree.closeNodeScope(jjtn007, true);
    jjtc007 = false;
    jjtn007.name = id.image;
    jjtn007.mPrime = mPrime;
    jjtn007.arrayIndex = arrayIndex;
    {if (true) return jjtn007;}
    } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public List<binaryExpression_AST> ActualArguments() throws ParseException {
    List<binaryExpression_AST> expressions = new ArrayList<binaryExpression_AST>();
    binaryExpression_AST expression = null;
    expression = Expression();
    expressions.add(expression);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      expression = Expression();
    expressions.add(expression);
    }
    {if (true) return expressions;}
    throw new Error("Missing return statement in function");
  }

// Same as OR operation since it has lowest precedence
  final public binaryExpression_AST Expression() throws ParseException {
    andOperator_AST lhs = null;
    binaryExpression_AST rhs = null;
    binaryExpression_AST jjtn001 = new binaryExpression_AST(JJTBINARYEXPRESSION_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      lhs = AndExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        rhs = Expression();
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.lhs = lhs;
    jjtn001.rhs = rhs;
    {if (true) return jjtn001;}
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public andOperator_AST AndExpression() throws ParseException {
  equality_AST equalityExpr =null;
  andOperator_AST andExpr = null;
    andOperator_AST jjtn001 = new andOperator_AST(JJTANDOPERATOR_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      equalityExpr = EqualityExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        andExpr = AndExpression();
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.lhs = equalityExpr;
    jjtn001.rhs = andExpr;
    {if (true) return jjtn001;}
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public equality_AST EqualityExpression() throws ParseException {
        relational_AST lhs = null;
        equality_AST rhs = null;
        Token sign = null;
    equality_AST jjtn001 = new equality_AST(JJTEQUALITY_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      lhs = RelationalExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case NOTEQUAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          sign = jj_consume_token(EQUAL);
          rhs = EqualityExpression();
          break;
        case NOTEQUAL:
          sign = jj_consume_token(NOTEQUAL);
          rhs = EqualityExpression();
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.lhs = lhs;
    jjtn001.rhs = rhs;
    jjtn001.sign = sign;
    {if (true) return jjtn001;}
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public relational_AST RelationalExpression() throws ParseException {
  relational_AST rhs = null;
  Token sign = null;
  sum_AST lhs = null;
    relational_AST jjtn001 = new relational_AST(JJTRELATIONAL_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      lhs = SumExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATER:
      case LESSER:
      case GREATEREQ:
      case LESSEREQ:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GREATER:
          sign = jj_consume_token(GREATER);
          rhs = RelationalExpression();
          break;
        case GREATEREQ:
          sign = jj_consume_token(GREATEREQ);
          rhs = RelationalExpression();
          break;
        case LESSER:
          sign = jj_consume_token(LESSER);
          rhs = RelationalExpression();
          break;
        case LESSEREQ:
          sign = jj_consume_token(LESSEREQ);
          rhs = RelationalExpression();
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.lhs = lhs;
    jjtn001.rhs = rhs;
    jjtn001.sign = sign;
    {if (true) return jjtn001;}
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public sum_AST SumExpression() throws ParseException {
  factor_AST lhs = null;
  Token sign = null;
  sum_AST rhs = null;
    sum_AST jjtn001 = new sum_AST(JJTSUM_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      lhs = FactorExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          sign = jj_consume_token(PLUS);
          rhs = SumExpression();
          break;
        case MINUS:
          sign = jj_consume_token(MINUS);
          rhs = SumExpression();
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    jjtc001 = false;
    jjtn001.lhs = lhs;
    jjtn001.rhs = rhs;
    jjtn001.sign = sign;
    {if (true) return jjtn001;}
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public factor_AST FactorExpression() throws ParseException {
  unary_AST lhs = null;
  Token sign = null;
  factor_AST rhs = null;
    factor_AST jjtn001 = new factor_AST(JJTFACTOR_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      lhs = UnaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case MODULO:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          sign = jj_consume_token(MULTIPLY);
          rhs = FactorExpression();
          break;
        case DIVIDE:
          sign = jj_consume_token(DIVIDE);
          rhs = FactorExpression();
          break;
        case MODULO:
          sign = jj_consume_token(MODULO);
          rhs = FactorExpression();
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    jjtc001 = false;
    jjtn001.lhs = lhs;
    jjtn001.rhs = rhs;
    jjtn001.sign = sign;
    {if (true) return jjtn001;}
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public unary_AST UnaryExpression() throws ParseException {
        binaryExpression_AST expression = null;
        Token sign = null;
        SimpleNode primary = null;
    unary_AST jjtn001 = new unary_AST(JJTUNARY_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          token = jj_consume_token(PLUS);
          break;
        case MINUS:
          token = jj_consume_token(MINUS);
          break;
        case NOT:
          token = jj_consume_token(NOT);
          break;
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expression = Expression();
    jjtn001.sign = token;
    jjtn001.expr = expression;
        break;
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case ID:
        primary = Primary();
    jjtn001.primary = primary;
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    {if (true) return jjtn001;}
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode Primary() throws ParseException {
        primaryExisting_AST primaryExist = null;
        newArray_AST newArray = null;
    if (jj_2_39(5)) {
      primaryExist = PrimaryExisting();
    {if (true) return primaryExist;}
    } else if (jj_2_40(5)) {
      newArray = NewArray();
      {if (true) return newArray;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public primaryExisting_AST PrimaryExisting() throws ParseException {
    SimpleNode p1 = null;
    primaryExisiting2_AST p2 = null;
    primaryExisting_AST jjtn001 = new primaryExisting_AST(JJTPRIMARYEXISTING_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      p1 = PrimaryExisting_1();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        p2 = PrimaryExisting_2();
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.p1 = p1;
    jjtn001.p2 = p2;
    {if (true) return jjtn001;}
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode PrimaryExisting_1() throws ParseException {
  Token t = null;
  List<binaryExpression_AST> arguments = null;
  List<binaryExpression_AST> arrayIndices = new ArrayList<binaryExpression_AST>();
  binaryExpression_AST arrayExpr = null;
  int size = 0;
  SimpleNode literal = null;
    if (jj_2_41(3)) {
      literal = Literal();
      literal_AST jjtn001 = new literal_AST(JJTLITERAL_AST);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      {if (true) return literal;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } else if (jj_2_42(3)) {
      jj_consume_token(THIS);
      thisExpr_AST jjtn002 = new thisExpr_AST(JJTTHISEXPR_AST);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      {if (true) return jjtn002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
    } else if (jj_2_43(3)) {
      jj_consume_token(SUPER);
              superExpr_AST jjtn003 = new superExpr_AST(JJTSUPEREXPR_AST);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
      try {
              jjtree.closeNodeScope(jjtn003, true);
              jjtc003 = false;
      {if (true) return jjtn003;}
      } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003, true);
              }
      }
    } else if (jj_2_44(3)) {
      jj_consume_token(LP);
      Expression();
      jj_consume_token(RP);
                             binaryExpression_AST jjtn004 = new binaryExpression_AST(JJTBINARYEXPRESSION_AST);
                             boolean jjtc004 = true;
                             jjtree.openNodeScope(jjtn004);
      try {
                             jjtree.closeNodeScope(jjtn004, true);
                             jjtc004 = false;
      {if (true) return jjtn004;}
      } finally {
                             if (jjtc004) {
                               jjtree.closeNodeScope(jjtn004, true);
                             }
      }
    } else if (jj_2_45(3)) {
      newClassExpr_AST jjtn005 = new newClassExpr_AST(JJTNEWCLASSEXPR_AST);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(NEW);
        t = jj_consume_token(ID);
        jj_consume_token(LP);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case SUPER:
        case THIS:
        case INTEGER:
        case TRUE:
        case FALSE:
        case CHARLITERAL:
        case STRINGLITERAL:
        case NULL:
        case LP:
        case NOT:
        case PLUS:
        case MINUS:
        case ID:
          arguments = ActualArguments();
          break;
        default:
          jj_la1[59] = jj_gen;
          ;
        }
        jj_consume_token(RP);
      jjtree.closeNodeScope(jjtn005, true);
      jjtc005 = false;
      jjtn005.name = t.image;
      IntegerMuted intBaseMuted = new IntegerMuted(-1);
      ClassUnit classUnit = (ClassUnit) SYMBOL_TABLE.lookUp(t.image, UnitType.CLASS, intBaseMuted);
      jjtn005.arguments =  arguments;
      if (classUnit == null) {
        {if (true) throw new ParseException("Class " + t.image + " has not been declared.");}
      }
      jjtn005.classUnit = classUnit;
      {if (true) return jjtn005;}
      } catch (Throwable jjte005) {
      if (jjtc005) {
        jjtree.clearNodeScope(jjtn005);
        jjtc005 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte005 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte005;}
      }
      if (jjte005 instanceof ParseException) {
        {if (true) throw (ParseException)jjte005;}
      }
      {if (true) throw (Error)jjte005;}
      } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005, true);
      }
      }
    } else if (jj_2_46(3)) {
      methodExpr_AST jjtn006 = new methodExpr_AST(JJTMETHODEXPR_AST);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
      try {
        t = jj_consume_token(ID);
        jj_consume_token(LP);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case SUPER:
        case THIS:
        case INTEGER:
        case TRUE:
        case FALSE:
        case CHARLITERAL:
        case STRINGLITERAL:
        case NULL:
        case LP:
        case NOT:
        case PLUS:
        case MINUS:
        case ID:
          arguments = ActualArguments();
          break;
        default:
          jj_la1[60] = jj_gen;
          ;
        }
        jj_consume_token(RP);
      jjtree.closeNodeScope(jjtn006, true);
      jjtc006 = false;
      jjtn006.name = t.image;
      IntegerMuted intBaseMuted = new IntegerMuted(-1);
      MethodUnit methodUnit = (MethodUnit) SYMBOL_TABLE.lookUp(t.image, UnitType.METHOD, intBaseMuted);
      jjtn006.arguments =  arguments;
      if (methodUnit == null) {
        {if (true) throw new ParseException("Method " + t.image + " has not been defined.");}
      }
      jjtn006.methodUnit = methodUnit;
      {if (true) return jjtn006;}
      } catch (Throwable jjte006) {
      if (jjtc006) {
        jjtree.clearNodeScope(jjtn006);
        jjtc006 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte006 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte006;}
      }
      if (jjte006 instanceof ParseException) {
        {if (true) throw (ParseException)jjte006;}
      }
      {if (true) throw (Error)jjte006;}
      } finally {
      if (jjtc006) {
        jjtree.closeNodeScope(jjtn006, true);
      }
      }
    } else if (jj_2_47(3)) {
      arrayExpr_AST jjtn007 = new arrayExpr_AST(JJTARRAYEXPR_AST);
      boolean jjtc007 = true;
      jjtree.openNodeScope(jjtn007);
      try {
        t = jj_consume_token(ID);
        label_13:
        while (true) {
          jj_consume_token(LSB);
          arrayExpr = Expression();
          jj_consume_token(RSB);
      size = size + 1;
      arrayIndices.add(arrayExpr);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LSB:
            ;
            break;
          default:
            jj_la1[61] = jj_gen;
            break label_13;
          }
        }
      jjtree.closeNodeScope(jjtn007, true);
      jjtc007 = false;
      jjtn007.name = t.image;
      jjtn007.size = size;
      jjtn007.arrayIndices = arrayIndices;
      IntegerMuted intBaseMuted = new IntegerMuted(-1);
      VariableUnit variableUnit = (VariableUnit) SYMBOL_TABLE.lookUp(t.image, UnitType.VARIABLE, intBaseMuted);
      if (variableUnit == null) {
        {if (true) throw new ParseException("Variable " + t.image + " has not been defined.");}
      }
      jjtn007.variableUnit = variableUnit;
      {if (true) return jjtn007;}
      } catch (Throwable jjte007) {
      if (jjtc007) {
        jjtree.clearNodeScope(jjtn007);
        jjtc007 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte007 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte007;}
      }
      if (jjte007 instanceof ParseException) {
        {if (true) throw (ParseException)jjte007;}
      }
      {if (true) throw (Error)jjte007;}
      } finally {
      if (jjtc007) {
        jjtree.closeNodeScope(jjtn007, true);
      }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
    idExpr_AST jjtn008 = new idExpr_AST(JJTIDEXPR_AST);
    boolean jjtc008 = true;
    jjtree.openNodeScope(jjtn008);
        try {
    jjtree.closeNodeScope(jjtn008, true);
    jjtc008 = false;
    jjtn008.name = t.image;
    IntegerMuted intBaseMuted = new IntegerMuted(-1);
    VariableUnit variableUnit = (VariableUnit) SYMBOL_TABLE.lookUp(t.image, UnitType.VARIABLE, intBaseMuted);
    if (variableUnit == null) {
          {if (true) throw new ParseException("Variable " + t.image + " has not been defined.");}
        }
    jjtn008.variableUnit = variableUnit;
    {if (true) return jjtn008;}
        } finally {
    if (jjtc008) {
      jjtree.closeNodeScope(jjtn008, true);
    }
        }
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public primaryExisiting2_AST PrimaryExisting_2() throws ParseException {
    Token t = null;
    List<binaryExpression_AST> args = null;
    binaryExpression_AST arrayExpression = null;
    primaryExisiting2_AST p2 = null;
      primaryExisiting2_AST jjtn004 = new primaryExisiting2_AST(JJTPRIMARYEXISITING2_AST);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
    try {
      jj_consume_token(DOT);
              fieldExpr_AST jjtn001 = new fieldExpr_AST(JJTFIELDEXPR_AST);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        t = jj_consume_token(ID);
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LP:
      case LSB:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LP:
          jj_consume_token(LP);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
          case SUPER:
          case THIS:
          case INTEGER:
          case TRUE:
          case FALSE:
          case CHARLITERAL:
          case STRINGLITERAL:
          case NULL:
          case LP:
          case NOT:
          case PLUS:
          case MINUS:
          case ID:
            args = ActualArguments();
            break;
          default:
            jj_la1[63] = jj_gen;
            ;
          }
                                                                          methodExpr_AST jjtn002 = new methodExpr_AST(JJTMETHODEXPR_AST);
                                                                          boolean jjtc002 = true;
                                                                          jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(RP);
          } finally {
                                                                          if (jjtc002) {
                                                                            jjtree.closeNodeScope(jjtn002, true);
                                                                          }
          }
      jjtn004.isMethodCall = true;
          break;
        case LSB:
          jj_consume_token(LSB);
          arrayExpression = Expression();
                                              arrayExpr_AST jjtn003 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                              boolean jjtc003 = true;
                                              jjtree.openNodeScope(jjtn003);
          try {
            jj_consume_token(RSB);
          } finally {
                                              if (jjtc003) {
                                                jjtree.closeNodeScope(jjtn003, true);
                                              }
          }
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        p2 = PrimaryExisting_2();
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn004, true);
      jjtc004 = false;
      jjtn004.attribute = t.image;
      jjtn004.arguments = args;
      jjtn004.arrayExpression = arrayExpression;
      jjtn004.p2 = p2;
      {if (true) return jjtn004;}
    } catch (Throwable jjte004) {
      if (jjtc004) {
        jjtree.clearNodeScope(jjtn004);
        jjtc004 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte004 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte004;}
      }
      if (jjte004 instanceof ParseException) {
        {if (true) throw (ParseException)jjte004;}
      }
      {if (true) throw (Error)jjte004;}
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public newArray_AST NewArray() throws ParseException {
        SimpleNode type = null;
        List<binaryExpression_AST> arrayIndices = new ArrayList<binaryExpression_AST>();
        binaryExpression_AST arrayIndex  = null;
        int size  = 0;
    newArray_AST jjtn001 = new newArray_AST(JJTNEWARRAY_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(NEW);
      type = Type();
      label_14:
      while (true) {
        jj_consume_token(LSB);
        arrayIndex = Expression();
        jj_consume_token(RSB);
        size = size + 1;
        arrayIndices.add(arrayIndex);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSB:
          ;
          break;
        default:
          jj_la1[67] = jj_gen;
          break label_14;
        }
      }
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    type.typeObj.arraySize = size;
    type.typeObj.isArray = true;
    jjtn001.size = size;
    jjtn001.arrayIndices = arrayIndices;
    jjtn001.typeObj = type.typeObj;
    {if (true) return jjtn001;}
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(LSB)) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    if (jj_3R_35()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_55()) return true;
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_33()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_33()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    if (jj_3R_34()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(STATIC)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_85()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_45()) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_59()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(STRINGLITERAL)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(CHARLITERAL)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(MODULO)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_132()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(GREATER)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_125()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_28()) return true;
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(LESSEREQ)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(LESSER)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(GREATEREQ)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_110()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(NOTEQUAL)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(LCB)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCB)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_74()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(LSB)) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_45()) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_112()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(LSB)) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    if (jj_3R_71()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_49()) return true;
    if (jj_scan_token(LP)) return true;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(LSB)) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_82()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    if (jj_scan_token(LP)) return true;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_79()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    if (jj_3R_44()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public DecafTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[68];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x2000,0xf170000,0x70000,0x70000,0x70000,0x170000,0x0,0xb000000,0x0,0x0,0x0,0xf000000,0x0,0xb000000,0xb000000,0x0,0x0,0xbe8ca00,0x1000,0x608000,0x880000,0xa00,0x0,0x0,0x0,0x0,0x0,0x608000,0x0,0x0,0x608000,0x608000,0x608000,0x608000,0x608000,0x608000,0x608000,0x608000,0x608000,0x0,0x0,0x608000,0x608000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x608000,0x0,0x608000,0x608000,0x0,0x0,0x608000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x4000,0x800,0x10000,0x0,0x800,0x0,0x0,0x4000,0x800,0x30822fe,0x0,0x30800fe,0x0,0x2000,0x7e,0x8000,0x800,0x800,0x0,0x30800fe,0x8000,0x8000,0x30800fe,0x30800fe,0x30800fe,0x30800fe,0x30800fe,0x30800fe,0x30800fe,0x30800fe,0x30800fe,0x800,0x800,0xfe,0x30800fe,0x8000,0x4000,0x20000000,0x10000000,0x900000,0x900000,0x660000,0x660000,0x3000000,0x3000000,0x4c000000,0x4c000000,0x3080000,0x30800fe,0x8000,0x30800fe,0x30800fe,0x800,0x0,0x30800fe,0x880,0x880,0x8000,0x800,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x2,0x2,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x2,0x0,0x2,0x2,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[47];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Decaf(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Decaf(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DecafTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Decaf(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DecafTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Decaf(DecafTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DecafTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[100];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 68; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 100; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 47; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

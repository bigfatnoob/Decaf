/* Generated By:JJTree&JavaCC: Do not edit this line. Decaf.java */
package stage2;
import java.util.*;
public class Decaf/*@bgen(jjtree)*/implements DecafTreeConstants, DecafConstants {/*@bgen(jjtree)*/
  protected JJTDecafState jjtree = new JJTDecafState();public static void main(String args [])
  {
    Decaf parser;
    if (args.length == 1) {
      try {
        parser = new Decaf(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File "+args[0]+ " not found," +
            " reading from terminal instead");
        parser = new Decaf(System.in);
      }
    } else {
      System.out.println("Reading from standard input...");
      parser =  new Decaf(System.in);
    }
    start_AST start = null;
    try
    {
      start = parser.Start();
      System.out.println("Parsed Successfully.");
      //start.dump(" -> ");
    }
    catch (Exception e)
    {
      System.out.println("Dagnabit.");
      System.out.println(e.getMessage());
    }

  }

  final public String ID() throws ParseException {
  Token t;
    t = jj_consume_token(ID);
           {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public start_AST Start() throws ParseException {
 /*@bgen(jjtree) start_AST */
  start_AST jjtn000 = new start_AST(JJTSTART_AST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Unit classUnit = null;
  List<Unit> classUnitList = new ArrayList<Unit >();
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        classUnit = Class();
                       classUnitList.add(classUnit);
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    //jjtThis.setClasses(classUnitList);
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Unit Class() throws ParseException {
  Unit classUnit = null;
  List<Unit> classFields = new ArrayList<Unit>();
  List<Unit> classFieldsCollection = new ArrayList<Unit>();
    jj_consume_token(CLASS);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      jj_consume_token(ID);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(LCB);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case BOOLEAN:
      case CHAR:
      case VOID:
      case INT:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      classFields = Member();
                            classFieldsCollection.addAll(classFields);
    }
    jj_consume_token(RCB);
        classUnit = new Unit();
        // Symbol table insertion to be performed
        {if (true) return classUnit;}
    throw new Error("Missing return statement in function");
  }

  final public List<Unit> Member() throws ParseException {
  Unit member = null;
  List<Unit> memberList = null;
  List<Unit> allMembers = new ArrayList<Unit>();
    if (jj_2_1(10)) {
      memberList = Field();
                       allMembers.addAll(memberList); {if (true) return allMembers;}
    } else if (jj_2_2(10)) {
      member = Method();
                    allMembers.add(member); {if (true) return allMembers;}
    } else if (jj_2_3(10)) {
      member = Ctor();
                  allMembers.add(member); {if (true) return allMembers;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Unit> Field() throws ParseException {
  FieldDetails fieldDetails = new FieldDetails();
  Modifier modifier = null;
  List<Unit> fieldList = null;
    modifier = Modifier();
                        fieldDetails.setModifier(modifier);
    fieldList = FieldDeclarations(fieldDetails);
                                              {if (true) return fieldList;}
    throw new Error("Missing return statement in function");
  }

  final public Modifier Modifier() throws ParseException {
  Modifier modifier = new Modifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
      if (jj_2_4(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
                         modifier.setScopePublic(true);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
                                                                   modifier.setScopePrivate(true);
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
                                                                                                                modifier.setScopeProtected(true);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(STATIC);
                                                                                                                                                             modifier.setScopeStatic(true);
      } else if (jj_2_5(2)) {
        jj_consume_token(STATIC);
                         modifier.setScopeStatic(true);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
                                                                   modifier.setScopePublic(true);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
                                                                                                             modifier.setScopePrivate(true);
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
                                                                                                                                                          modifier.setScopeProtected(true);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_6(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
                         modifier.setScopePublic(true);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
                                                                   modifier.setScopePrivate(true);
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
                                                                                                                modifier.setScopeProtected(true);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_7(2)) {
        jj_consume_token(STATIC);
                         modifier.setScopeStatic(true);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
   {if (true) return modifier;}
    throw new Error("Missing return statement in function");
  }

  final public List<Unit> FieldDeclarations(FieldDetails fieldDetails) throws ParseException {
  SimpleNode type = null;
  List<Unit> variables = null;
    type = Type();
                fieldDetails.setType(type);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(LSB);
      jj_consume_token(RSB);
    }
    variables = Variables(fieldDetails);
    jj_consume_token(SCOLON);
                                              {if (true) return variables;}
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode Type() throws ParseException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      t = jj_consume_token(INT);
               int_AST jjtn001 = new int_AST(JJTINT_AST);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
      try {
               jjtree.closeNodeScope(jjtn001, true);
               jjtc001 = false;
              {if (true) return jjtn001;}
      } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
      }
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
                char_AST jjtn002 = new char_AST(JJTCHAR_AST);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
      try {
                jjtree.closeNodeScope(jjtn002, true);
                jjtc002 = false;
               {if (true) return jjtn002;}
      } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
      }
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
                   boolean_AST jjtn003 = new boolean_AST(JJTBOOLEAN_AST);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
      try {
                   jjtree.closeNodeScope(jjtn003, true);
                   jjtc003 = false;
                  {if (true) return jjtn003;}
      } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
      }
      break;
    case ID:
      t = jj_consume_token(ID);
              id_AST jjtn004 = new id_AST(JJTID_AST);
              boolean jjtc004 = true;
              jjtree.openNodeScope(jjtn004);
      try {
              jjtree.closeNodeScope(jjtn004, true);
              jjtc004 = false;
             {if (true) return jjtn004;}
      } finally {
              if (jjtc004) {
                jjtree.closeNodeScope(jjtn004, true);
              }
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Unit> Variables(FieldDetails fieldDetails) throws ParseException {
  List<Unit> variables = new ArrayList<Unit>();
  Unit variable = null;
    variable = Variable(fieldDetails);
                                  variables.add(variable);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      variable = Variable(fieldDetails);
                                           variables.add(variable);
    }
                                                                       {if (true) return variables;}
    throw new Error("Missing return statement in function");
  }

  final public Unit Variable(FieldDetails fieldDetails) throws ParseException {
  VariableUnit variable = new VariableUnit();
  String variableName = null;
    variableName = ID();
                      variable.setName(variableName);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      jj_consume_token(LSB);
      jj_consume_token(RSB);
                                                                  variable.setArray(true);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
     assignOperator_AST jjtn001 = new assignOperator_AST(JJTASSIGNOPERATOR_AST);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(ASSIGN);
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
      }
      Expression();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    variable.setType(fieldDetails.getType());
    variable.setModifier(fieldDetails.getModifier());
    {if (true) return variable;}
    // Symbol table insertion

    throw new Error("Missing return statement in function");
  }

  final public Unit Method() throws ParseException {
  MethodUnit methodUnit = new MethodUnit();
  Modifier modifier = null;
  SimpleNode type = null;
  List<Unit> formalArgs = null;
  Token t = null;
    modifier = Modifier();
                        methodUnit.setModifier(modifier);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
    case ID:
      type = Type();
      break;
    case VOID:
                      voidType_AST jjtn001 = new voidType_AST(JJTVOIDTYPE_AST);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(VOID);
      } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      jj_consume_token(LSB);
      jj_consume_token(RSB);
    }
    ID();
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
    case ID:
      formalArgs = FormalArgs();
                                         methodUnit.setFormalArgs(formalArgs);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(RP);
    Block();
   {if (true) return methodUnit;}
    throw new Error("Missing return statement in function");
  }

  final public Unit Ctor() throws ParseException {
  MethodUnit methodUnit = new MethodUnit();
  Modifier modifier = null;
  List<Unit> formalArgs = null;
  Token t = null;
    modifier = Modifier();
                        methodUnit.setModifier(modifier);
    ID();
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
    case ID:
      formalArgs = FormalArgs();
                                     methodUnit.setFormalArgs(formalArgs);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(RP);
    Block();
   {if (true) return methodUnit;}
    throw new Error("Missing return statement in function");
  }

  final public List<Unit> FormalArgs() throws ParseException {
  Unit formalArg = null;
  List<Unit> formalArgs = new ArrayList<Unit>();
    formalArg = FormalArg();
                          formalArgs.add(formalArg);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      formalArg = FormalArg();
                                   formalArgs.add(formalArg);
    }
   {if (true) return formalArgs;}
    throw new Error("Missing return statement in function");
  }

  final public Unit FormalArg() throws ParseException {
  FieldDetails fieldDetails = new FieldDetails();
  Unit formalArg = null;
  SimpleNode type = null;
    type = Type();
                fieldDetails.setType(type);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      jj_consume_token(LSB);
      jj_consume_token(RSB);
    }
    formalArg = Variable(fieldDetails);
                                     {if (true) return formalArg;}
    throw new Error("Missing return statement in function");
  }

  final public void Block() throws ParseException {
                         /*@bgen(jjtree) block_AST */
  block_AST jjtn000 = new block_AST(JJTBLOCK_AST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LCB);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case CONTINUE:
        case IF:
        case NEW:
        case RETURN:
        case SUPER:
        case THIS:
        case WHILE:
        case BOOLEAN:
        case CHAR:
        case INT:
        case INTEGER:
        case TRUE:
        case FALSE:
        case CHARLITERAL:
        case STRINGLITERAL:
        case NULL:
        case LP:
        case LCB:
        case SCOLON:
        case NOT:
        case PLUS:
        case MINUS:
        case ID:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_9;
        }
        Statement();
      }
      jj_consume_token(RCB);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Statement() throws ParseException {
    if (jj_2_8(3)) {
      jj_consume_token(IF);
      jj_consume_token(LP);
      Expression();
      jj_consume_token(RP);
      Statement();
                                                        ifThenElseStat_AST jjtn001 = new ifThenElseStat_AST(JJTIFTHENELSESTAT_AST);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          Statement();
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
      } catch (Throwable jjte001) {
                                                        if (jjtc001) {
                                                          jjtree.clearNodeScope(jjtn001);
                                                          jjtc001 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte001 instanceof RuntimeException) {
                                                          {if (true) throw (RuntimeException)jjte001;}
                                                        }
                                                        if (jjte001 instanceof ParseException) {
                                                          {if (true) throw (ParseException)jjte001;}
                                                        }
                                                        {if (true) throw (Error)jjte001;}
      } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                        }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(LP);
        Expression();
        jj_consume_token(RP);
                                    whileStat_AST jjtn002 = new whileStat_AST(JJTWHILESTAT_AST);
                                    boolean jjtc002 = true;
                                    jjtree.openNodeScope(jjtn002);
        try {
          Statement();
        } catch (Throwable jjte002) {
                                    if (jjtc002) {
                                      jjtree.clearNodeScope(jjtn002);
                                      jjtc002 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte002 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte002;}
                                    }
                                    if (jjte002 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte002;}
                                    }
                                    {if (true) throw (Error)jjte002;}
        } finally {
                                    if (jjtc002) {
                                      jjtree.closeNodeScope(jjtn002, true);
                                    }
        }
        break;
      case RETURN:
        jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case SUPER:
        case THIS:
        case INTEGER:
        case TRUE:
        case FALSE:
        case CHARLITERAL:
        case STRINGLITERAL:
        case NULL:
        case LP:
        case NOT:
        case PLUS:
        case MINUS:
        case ID:
          Expression();
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
                              returnStat_AST jjtn003 = new returnStat_AST(JJTRETURNSTAT_AST);
                              boolean jjtc003 = true;
                              jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(SCOLON);
        } finally {
                              if (jjtc003) {
                                jjtree.closeNodeScope(jjtn003, true);
                              }
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        if (jj_2_9(3)) {
          StatementExpression();
                                        expressionStat_AST jjtn004 = new expressionStat_AST(JJTEXPRESSIONSTAT_AST);
                                        boolean jjtc004 = true;
                                        jjtree.openNodeScope(jjtn004);
          try {
            jj_consume_token(SCOLON);
          } finally {
                                        if (jjtc004) {
                                          jjtree.closeNodeScope(jjtn004, true);
                                        }
          }
        } else if (jj_2_10(3)) {
                  varDeclStat_AST jjtn005 = new varDeclStat_AST(JJTVARDECLSTAT_AST);
                  boolean jjtc005 = true;
                  jjtree.openNodeScope(jjtn005);
          try {
            FieldDeclarations(new FieldDetails());
          } catch (Throwable jjte005) {
                  if (jjtc005) {
                    jjtree.clearNodeScope(jjtn005);
                    jjtc005 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte005 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte005;}
                  }
                  if (jjte005 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte005;}
                  }
                  {if (true) throw (Error)jjte005;}
          } finally {
                  if (jjtc005) {
                    jjtree.closeNodeScope(jjtn005, true);
                  }
          }
        } else if (jj_2_11(3)) {
                  block_AST jjtn006 = new block_AST(JJTBLOCK_AST);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
          try {
            Block();
          } catch (Throwable jjte006) {
                  if (jjtc006) {
                    jjtree.clearNodeScope(jjtn006);
                    jjtc006 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte006 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte006;}
                  }
                  if (jjte006 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte006;}
                  }
                  {if (true) throw (Error)jjte006;}
          } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006, true);
                  }
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BREAK:
            jj_consume_token(BREAK);
             breakStat_AST jjtn007 = new breakStat_AST(JJTBREAKSTAT_AST);
             boolean jjtc007 = true;
             jjtree.openNodeScope(jjtn007);
            try {
              jj_consume_token(SCOLON);
            } finally {
             if (jjtc007) {
               jjtree.closeNodeScope(jjtn007, true);
             }
            }
            break;
          case CONTINUE:
            jj_consume_token(CONTINUE);
                continueStat_AST jjtn008 = new continueStat_AST(JJTCONTINUESTAT_AST);
                boolean jjtc008 = true;
                jjtree.openNodeScope(jjtn008);
            try {
              jj_consume_token(SCOLON);
            } finally {
                if (jjtc008) {
                  jjtree.closeNodeScope(jjtn008, true);
                }
            }
            break;
          case SCOLON:
     emptyStat_AST jjtn009 = new emptyStat_AST(JJTEMPTYSTAT_AST);
     boolean jjtc009 = true;
     jjtree.openNodeScope(jjtn009);
            try {
              jj_consume_token(SCOLON);
            } finally {
     if (jjtc009) {
       jjtree.closeNodeScope(jjtn009, true);
     }
            }
            break;
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
    nullExpr_AST jjtn001 = new nullExpr_AST(JJTNULLEXPR_AST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(NULL);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case TRUE:
     boolExpr_AST jjtn002 = new boolExpr_AST(JJTBOOLEXPR_AST);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(TRUE);
      } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
      }
      break;
    case FALSE:
     boolExpr_AST jjtn003 = new boolExpr_AST(JJTBOOLEXPR_AST);
     boolean jjtc003 = true;
     jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(FALSE);
      } finally {
     if (jjtc003) {
       jjtree.closeNodeScope(jjtn003, true);
     }
      }
      break;
    case INTEGER:
     intExpr_AST jjtn004 = new intExpr_AST(JJTINTEXPR_AST);
     boolean jjtc004 = true;
     jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(INTEGER);
      } finally {
     if (jjtc004) {
       jjtree.closeNodeScope(jjtn004, true);
     }
      }
      break;
    case CHARLITERAL:
     charExpr_AST jjtn005 = new charExpr_AST(JJTCHAREXPR_AST);
     boolean jjtc005 = true;
     jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(CHARLITERAL);
      } finally {
     if (jjtc005) {
       jjtree.closeNodeScope(jjtn005, true);
     }
      }
      break;
    case STRINGLITERAL:
     stringExpr_AST jjtn006 = new stringExpr_AST(JJTSTRINGEXPR_AST);
     boolean jjtc006 = true;
     jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(STRINGLITERAL);
      } finally {
     if (jjtc006) {
       jjtree.closeNodeScope(jjtn006, true);
     }
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void StatementExpression() throws ParseException {
    if (jj_2_12(10)) {
      MethodCall();
    } else if (jj_2_13(10)) {
      Assignment();
    } else if (jj_2_14(10)) {
      Expression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Assignment() throws ParseException {
    FieldAccess();
                  assignOperator_AST jjtn001 = new assignOperator_AST(JJTASSIGNOPERATOR_AST);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(ASSIGN);
    } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
    }
    Expression();
  }

  final public void FieldAccess() throws ParseException {
    FieldAccess_1();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      MethodPrime();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  final public void FieldAccess_1() throws ParseException {
    if (jj_2_15(6)) {
      PrimaryFieldAccess();
      jj_consume_token(DOT);
                                fieldExpr_AST jjtn001 = new fieldExpr_AST(JJTFIELDEXPR_AST);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(ID);
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
      }
                                                      arrayExpr_AST jjtn002 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                                      boolean jjtc002 = true;
                                                      jjtree.openNodeScope(jjtn002);
      try {
        label_10:
        while (true) {
          jj_consume_token(LSB);
          Expression();
          jj_consume_token(RSB);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LSB:
            ;
            break;
          default:
            jj_la1[25] = jj_gen;
            break label_10;
          }
        }
      } catch (Throwable jjte002) {
                                                      if (jjtc002) {
                                                        jjtree.clearNodeScope(jjtn002);
                                                        jjtc002 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte002 instanceof RuntimeException) {
                                                        {if (true) throw (RuntimeException)jjte002;}
                                                      }
                                                      if (jjte002 instanceof ParseException) {
                                                        {if (true) throw (ParseException)jjte002;}
                                                      }
                                                      {if (true) throw (Error)jjte002;}
      } finally {
                                                      if (jjtc002) {
                                                        jjtree.closeNodeScope(jjtn002, true);
                                                      }
      }
    } else if (jj_2_16(6)) {
      PrimaryFieldAccess();
      jj_consume_token(DOT);
                               fieldExpr_AST jjtn003 = new fieldExpr_AST(JJTFIELDEXPR_AST);
                               boolean jjtc003 = true;
                               jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(ID);
      } finally {
                               if (jjtc003) {
                                 jjtree.closeNodeScope(jjtn003, true);
                               }
      }
    } else if (jj_2_17(6)) {
     idExpr_AST jjtn004 = new idExpr_AST(JJTIDEXPR_AST);
     boolean jjtc004 = true;
     jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(ID);
      } finally {
     if (jjtc004) {
       jjtree.closeNodeScope(jjtn004, true);
     }
      }
                        arrayExpr_AST jjtn005 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                        boolean jjtc005 = true;
                        jjtree.openNodeScope(jjtn005);
      try {
        label_11:
        while (true) {
          jj_consume_token(LSB);
          Expression();
          jj_consume_token(RSB);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LSB:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_11;
          }
        }
      } catch (Throwable jjte005) {
                        if (jjtc005) {
                          jjtree.clearNodeScope(jjtn005);
                          jjtc005 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte005 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte005;}
                        }
                        if (jjte005 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte005;}
                        }
                        {if (true) throw (Error)jjte005;}
      } finally {
                        if (jjtc005) {
                          jjtree.closeNodeScope(jjtn005, true);
                        }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      idExpr_AST jjtn006 = new idExpr_AST(JJTIDEXPR_AST);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
        try {
          jj_consume_token(ID);
        } finally {
      if (jjtc006) {
        jjtree.closeNodeScope(jjtn006, true);
      }
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PrimaryFieldAccess() throws ParseException {
    if (jj_2_18(3)) {
      Literal();
    } else if (jj_2_19(3)) {
                   thisExpr_AST jjtn001 = new thisExpr_AST(JJTTHISEXPR_AST);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(THIS);
      } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
      }
    } else if (jj_2_20(3)) {
                   superExpr_AST jjtn002 = new superExpr_AST(JJTSUPEREXPR_AST);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(SUPER);
      } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
      }
    } else if (jj_2_21(3)) {
      jj_consume_token(LP);
      Expression();
      jj_consume_token(RP);
    } else if (jj_2_22(3)) {
      jj_consume_token(NEW);
      jj_consume_token(ID);
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        ActualArguments();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
                                                        newClassExpr_AST jjtn003 = new newClassExpr_AST(JJTNEWCLASSEXPR_AST);
                                                        boolean jjtc003 = true;
                                                        jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(RP);
      } finally {
                                                        if (jjtc003) {
                                                          jjtree.closeNodeScope(jjtn003, true);
                                                        }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MethodCall() throws ParseException {
                                   /*@bgen(jjtree) methodCall_AST */
  methodCall_AST jjtn000 = new methodCall_AST(JJTMETHODCALL_AST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MethodCall_1();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        MethodCall_2();
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MethodCall_1() throws ParseException {
                                     /*@bgen(jjtree) methodCall_AST */
  methodCall_AST jjtn000 = new methodCall_AST(JJTMETHODCALL_AST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MethodParent();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        MethodPrime();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        ActualArguments();
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(RP);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MethodCall_2() throws ParseException {
    if (jj_2_23(5)) {
      jj_consume_token(DOT);
      jj_consume_token(ID);
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        ActualArguments();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
                                                     AstMethodExpr jjtn001 = new AstMethodExpr(JJTASTMETHODEXPR);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RP);
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                     }
      }
      MethodCall_2();
    } else if (jj_2_24(5)) {
      jj_consume_token(DOT);
      jj_consume_token(ID);
      jj_consume_token(LSB);
      Expression();
      jj_consume_token(RSB);
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        ActualArguments();
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      jj_consume_token(RP);
      MethodCall_2();
    } else if (jj_2_25(5)) {
      jj_consume_token(DOT);
      jj_consume_token(ID);
      MethodPrime();
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        ActualArguments();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(RP);
      MethodCall_2();
    } else if (jj_2_26(5)) {
      jj_consume_token(DOT);
      jj_consume_token(ID);
      jj_consume_token(LSB);
      Expression();
      jj_consume_token(RSB);
      MethodPrime();
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        ActualArguments();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jj_consume_token(RP);
      MethodCall_2();
    } else if (jj_2_27(5)) {
      jj_consume_token(DOT);
      jj_consume_token(ID);
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        ActualArguments();
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(RP);
    } else if (jj_2_28(5)) {
      jj_consume_token(DOT);
      jj_consume_token(ID);
      jj_consume_token(LSB);
      Expression();
      jj_consume_token(RSB);
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        ActualArguments();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      jj_consume_token(RP);
    } else if (jj_2_29(5)) {
      jj_consume_token(DOT);
      jj_consume_token(ID);
      MethodPrime();
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        ActualArguments();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(RP);
    } else if (jj_2_30(5)) {
      jj_consume_token(DOT);
      jj_consume_token(ID);
      jj_consume_token(LSB);
      Expression();
      jj_consume_token(RSB);
      MethodPrime();
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        ActualArguments();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      jj_consume_token(RP);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MethodParent() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case SUPER:
    case THIS:
    case INTEGER:
    case TRUE:
    case FALSE:
    case CHARLITERAL:
    case STRINGLITERAL:
    case NULL:
    case LP:
      PrimaryMethodParent();
      jj_consume_token(DOT);
                                 fieldExpr_AST jjtn001 = new fieldExpr_AST(JJTFIELDEXPR_AST);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(ID);
      } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, true);
                                 }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
        jj_consume_token(LSB);
        Expression();
                                                                           arrayExpr_AST jjtn002 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                                                           boolean jjtc002 = true;
                                                                           jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(RSB);
        } finally {
                                                                           if (jjtc002) {
                                                                             jjtree.closeNodeScope(jjtn002, true);
                                                                           }
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      break;
    case ID:
       idExpr_AST jjtn003 = new idExpr_AST(JJTIDEXPR_AST);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(ID);
      } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
       }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
        jj_consume_token(LSB);
        Expression();
                                             arrayExpr_AST jjtn004 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                             boolean jjtc004 = true;
                                             jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(RSB);
        } finally {
                                             if (jjtc004) {
                                               jjtree.closeNodeScope(jjtn004, true);
                                             }
        }
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimaryMethodParent() throws ParseException {
    if (jj_2_31(3)) {
      Literal();
    } else if (jj_2_32(3)) {
      thisExpr_AST jjtn001 = new thisExpr_AST(JJTTHISEXPR_AST);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(THIS);
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } else if (jj_2_33(3)) {
      superExpr_AST jjtn002 = new superExpr_AST(JJTSUPEREXPR_AST);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(SUPER);
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
    } else if (jj_2_34(3)) {
      jj_consume_token(LP);
      Expression();
      jj_consume_token(RP);
    } else if (jj_2_35(3)) {
      jj_consume_token(NEW);
      jj_consume_token(ID);
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        ActualArguments();
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
                                           methodExpr_AST jjtn003 = new methodExpr_AST(JJTMETHODEXPR_AST);
                                           boolean jjtc003 = true;
                                           jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(RP);
      } finally {
                                           if (jjtc003) {
                                             jjtree.closeNodeScope(jjtn003, true);
                                           }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MethodPrime() throws ParseException {
    if (jj_2_36(3)) {
      jj_consume_token(DOT);
            fieldExpr_AST jjtn001 = new fieldExpr_AST(JJTFIELDEXPR_AST);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(ID);
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
      MethodPrime();
    } else if (jj_2_37(3)) {
      jj_consume_token(DOT);
            fieldExpr_AST jjtn002 = new fieldExpr_AST(JJTFIELDEXPR_AST);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(ID);
      } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
      }
      jj_consume_token(LSB);
      Expression();
                                                   arrayExpr_AST jjtn003 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                                   boolean jjtc003 = true;
                                                   jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(RSB);
      } finally {
                                                   if (jjtc003) {
                                                     jjtree.closeNodeScope(jjtn003, true);
                                                   }
      }
      MethodPrime();
    } else if (jj_2_38(3)) {
      jj_consume_token(DOT);
                         fieldExpr_AST jjtn004 = new fieldExpr_AST(JJTFIELDEXPR_AST);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(ID);
      } finally {
                         if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004, true);
                         }
      }
      jj_consume_token(LSB);
      Expression();
                                                                arrayExpr_AST jjtn005 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                                                                boolean jjtc005 = true;
                                                                jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(RSB);
      } finally {
                                                                if (jjtc005) {
                                                                  jjtree.closeNodeScope(jjtn005, true);
                                                                }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
            fieldExpr_AST jjtn006 = new fieldExpr_AST(JJTFIELDEXPR_AST);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
        try {
          jj_consume_token(ID);
        } finally {
            if (jjtc006) {
              jjtree.closeNodeScope(jjtn006, true);
            }
        }
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ActualArguments() throws ParseException {
    Expression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

  final public void Expression() throws ParseException {
    binaryExpression_AST jjtn002 = new binaryExpression_AST(JJTBINARYEXPRESSION_AST);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    try {
      OrExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
                                  assignOperator_AST jjtn001 = new assignOperator_AST(JJTASSIGNOPERATOR_AST);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(ASSIGN);
        } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                  }
        }
        Expression();
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
    } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
    } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 2);
    }
    }
  }

  final public void OrExpression() throws ParseException {
    binaryExpression_AST jjtn002 = new binaryExpression_AST(JJTBINARYEXPRESSION_AST);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    try {
      AndExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
                                   orOperator_AST jjtn001 = new orOperator_AST(JJTOROPERATOR_AST);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(OR);
        } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001, true);
                                   }
        }
        OrExpression();
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
    } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
    } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void AndExpression() throws ParseException {
    binaryExpression_AST jjtn002 = new binaryExpression_AST(JJTBINARYEXPRESSION_AST);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    try {
      EqualityExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
                                        andOperator_AST jjtn001 = new andOperator_AST(JJTANDOPERATOR_AST);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(AND);
        } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001, true);
                                        }
        }
        AndExpression();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
    } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
    } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void EqualityExpression() throws ParseException {
    binaryExpression_AST jjtn003 = new binaryExpression_AST(JJTBINARYEXPRESSION_AST);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    try {
      RelationalExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case NOTEQUAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
                                                        equalOperator_AST jjtn001 = new equalOperator_AST(JJTEQUALOPERATOR_AST);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(EQUAL);
          } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                        }
          }
          EqualityExpression();
          break;
        case NOTEQUAL:
                    notEqualOperator_AST jjtn002 = new notEqualOperator_AST(JJTNOTEQUALOPERATOR_AST);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(NOTEQUAL);
          } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
          }
          EqualityExpression();
          break;
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
    } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
    } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void RelationalExpression() throws ParseException {
    binaryExpression_AST jjtn005 = new binaryExpression_AST(JJTBINARYEXPRESSION_AST);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    try {
      SumExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATER:
      case LESSER:
      case GREATEREQ:
      case LESSEREQ:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GREATER:
                                                 greaterOperator_AST jjtn001 = new greaterOperator_AST(JJTGREATEROPERATOR_AST);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(GREATER);
          } finally {
                                                 if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001, true);
                                                 }
          }
          RelationalExpression();
          break;
        case GREATEREQ:
                    greaterEqualOperator_AST jjtn002 = new greaterEqualOperator_AST(JJTGREATEREQUALOPERATOR_AST);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(GREATEREQ);
          } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
          }
          RelationalExpression();
          break;
        case LESSER:
                    lesserOperator_AST jjtn003 = new lesserOperator_AST(JJTLESSEROPERATOR_AST);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
          try {
            jj_consume_token(LESSER);
          } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                    }
          }
          RelationalExpression();
          break;
        case LESSEREQ:
                    lesserEqualOperator_AST jjtn004 = new lesserEqualOperator_AST(JJTLESSEREQUALOPERATOR_AST);
                    boolean jjtc004 = true;
                    jjtree.openNodeScope(jjtn004);
          try {
            jj_consume_token(LESSEREQ);
          } finally {
                    if (jjtc004) {
                      jjtree.closeNodeScope(jjtn004, true);
                    }
          }
          RelationalExpression();
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
    } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte005;}
    }
    if (jjte005 instanceof ParseException) {
      {if (true) throw (ParseException)jjte005;}
    }
    {if (true) throw (Error)jjte005;}
    } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void SumExpression() throws ParseException {
    binaryExpression_AST jjtn003 = new binaryExpression_AST(JJTBINARYEXPRESSION_AST);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    try {
      FactorExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
                                                   plusOperator_AST jjtn001 = new plusOperator_AST(JJTPLUSOPERATOR_AST);
                                                   boolean jjtc001 = true;
                                                   jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(PLUS);
          } finally {
                                                   if (jjtc001) {
                                                     jjtree.closeNodeScope(jjtn001, true);
                                                   }
          }
          SumExpression();
          break;
        case MINUS:
                    lesserEqualOperator_AST jjtn002 = new lesserEqualOperator_AST(JJTLESSEREQUALOPERATOR_AST);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(MINUS);
          } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
          }
          SumExpression();
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
    } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
    } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void FactorExpression() throws ParseException {
    binaryExpression_AST jjtn004 = new binaryExpression_AST(JJTBINARYEXPRESSION_AST);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    try {
      UnaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case MODULO:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
                                                   multiplyOperator_AST jjtn001 = new multiplyOperator_AST(JJTMULTIPLYOPERATOR_AST);
                                                   boolean jjtc001 = true;
                                                   jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(MULTIPLY);
          } finally {
                                                   if (jjtc001) {
                                                     jjtree.closeNodeScope(jjtn001, true);
                                                   }
          }
          FactorExpression();
          break;
        case DIVIDE:
                    divideOperator_AST jjtn002 = new divideOperator_AST(JJTDIVIDEOPERATOR_AST);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(DIVIDE);
          } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
          }
          FactorExpression();
          break;
        case MODULO:
                    moduloOperator_AST jjtn003 = new moduloOperator_AST(JJTMODULOOPERATOR_AST);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
          try {
            jj_consume_token(MODULO);
          } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                    }
          }
          FactorExpression();
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
    } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte004;}
    }
    if (jjte004 instanceof ParseException) {
      {if (true) throw (ParseException)jjte004;}
    }
    {if (true) throw (Error)jjte004;}
    } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
     plusOperator_AST jjtn001 = new plusOperator_AST(JJTPLUSOPERATOR_AST);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(PLUS);
        } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
        }
        break;
      case MINUS:
                               minusOperator_AST jjtn002 = new minusOperator_AST(JJTMINUSOPERATOR_AST);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(MINUS);
        } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002, true);
                               }
        }
        break;
      case NOT:
                                                           notOperator_AST jjtn003 = new notOperator_AST(JJTNOTOPERATOR_AST);
                                                           boolean jjtc003 = true;
                                                           jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(NOT);
        } finally {
                                                           if (jjtc003) {
                                                             jjtree.closeNodeScope(jjtn003, true);
                                                           }
        }
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expression();
      break;
    case NEW:
    case SUPER:
    case THIS:
    case INTEGER:
    case TRUE:
    case FALSE:
    case CHARLITERAL:
    case STRINGLITERAL:
    case NULL:
    case LP:
    case ID:
      Primary();
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Primary() throws ParseException {
    if (jj_2_39(5)) {
      PrimaryExisting();
    } else if (jj_2_40(5)) {
      NewArray();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimaryExisting() throws ParseException {
    PrimaryExisting_1();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      PrimaryExisting_2();
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
  }

  final public void PrimaryExisting_1() throws ParseException {
    if (jj_2_41(3)) {
      Literal();
    } else if (jj_2_42(3)) {
      thisExpr_AST jjtn001 = new thisExpr_AST(JJTTHISEXPR_AST);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(THIS);
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } else if (jj_2_43(3)) {
      superExpr_AST jjtn002 = new superExpr_AST(JJTSUPEREXPR_AST);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(SUPER);
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
    } else if (jj_2_44(3)) {
      jj_consume_token(LP);
      Expression();
      jj_consume_token(RP);
    } else if (jj_2_45(3)) {
      jj_consume_token(NEW);
      jj_consume_token(ID);
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        ActualArguments();
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
                                           newClassExpr_AST jjtn003 = new newClassExpr_AST(JJTNEWCLASSEXPR_AST);
                                           boolean jjtc003 = true;
                                           jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(RP);
      } finally {
                                           if (jjtc003) {
                                             jjtree.closeNodeScope(jjtn003, true);
                                           }
      }
    } else if (jj_2_46(3)) {
      jj_consume_token(ID);
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case INTEGER:
      case TRUE:
      case FALSE:
      case CHARLITERAL:
      case STRINGLITERAL:
      case NULL:
      case LP:
      case NOT:
      case PLUS:
      case MINUS:
      case ID:
        ActualArguments();
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
                                      methodExpr_AST jjtn004 = new methodExpr_AST(JJTMETHODEXPR_AST);
                                      boolean jjtc004 = true;
                                      jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(RP);
      } finally {
                                      if (jjtc004) {
                                        jjtree.closeNodeScope(jjtn004, true);
                                      }
      }
    } else if (jj_2_47(3)) {
      jj_consume_token(ID);
           arrayExpr_AST jjtn005 = new arrayExpr_AST(JJTARRAYEXPR_AST);
           boolean jjtc005 = true;
           jjtree.openNodeScope(jjtn005);
      try {
        label_13:
        while (true) {
          jj_consume_token(LSB);
          Expression();
          jj_consume_token(RSB);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LSB:
            ;
            break;
          default:
            jj_la1[62] = jj_gen;
            break label_13;
          }
        }
      } catch (Throwable jjte005) {
           if (jjtc005) {
             jjtree.clearNodeScope(jjtn005);
             jjtc005 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte005 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte005;}
           }
           if (jjte005 instanceof ParseException) {
             {if (true) throw (ParseException)jjte005;}
           }
           {if (true) throw (Error)jjte005;}
      } finally {
           if (jjtc005) {
             jjtree.closeNodeScope(jjtn005, true);
           }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      idExpr_AST jjtn006 = new idExpr_AST(JJTIDEXPR_AST);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
        try {
          jj_consume_token(ID);
        } finally {
      if (jjtc006) {
        jjtree.closeNodeScope(jjtn006, true);
      }
        }
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PrimaryExisting_2() throws ParseException {
    jj_consume_token(DOT);
             fieldExpr_AST jjtn001 = new fieldExpr_AST(JJTFIELDEXPR_AST);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(ID);
    } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
    case LSB:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LP:
        jj_consume_token(LP);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case SUPER:
        case THIS:
        case INTEGER:
        case TRUE:
        case FALSE:
        case CHARLITERAL:
        case STRINGLITERAL:
        case NULL:
        case LP:
        case NOT:
        case PLUS:
        case MINUS:
        case ID:
          ActualArguments();
          break;
        default:
          jj_la1[64] = jj_gen;
          ;
        }
                                                              methodExpr_AST jjtn002 = new methodExpr_AST(JJTMETHODEXPR_AST);
                                                              boolean jjtc002 = true;
                                                              jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(RP);
        } finally {
                                                              if (jjtc002) {
                                                                jjtree.closeNodeScope(jjtn002, true);
                                                              }
        }
        break;
      case LSB:
        jj_consume_token(LSB);
        Expression();
                            arrayExpr_AST jjtn003 = new arrayExpr_AST(JJTARRAYEXPR_AST);
                            boolean jjtc003 = true;
                            jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(RSB);
        } finally {
                            if (jjtc003) {
                              jjtree.closeNodeScope(jjtn003, true);
                            }
        }
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      PrimaryExisting_2();
      break;
    default:
      jj_la1[67] = jj_gen;
      ;
    }
  }

  final public void NewArray() throws ParseException {
    jj_consume_token(NEW);
    Type();
    label_14:
    while (true) {
      jj_consume_token(LSB);
      Expression();
      jj_consume_token(RSB);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_14;
      }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(CHARLITERAL)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_28()) return true;
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(LCB)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCB)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(LSB)) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(LSB)) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_45()) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(LSB)) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_49()) return true;
    if (jj_scan_token(LP)) return true;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_79()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(LSB)) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_55()) return true;
    if (jj_scan_token(SCOLON)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(STATIC)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_45()) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    if (jj_3R_71()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    if (jj_3R_44()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    }
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(GREATER)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(MODULO)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_135()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_128()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(LESSEREQ)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(LESSER)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(GREATEREQ)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(NOTEQUAL)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_110()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_74()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_112()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_82()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    if (jj_scan_token(LP)) return true;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    if (jj_3R_35()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_33()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_33()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    if (jj_3R_34()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_85()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_59()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(STRINGLITERAL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public DecafTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[69];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x2000,0xf170000,0x70000,0x70000,0x70000,0x170000,0x0,0xb000000,0x0,0x0,0x0,0xf000000,0x0,0xb000000,0xb000000,0x0,0x0,0xbe8ca00,0x1000,0x608000,0x880000,0xa00,0x0,0x0,0x0,0x0,0x0,0x608000,0x0,0x0,0x608000,0x608000,0x608000,0x608000,0x608000,0x608000,0x608000,0x608000,0x608000,0x0,0x0,0x608000,0x608000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x608000,0x0,0x608000,0x608000,0x0,0x0,0x608000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x4000,0x800,0x10000,0x0,0x800,0x0,0x0,0x4000,0x800,0x30822fe,0x0,0x30800fe,0x0,0x2000,0x7e,0x8000,0x800,0x800,0x0,0x30800fe,0x8000,0x8000,0x30800fe,0x30800fe,0x30800fe,0x30800fe,0x30800fe,0x30800fe,0x30800fe,0x30800fe,0x30800fe,0x800,0x800,0xfe,0x30800fe,0x8000,0x4000,0x10000,0x20000000,0x10000000,0x900000,0x900000,0x660000,0x660000,0x3000000,0x3000000,0x4c000000,0x4c000000,0x3080000,0x30800fe,0x8000,0x30800fe,0x30800fe,0x800,0x0,0x30800fe,0x880,0x880,0x8000,0x800,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x2,0x2,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x2,0x0,0x2,0x2,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[47];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Decaf(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Decaf(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DecafTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Decaf(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DecafTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Decaf(DecafTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DecafTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[100];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 69; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 100; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 47; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

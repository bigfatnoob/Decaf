/* Generated By:JJTree&JavaCC: Do not edit this line. Decaf.java */
package stage2;
import java.util.ArrayList;
import java.util.List;
public class Decaf/*@bgen(jjtree)*/implements DecafTreeConstants, DecafConstants {/*@bgen(jjtree)*/
  protected static JJTDecafState jjtree = new JJTDecafState();public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \u005c"1+(2+3)*var;\u005c" :");
    Decaf parser = new Decaf(System.in);
    try
    {
      List<Unit> units = parser.Start();
      for (Unit unit: units) {
        System.out.println("\u005cn");
      }
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

  static final public List<Unit> Start() throws ParseException {
  Unit classUnit = null;
  List<Unit> classUnitList = new ArrayList<Unit >();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      classUnit = Class();
                       classUnitList.add(classUnit);
    }
    jj_consume_token(0);
   {if (true) return classUnitList;}
    throw new Error("Missing return statement in function");
  }

  static final public Unit Class() throws ParseException {
  Unit classUnit = null;
  List<Unit> classFields = new ArrayList<Unit>();
  List<Unit> classFieldsCollection = new ArrayList<Unit>();
    jj_consume_token(CLASS);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      jj_consume_token(ID);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(LCB);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case BOOLEAN:
      case CHAR:
      case INT:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      classFields = Member();
                            classFieldsCollection.addAll(classFields);
    }
        classUnit = new Unit();
        // Symbol table insertion to be performed
        {if (true) return classUnit;}
    jj_consume_token(RCB);
    throw new Error("Missing return statement in function");
  }

  static final public List<Unit> Member() throws ParseException {
  Unit member = null;
  List<Unit> memberList = null;
  List<Unit> allMembers = new ArrayList<Unit>();
    Field();
    memberList = Field();
                       allMembers.addAll(memberList); {if (true) return memberList;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Unit> Field() throws ParseException {
  FieldDetails fieldDetails = new FieldDetails();
  Modifier modifier = null;
  List<Unit> fieldList = null;
    modifier = Modifier();
                        fieldDetails.setModifier(modifier);
    fieldList = FieldDeclarations(fieldDetails);
                                              {if (true) return fieldList;}
    throw new Error("Missing return statement in function");
  }

  static final public Modifier Modifier() throws ParseException {
  Modifier modifier = new Modifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
            modifier.setScopePublic(true);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
                                                      modifier.setScopePrivate(true);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
                                                                                                   modifier.setScopeProtected(true);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
                                                                                                                                       {if (true) return modifier;}
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
            modifier.setScopeStatic(true);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
                                             {if (true) return modifier;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Unit> FieldDeclarations(FieldDetails fieldDetails) throws ParseException {
  SimpleNode type = null;
  List<Unit> variables = null;
    type = Type();
                fieldDetails.setType(type);
    variables = Variables(fieldDetails);
    jj_consume_token(SCOLON);
                                              {if (true) return variables;}
    throw new Error("Missing return statement in function");
  }

  static final public SimpleNode Type() throws ParseException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      t = jj_consume_token(INT);
              int_AST jjtn001 = new int_AST(JJTINT_AST);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
             {if (true) return jjtn001;}
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
                char_AST jjtn002 = new char_AST(JJTCHAR_AST);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
      try {
                jjtree.closeNodeScope(jjtn002, true);
                jjtc002 = false;
               {if (true) return jjtn002;}
      } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
      }
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
                   boolean_AST jjtn003 = new boolean_AST(JJTBOOLEAN_AST);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
      try {
                   jjtree.closeNodeScope(jjtn003, true);
                   jjtc003 = false;
                  {if (true) return jjtn003;}
      } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
      }
      break;
    case ID:
      t = jj_consume_token(ID);
             id_AST jjtn004 = new id_AST(JJTID_AST);
             boolean jjtc004 = true;
             jjtree.openNodeScope(jjtn004);
      try {
             jjtree.closeNodeScope(jjtn004, true);
             jjtc004 = false;
            {if (true) return jjtn004;}
      } finally {
             if (jjtc004) {
               jjtree.closeNodeScope(jjtn004, true);
             }
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public List<Unit> Variables(FieldDetails fieldDetails) throws ParseException {
  List<Unit> variables = new ArrayList<Unit>();
  Unit variable = null;
    variable = Variable(fieldDetails);
                                  variables.add(variable);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      variable = Variable(fieldDetails);
                                           variables.add(variable);
    }
                                                                       {if (true) return variables;}
    throw new Error("Missing return statement in function");
  }

  static final public Unit Variable(FieldDetails fieldDetails) throws ParseException {
  VariableUnit variable = new VariableUnit();
  String variableName = null;
    variableName = ID();
                      variable.setName(variableName);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(LSB);
      jj_consume_token(RSB);
                                                                  variable.setArray(true);
    }
    variable.setType(fieldDetails.getType());
    variable.setModifier(fieldDetails.getModifier());
    {if (true) return variable;}
    // Symbol table insertion

    throw new Error("Missing return statement in function");
  }

  static final public String ID() throws ParseException {
  Token t;
    t = jj_consume_token(ID);
           {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public DecafTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x2000,0xb170000,0x70000,0x70000,0x100000,0xb000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x800,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Decaf(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Decaf(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DecafTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Decaf(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DecafTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Decaf(DecafTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DecafTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[100];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 100; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  MULTI = true;
  NODE_DEFAULT_VOID = true;
  NODE_PREFIX = "";
  STATIC = false;
  VISITOR = true;
  VISITOR_DATA_TYPE = "ScopeElement";
}

PARSER_BEGIN(Decaf)
package stage2;
import java.util.*;
import java.lang.*;
public class Decaf
{
  public static SymbolTable SYMBOL_TABLE = SymbolTable.getSymbolTable();
  /**
  * Mode = 0 represents scope construction
    Mode = 1 represents symbol table construction 
  */
  public static int MODE = 0;
  
  public static void main(String args []) throws Exception
  {
    Decaf parser;
    if (args.length == 1) {
      try {
        parser = new Decaf(new java.io.FileInputStream(args[0]));  
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File "+args[0]+ " not found," +
            " reading from terminal instead");
        parser = new Decaf(System.in);
      }
    } else {
      System.out.println("Reading from standard input...");
      parser =  new Decaf(System.in);
    }
    start_AST start = null;
    try
    {
      /**
      *Parser and Symbol Table Generator
      */
      start = parser.Start();
      System.out.println("Parsed Successfully.");
      MODE = 1;

      /**
      *Symbol Table Verification
      */
      parser = new Decaf(new java.io.FileInputStream(args[0]));
      start = parser.Start();

      /**
      *TypeChecking
      */
      //ScopeFactory sf = ScopeFactory.getScopeFactory();
      /*for(String key: SYMBOL_TABLE.getTable().keySet()) {
        System.out.println(SYMBOL_TABLE.getTable().get(key));      }*/
      //start.dump(" -> ");
    }
    catch (Exception e)
    {
      System.out.println("ERROR : " + e.getMessage());
      throw e;
    }
    
  }
}

PARSER_END(Decaf)

SKIP :  /* Whitespace */
{
  " "
| "\r"
| "\t"
| "\n"
| <"//"(~["\n","\r"])*("\n"|"\r"|"\n\r")>   // Single Line Comment
| <"/*">: CMNT_BODY                         // Multi Line Comment
}

<CMNT_BODY>
SKIP:
{
  <"*/">: DEFAULT
| <~[]>
}



TOKEN : 
{
  /* Keywords */
  < BREAK : "break">
| < CLASS : "class">
| < CONTINUE : "continue">
| < ELSE : "else">
| < EXTENDS : "extends">
| < IF : "if">
| < NEW : "new">
| < PRIVATE : "private">
| < PROTECTED : "protected">
| < PUBLIC : "public">
| < RETURN : "return">
| < STATIC : "static">
| < SUPER : "super">
| < THIS : "this">
| < WHILE : "while">
| < BOOLEAN : "boolean">
| < CHAR : "char" >
| < VOID : "void" >
| < INT : "int">
  /* Forbidden Keywords from JAVA */
| < ABSTRACT : "abstract">
| < BYTE : "byte">
| < CASE : "case">
| < CATCH : "catch">
| < CONST : "const">
| < DEFLT : "default">
| < DO : "do">
| < DOUBLE : "double">
| < FINAL : "final">
| < FINALLY : "finally">
| < FOR : "for">
| < IMPLEMENTS : "implements">
| < IMPORT : "import">
| < INSTANCEOF : "instanceof">
| < INTERFACE : "interface">
| < LONG : "long">
| < NATIVE : "native">
| < GOTO : "goto">
| < PACKAGE : "package">
| < SHORT : "short">
| < SWITCH : "switch">
| < SYNCHRONIZED : "synchronized">
| < THROW : "throw">
| < THROWS : "throws">
| < TRANSIENT : "transient">
| < TRY : "try">
| < VOLATILE : "volatile">
  /* Reserved for possible future extension */
| < BYVALUE : "byvalue">
| < CAST : "cast">
| < FUTURE : "future">
| < GENERIC : "generic">
| < INNER : "inner">
| < NONE : "none">
| < OPERATOR : "operator">
| < OUTER : "outer">
| < REST : "rest">
| < VAR : "var">
  /* Literals */
| < INTEGER: "0"|(["1"-"9"](["0"-"9"])*)>
| < TRUE: "true" >
| < FALSE: "false" >
// TODO verify character definition
//| < CHARLITERAL: "'"(~["'", "\\"])|("\\"["a"-"z", "A"-"Z", "0"-"9"])|(" ")"'">
| < CHARLITERAL: "'"((~["'", "\\"])|" "|("\\t")|("\\n"))"'">
| < STRINGLITERAL: "\""((~["\"","\n","\r"])|("\\\""))*"\"">
| < NULL: "null">
  /* Punctuation */
| < LP: "(" >
| < RP: ")" >
| < LCB: "{" >
| < RCB: "}" >
| < LSB: "[" >
| < RSB: "]" >
| < SCOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
  /* Operators */
| < ASSIGN: "=" >
| < GREATER: ">" >
| < LESSER: "<" >
| < NOT: "!" >
| < EQUAL: "==" >
| < GREATEREQ: ">=" >
| < LESSEREQ: "<=" >
| < NOTEQUAL: "!=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < AND: "&&">
| < OR: "||">
| < MODULO: "%">
  /* Identifiers */
| < #Let : ["a"-"z", "A"-"Z"]>
| < #Dig : ["0"-"9"]>
| < ID: ("$"|"_"|<Let>)("$"|"_"|<Let>|<Dig>)*>
| < EMPTY : ""> : MATCH_NON_EMPTY
}

< MATCH_NON_EMPTY>
TOKEN:
{
  <NON_EMPTY : ~[]>
}

String ID():
{
  Token t;
}
{
  t = <ID>{return t.image;}
}

start_AST Start() #start_AST:
{
  Unit classUnit = null;
  List<Unit> classUnitList = new ArrayList<Unit >();
}
{
  {SYMBOL_TABLE.enterScope(true, MODE);
  if (MODE==0) {	  SYMBOL_TABLE.add("String", UnitType.CLASS);
	  SYMBOL_TABLE.add("IO", UnitType.CLASS);
	  SYMBOL_TABLE.add("Object", UnitType.CLASS);}
  }
  (classUnit = Class(){classUnitList.add(classUnit);})*
  {SYMBOL_TABLE.exitScope(MODE);}
  <EOF>
  {
    jjtThis.setClasses(classUnitList);
    return jjtThis;
  }
}

Unit Class():
{
  ClassUnit classUnit = null;
  ClassUnit superClassUnit = null;
  List<Unit> classFields = new ArrayList<Unit>();
  List<Unit> classFieldsCollection = new ArrayList<Unit>();
  String className = null;
  String superClassName = null;
}
{
  <CLASS> className = ID() (< EXTENDS > superClassName = ID())? 
    {
        if  (MODE == 0){
          /*classUnit = (ClassUnit)UnitFactory.generateUnit(UnitType.CLASS);
          classUnit.setName(className);*/
          classUnit = (ClassUnit) SYMBOL_TABLE.add(className, UnitType.CLASS);
        } else {
            IntegerMuted intBaseMuted = new IntegerMuted(-1);
		    classUnit = (ClassUnit) SYMBOL_TABLE.lookUp(className, UnitType.CLASS, intBaseMuted);
		    if (superClassName != null) {
		      IntegerMuted intMuted = new IntegerMuted(-1);
		      superClassUnit = (ClassUnit)SYMBOL_TABLE.lookUp(superClassName, UnitType.CLASS, intMuted);
		      if (superClassUnit == null){
		        throw new ParseException("Super class " + superClassName + " has not been declared.");		      }
		      classUnit.setSuperClass(superClassUnit);		    }
        }
    }
    <LCB>
    {SYMBOL_TABLE.enterScopeForUnit(classUnit,MODE);}
    (classFields = Member(){
        /*
        for (Unit memberUnit: classFields) {
          for (Unit existingUnit : classFieldsCollection) {
            if (existingUnit.getName().equals(memberUnit.getName())) {
             throw new ParseException(memberUnit.getName() + " already declared in  " + className);             }          }        }*/
        classFieldsCollection.addAll(classFields);
      })*
    {
      if (MODE == 0) {        classUnit.setMembersAndMethods(classFieldsCollection);
      }    }
    <RCB>
    {
      SYMBOL_TABLE.exitScope(MODE);
      return classUnit;    }
}

List<Unit> Member():
{
  Unit member = null;
  List<Unit> memberList = null;
  List<Unit> allMembers = new ArrayList<Unit>();
}
{
  LOOKAHEAD(10)
  memberList = Field(){allMembers.addAll(memberList); return allMembers;}
  |LOOKAHEAD(10)
  member = Method(){allMembers.add(member); return allMembers;}
  |LOOKAHEAD(10)
  member = Ctor(){
    MethodUnit cMember = (MethodUnit)member;
    cMember.setConstructor(true);
    allMembers.add(cMember); return allMembers;
  }
}

List<Unit> Field():
{
  FieldDetails fieldDetails = new FieldDetails();
  Modifier modifier = null;
  List<Unit> fieldList = null;
}
{
  modifier = Modifier(){fieldDetails.setModifier(modifier);}
  fieldList = FieldDeclarations(fieldDetails)
  {
    for(Unit fieldUnit: fieldList){
      VariableUnit vUnit = (VariableUnit) fieldUnit;
      vUnit.setLocalVariable(true);    }
    return fieldList;
  }
}

Modifier Modifier():
{
  Modifier modifier = new Modifier();
}
{
  (LOOKAHEAD(2)(<PUBLIC>{modifier.setScopePublic(true);}|<PRIVATE>{modifier.setScopePrivate(true);}|<PROTECTED>{modifier.setScopeProtected(true);})(<STATIC>{modifier.setScopeStatic(true);})
  |LOOKAHEAD(2)(<STATIC>{modifier.setScopeStatic(true);})(<PUBLIC>{modifier.setScopePublic(true);}|<PRIVATE>{modifier.setScopePrivate(true);}|<PROTECTED>{modifier.setScopeProtected(true);})
  |LOOKAHEAD(2)(<PUBLIC>{modifier.setScopePublic(true);}|<PRIVATE>{modifier.setScopePrivate(true);}|<PROTECTED>{modifier.setScopeProtected(true);})
  |LOOKAHEAD(2)(<STATIC>{modifier.setScopeStatic(true);}))?
  {return modifier;}
}

List<Unit> FieldDeclarations(FieldDetails fieldDetails):
{
  SimpleNode type = null;
  List<Unit> variables = null;
  boolean isArray = false;
  int arraySize = 0;
}
{
  type = Type(){
    jjtree.popNode();
    fieldDetails.setType(type);
  }
  (< LSB > < RSB >  {
    type.typeObj.isArray = true;
    type.typeObj.arraySize += 1;
    fieldDetails.isArray = true;
    fieldDetails.arraySize += 1;  })*
  variables = Variables(fieldDetails)<SCOLON>{return variables;}
}

SimpleNode Type():{
  Token t = null;
  ClassUnit varUnit = null;
}
{
  (t = <INT> {
    jjtThis.jjtSetValue("int");
    jjtThis.typeObj.name = "int";
    return jjtThis;
  } #int_AST 
  |t = <CHAR> {
    jjtThis.jjtSetValue("char");
    jjtThis.typeObj.name = "char";
    return jjtThis;
  } #char_AST
  |t = <BOOLEAN> {
    jjtThis.jjtSetValue("boolean");
    jjtThis.typeObj.name = "boolean";
    return jjtThis;
  } #boolean_AST
  |t = <ID> {
    IntegerMuted currentScope = new IntegerMuted(-1);
    if (MODE == 1){		varUnit = (ClassUnit) SYMBOL_TABLE.lookUp(t.image,UnitType.CLASS, currentScope);
		if (varUnit == null){
		  throw new ParseException(t.image + " has not been declared yet");		}
		varUnit.setType(jjtThis);
		jjtThis.jjtSetValue(t.image);
		jjtThis.typeObj.name = t.image;
		jjtThis.typeObj.isClass = true;
		jjtThis.setUnit(varUnit);
    }
    //System.out.println(jjtThis.jjtGetValue());
    return jjtThis;
  } #id_AST)
  }

List<Unit> Variables(FieldDetails fieldDetails):{
  List<Unit> variables = new ArrayList<Unit>();
  Unit variable = null;
}
{
  variable=Variable(fieldDetails){variables.add(variable);}
  (<COMMA> variable=Variable(fieldDetails){variables.add(variable);})*{return variables;}
}

Unit Variable(FieldDetails fieldDetails):{
  VariableUnit variable;
  String variableName = null;
}
{
  variableName = ID(){
    if (MODE == 0) {	    variable = (VariableUnit)SYMBOL_TABLE.add(variableName, UnitType.VARIABLE);
    } else {
        IntegerMuted intMuted = new IntegerMuted(-1);
        variable = (VariableUnit)SYMBOL_TABLE.lookUp(variableName, UnitType.VARIABLE, intMuted);    }
  }
  (<LSB><RSB>{variable.setArray(true);})*
  (<ASSIGN> #assignOperator_AST Expression()
    // TODO -- Store value of variable
  )?
  {
    if (MODE == 1) {
	    variable.setType(fieldDetails.getType());
	    variable.setModifier(fieldDetails.getModifier());
	    variable.setArray(fieldDetails.isArray);
	    variable.setArraySize(fieldDetails.arraySize);
    }
    return variable; 
  }
}

Unit Method():{
  MethodUnit methodUnit = new MethodUnit();
  Modifier modifier = null;
  SimpleNode type = null;
  List<Unit> formalArgs = null;
  String methodName = null;
  SimpleNode block = null;
  String functionName = null;
  boolean isArray = false;
}
{
  modifier = Modifier()
  
   
  ( type = Type() | < VOID > {type = jjtThis; }  #voidType_AST)//{methodUnit.setReturnType(type);}
  (< LSB > < RSB >  {
    type.typeObj.isArray = true;
    type.typeObj.arraySize+=1;  })*
  functionName = ID() {
    if (MODE == 0) {
	    methodUnit = (MethodUnit)SYMBOL_TABLE.add(functionName,UnitType.METHOD);
	    methodUnit.setModifier(modifier);
	    methodUnit.setName(functionName);
	    methodUnit.setReturnType(type);
   }  }
  <LP>
  { 
    SYMBOL_TABLE.enterScopeForUnit(methodUnit, MODE);  }
  ((formalArgs = FormalArgs()){
    if (MODE == 0){
        methodUnit.setFormalArgs(formalArgs);
    }
   })?
  <RP>
  {
    SYMBOL_TABLE.exitScope(MODE);
  }
  block = Block()  {
    methodUnit.setMethodBlock((block_AST)block);      }
  {return methodUnit;}
}

Unit Ctor():{
  MethodUnit methodUnit = new MethodUnit();
  Modifier modifier = null;
  List<Unit> formalArgs = null;
  Token t = null;
  String functionName = null;
  id_AST type = null;
  block_AST block = null;
}
{
  modifier = Modifier(){methodUnit.setModifier(modifier);}
  {
    type = jjtThis;  }#id_AST
  functionName = ID()
  <LP>
  {
    if (MODE == 0) {
       methodUnit = (MethodUnit)SYMBOL_TABLE.add(t.image,UnitType.METHOD);
       methodUnit.setName(functionName);
       methodUnit.setConstructor(true);
       methodUnit.setReturnType(type);
    } else {
      IntegerMuted intMuted = new IntegerMuted(-1);
      methodUnit = (MethodUnit)SYMBOL_TABLE.lookUp(t.image,UnitType.METHOD, intMuted);    }
   
    SYMBOL_TABLE.enterScopeForUnit(methodUnit,MODE);
  }
  (formalArgs = FormalArgs(){
    if (MODE == 0) {
      methodUnit.setFormalArgs(formalArgs);
    }
   })?
  <RP>
  {
    SYMBOL_TABLE.exitScope(MODE);
  }
  block = Block()
  {
    methodUnit.setMethodBlock((block_AST)block);    
  }
  {return methodUnit;}
}

List<Unit> FormalArgs():
{
  Unit formalArg = null;
  List<Unit> formalArgs = new ArrayList<Unit>();
}
{
  formalArg = FormalArg(){formalArgs.add(formalArg);}
  (<COMMA> formalArg = FormalArg(){formalArgs.add(formalArg);})*
  {return formalArgs;}
}

Unit FormalArg():{
  FieldDetails fieldDetails = new FieldDetails();
  Unit formalArg = null;
  SimpleNode type = null;
  boolean isArray = false;
  int arraySize = 0;
}
{
  type = Type()
  (< LSB > < RSB >  {
    isArray = true;
    arraySize += arraySize;  })*
  {
    fieldDetails.isArray = true;
    fieldDetails.arraySize = arraySize;
    type.typeObj.isArray = true;
    type.typeObj.arraySize = arraySize;
    fieldDetails.setType(type);
  }
  formalArg = Variable(fieldDetails){return formalArg;}
}

block_AST Block() #block_AST:{
  List<SimpleNode> stmts = new ArrayList<SimpleNode>();
  SimpleNode stmt = null;
}
{
  <LCB>
  {
    SYMBOL_TABLE.enterScope(false, MODE);
  }
  (stmt = Statement(){stmts.add(stmt);})*
  <RCB>
  {
    jjtThis.setStatements(stmts);
    SYMBOL_TABLE.exitScope(MODE);
    return jjtThis;
  }
}

SimpleNode Statement():{
  SimpleNode ifStat = null;
  SimpleNode elseStat = null;
  binaryExpression_AST expr = null;
  SimpleNode body = null;
  List<Unit> variables = null;
}
{
  LOOKAHEAD(3)(<IF> <LP> expr = Expression() <RP> ifStat = Statement() (LOOKAHEAD(1) <ELSE> elseStat = Statement())? {
    jjtThis.ifStat = ifStat;
    jjtThis.elseStat = elseStat;
    jjtThis.condition = expr;
    return jjtThis;
   }) #ifThenElseStat_AST
  |(<WHILE> <LP> expr = Expression() <RP> body = Statement() {
     jjtThis.condition = expr;
     jjtThis.body = body;
     return jjtThis;
  }) #whileStat_AST
  |(<RETURN> (expr = Expression())? <SCOLON> {
    jjtThis.expr = expr;
    return jjtThis;
  })#returnStat_AST
  |LOOKAHEAD(3)( body = StatementExpression() <SCOLON> {
    jjtThis.expressionStat = body;
    return jjtThis;
  }) #expressionStat_AST // Add to Statements attributes
  |LOOKAHEAD(3)( variables = FieldDeclarations(new FieldDetails()) {
    jjtThis.variables = variables;
    return jjtThis;
  }) #varDeclStat_AST // Add to Statements attributes
  |LOOKAHEAD(3)(Block() {return jjtThis;}) #block_AST
  |(<BREAK> <SCOLON> {return jjtThis;})#breakStat_AST
  |(<CONTINUE> <SCOLON> {return jjtThis;})#continueStat_AST
  |(<SCOLON> {return jjtThis;})#emptyStat_AST
}

SimpleNode Literal():{
    Token t = null;
}
{
  <NULL>
  {
    jjtThis.typeObj.name="null";
    return jjtThis;
  } #nullExpr_AST
  |<TRUE>  {
    jjtThis.typeObj.name="boolean";
    jjtThis.value = true;
    return jjtThis;  } #boolExpr_AST
  |<FALSE>
  {
    jjtThis.typeObj.name="boolean";
    jjtThis.value = false;
    return jjtThis;
  } #boolExpr_AST
  |t = <INTEGER>{
    jjtThis.typeObj.name="int";
    jjtThis.value = Integer.parseInt(t.image);
    return jjtThis;
  } #intExpr_AST
  |t = <CHARLITERAL>{
    jjtThis.typeObj.name="char";
    jjtThis.value = t.image.charAt(0);
    return jjtThis;
  } #charExpr_AST
  |t = <STRINGLITERAL>{
    jjtThis.typeObj.name="String";
    jjtThis.typeObj.isClass=true;
    jjtThis.value = t.image;
    return jjtThis;
  } #stringExpr_AST
}

SimpleNode StatementExpression():{
    SimpleNode statExpr = null;
}
{
  LOOKAHEAD(10)
  statExpr = MethodCall()
  |LOOKAHEAD(10)
  statExpr = Assignment()
  |LOOKAHEAD(10)
  statExpr = Expression()
  {
    return statExpr;  }
}

assignOperator_AST Assignment():{}
{
  (FieldAccess() <ASSIGN>  Expression()  {
    return jjtThis;  })#assignOperator_AST
}

void FieldAccess():{}
{
  FieldAccess_1()(MethodPrime())? 
} 

void FieldAccess_1():{}
{
  LOOKAHEAD(6)
  (PrimaryFieldAccess() <DOT> <ID> #fieldExpr_AST) ((<LSB> Expression() <RSB> {jjtThis.size += 1;})+ #arrayExpr_AST)
  | LOOKAHEAD(6)
  PrimaryFieldAccess() <DOT> <ID> #fieldExpr_AST
  | LOOKAHEAD(6)
  (<ID> #idExpr_AST) ((<LSB> Expression() <RSB> {jjtThis.size += 1;})+ #arrayExpr_AST) 
  | <ID> #idExpr_AST
}

SimpleNode PrimaryFieldAccess():{
  SimpleNode primaryFieldAccess = null;
  Token id = null;
  List< binaryExpression_AST> args = null;
}
{
  (LOOKAHEAD(3) primaryFieldAccess = Literal()
  | LOOKAHEAD(3) <THIS>  {
    primaryFieldAccess = jjtThis;  }#thisExpr_AST
  | LOOKAHEAD(3) <SUPER>  {
    primaryFieldAccess = jjtThis;  }#superExpr_AST
  | LOOKAHEAD(3) <LP> primaryFieldAccess = Expression() <RP>
  | LOOKAHEAD(3) <NEW> <ID> <LP> (ActualArguments())? <RP>  {
    jjtThis.name = id.image;
  	IntegerMuted intBaseMuted = new IntegerMuted(-1);
  	ClassUnit classUnit = (ClassUnit) SYMBOL_TABLE.lookUp(id.image, UnitType.CLASS, intBaseMuted);
  	jjtThis.arguments =  args;
  	if (classUnit == null) {
    	throw new ParseException("Class " + id.image + " has not been declared.");
  	}
  	jjtThis.classUnit = classUnit;
  	primaryFieldAccess = jjtThis;  }#newClassExpr_AST)  {
    return primaryFieldAccess;  }
 
}

methodCall_AST MethodCall() :{
	methodCall1_AST m1 = null;
	methodCall2_AST m2 = null;
}
{
  m1 = MethodCall_1() (m2 = MethodCall_2())?
  {
    jjtThis.m1 = m1;
    jjtThis.m2 = m2;    return jjtThis;
  } #methodCall_AST
}

methodCall1_AST MethodCall_1():{
  methodParent_AST mParent = null;
  methodPrime_AST mPrime = null;
  List<binaryExpression_AST> actualArgs = null;
}
{
  mParent = MethodParent() (mPrime = MethodPrime())? <LP>(actualArgs = ActualArguments())?<RP>
  {
    jjtThis.mParent = mParent;
    jjtThis.mPrime = mPrime;
    jjtThis.actualArgs = actualArgs;    return jjtThis;
  } #methodCall1_AST
}

methodCall2_AST MethodCall_2():{
	Token id = null;
	List<binaryExpression_AST> actualArgs = null;
	methodCall2_AST m2 = null;
	binaryExpression_AST arrayIndex = null;
	methodPrime_AST mPrime = null;
}
{
  (LOOKAHEAD(5)<DOT> id = <ID> <LP> (actualArgs = ActualArguments())? <RP> #methodExpr_AST m2 = MethodCall_2()
  | LOOKAHEAD(5)
    <DOT> id = <ID> <LSB> arrayIndex = Expression() <RSB> <LP> (actualArgs = ActualArguments())? <RP> m2 = MethodCall_2()
  | LOOKAHEAD(5)
    <DOT> id = <ID> mPrime = MethodPrime() <LP> (actualArgs = ActualArguments())? <RP> m2 = MethodCall_2()
  | LOOKAHEAD(5)
    <DOT> id = <ID> <LSB> arrayIndex = Expression() <RSB> mPrime = MethodPrime() <LP> (actualArgs = ActualArguments())? <RP> m2 = MethodCall_2()
  | LOOKAHEAD(5)
    <DOT> id = <ID> <LP> (actualArgs = ActualArguments())? <RP>
  | LOOKAHEAD(5)
    <DOT> id = <ID> <LSB> arrayIndex = Expression() <RSB> <LP> (actualArgs = ActualArguments())? <RP>
  | LOOKAHEAD(5)
    <DOT> id = <ID> mPrime = MethodPrime() <LP> (actualArgs = ActualArguments())? <RP>
  | LOOKAHEAD(5)
    <DOT> id = <ID> <LSB> arrayIndex = Expression() <RSB> mPrime = MethodPrime() <LP> (actualArgs = ActualArguments())? <RP>)    {
      jjtThis.name = id.image;
      jjtThis.actualArgs = actualArgs;
      jjtThis.m2 = m2;
      jjtThis.arrayIndex = arrayIndex;
      jjtThis.mPrime = mPrime;
      return jjtThis;    }#methodCall2_AST
}

methodParent_AST MethodParent():{
	SimpleNode primaryMethodParent = null;
	Token id = null;
	binaryExpression_AST arrayIndex = null;
}
{
  ((primaryMethodParent = PrimaryMethodParent() <DOT> id = <ID> #fieldExpr_AST)  (<LSB> arrayIndex = Expression() <RSB> #arrayExpr_AST)? 
  | (id = <ID> #idExpr_AST) (<LSB> arrayIndex = Expression() <RSB> #arrayExpr_AST)?)	{
	  jjtThis.primaryMethodParent = primaryMethodParent;
	  jjtThis.name = id.image;
	  jjtThis.arrayIndex = arrayIndex;
	  return jjtThis;	}#methodParent_AST

}

SimpleNode PrimaryMethodParent():{
	SimpleNode primaryMethodParent = null;
	Token id = null;
	List< binaryExpression_AST> args = null;
}
{
  (LOOKAHEAD(3)
    primaryMethodParent = Literal()
  | LOOKAHEAD(3)
    <THIS>    {
      primaryMethodParent = jjtThis;    }#thisExpr_AST
  | LOOKAHEAD(3)
    <SUPER>    {
      primaryMethodParent = jjtThis;    }#superExpr_AST
  | LOOKAHEAD(3)
    <LP> primaryMethodParent = Expression() <RP>
  | LOOKAHEAD(3)
    (<NEW> id =<ID> <LP> (args = ActualArguments())? <RP>    {
      jjtThis.name = id.image;
      IntegerMuted intBaseMuted = new IntegerMuted(-1);
      ClassUnit classUnit = (ClassUnit) SYMBOL_TABLE.lookUp(id.image, UnitType.CLASS, intBaseMuted);
      jjtThis.arguments =  args;
      if (classUnit == null) {
        throw new ParseException("Class " + id.image + " has not been declared.");
      }
      jjtThis.classUnit = classUnit;
      primaryMethodParent = jjtThis;    })#newClassExpr_AST)    {
      return primaryMethodParent;    }
}

methodPrime_AST MethodPrime():{
	methodPrime_AST mPrime = null;
	Token id = null;
	binaryExpression_AST arrayIndex = null;
}
{
  (LOOKAHEAD (3)
    <DOT> id = <ID> #fieldExpr_AST mPrime = MethodPrime()
  | LOOKAHEAD(3)
    <DOT> id = <ID> #fieldExpr_AST <LSB> arrayIndex = Expression() <RSB> #arrayExpr_AST mPrime = MethodPrime()
  | LOOKAHEAD(3) <DOT> id = <ID> #fieldExpr_AST <LSB> arrayIndex = Expression() <RSB> #arrayExpr_AST
  | <DOT> id = <ID> #fieldExpr_AST)  {
    jjtThis.name = id.image;
    jjtThis.mPrime = mPrime;
    jjtThis.arrayIndex = arrayIndex;
    return jjtThis;  }#methodPrime_AST
}

List<binaryExpression_AST> ActualArguments():{
    List<binaryExpression_AST> expressions = new ArrayList<binaryExpression_AST>();
    binaryExpression_AST expression = null;
}
{
  expression = Expression()  {
    expressions.add(expression);  } (<COMMA> expression = Expression()  {
    expressions.add(expression);  })*  {    return expressions;
  }
}

// Same as OR operation since it has lowest precedence
binaryExpression_AST Expression():{
    andOperator_AST lhs = null;
    binaryExpression_AST rhs = null;
}
{
  (lhs = AndExpression() (LOOKAHEAD(1) <OR> rhs = Expression())?  {
    jjtThis.lhs = lhs;
    jjtThis.rhs = rhs; 
    return jjtThis;
  })  #binaryExpression_AST
}


andOperator_AST AndExpression():{
  equality_AST equalityExpr =null;
  andOperator_AST andExpr = null;
}
{
  (equalityExpr = EqualityExpression() (LOOKAHEAD(1) <AND> andExpr = AndExpression())?  {
    jjtThis.lhs = equalityExpr;
    jjtThis.rhs = andExpr;
    return jjtThis;  })  #andOperator_AST
  /*(LOOKAHEAD(10)
  EqualityExpression() <AND> #andOperator_AST AndExpression()
  | LOOKAHEAD(10) EqualityExpression()) #binaryExpression_AST(>1)*/
}

equality_AST EqualityExpression():{}
{
  (RelationalExpression() (LOOKAHEAD(1)(LOOKAHEAD(1) (<EQUAL> EqualityExpression())
  | LOOKAHEAD(1) (<NOTEQUAL> EqualityExpression())))?  {
    return jjtThis;  }) #equality_AST
  /*(LOOKAHEAD(10)
  RelationalExpression() <EQUAL> #equalOperator_AST EqualityExpression()
  | LOOKAHEAD(10) RelationalExpression()) #binaryExpression_AST(>1)*/
}

relational_AST RelationalExpression():{}
{
  (SumExpression() (LOOKAHEAD(1)(LOOKAHEAD(1) (<GREATER> RelationalExpression())
  | LOOKAHEAD(1) (<GREATEREQ> RelationalExpression())
  | LOOKAHEAD(1) (<LESSER>  RelationalExpression())
  | LOOKAHEAD(1) (<LESSEREQ> RelationalExpression())))?  {
    return jjtThis;  }) #relational_AST
  /*(LOOKAHEAD(10) SumExpression() <GREATER> #greaterOperator_AST RelationalExpression()
  |LOOKAHEAD(10) SumExpression() <GREATEREQ> #greaterEqualOperator_AST RelationalExpression()
  |LOOKAHEAD(10) SumExpression() <LESSER> #lesserOperator_AST RelationalExpression()
  |LOOKAHEAD(10) SumExpression() <LESSEREQ> #lesserEqualOperator_AST RelationalExpression()
  |LOOKAHEAD(10) SumExpression()) #binaryExpression_AST(>1)*/
}

sum_AST SumExpression():{}
{
  (FactorExpression() (LOOKAHEAD(1)(LOOKAHEAD(1)(<PLUS> SumExpression())
  | LOOKAHEAD(1)( <MINUS> SumExpression())))?  {
    return jjtThis;  }
  ) #sum_AST(>1)
  /*
  (LOOKAHEAD(10) FactorExpression() <PLUS> #plusOperator_AST SumExpression()
  |LOOKAHEAD(10) FactorExpression() <MINUS> #minusOperator_AST SumExpression()
  |LOOKAHEAD(10) FactorExpression())#binaryExpression_AST(>1)*/
}

factor_AST FactorExpression():{}
{
  (UnaryExpression() (LOOKAHEAD(1)(LOOKAHEAD(1)( <MULTIPLY> FactorExpression())
  | LOOKAHEAD(1)( <DIVIDE> FactorExpression())
  | LOOKAHEAD(1)( <MODULO> FactorExpression())))?  {
    return jjtThis;  }) #factor_AST(>1)
  /*
  (LOOKAHEAD(10) UnaryExpression() <MULTIPLY> #multiplyOperator_AST FactorExpression()
  |LOOKAHEAD(10) UnaryExpression() <DIVIDE> #divideOperator_AST FactorExpression()
  |LOOKAHEAD(10) UnaryExpression())#binaryExpression_AST(>1)*/
}

unary_AST UnaryExpression():{
	binaryExpression_AST expression = null;
	Token sign = null;
	SimpleNode primary = null;
}
{
  ((((token = <PLUS> | token = <MINUS> | token = <NOT> ) expression = Expression()  {
    jjtThis.sign = token;
    jjtThis.expr = expression;  })
  | (primary = Primary())  {
    jjtThis.primary = primary;  })  {
    return jjtThis;  }) #unary_AST
}

SimpleNode Primary(): {
	primaryExisting_AST primaryExist = null;
	newArray_AST newArray = null;
}
{
  LOOKAHEAD(5) (primaryExist = PrimaryExisting()  {
    return primaryExist;  })
  | LOOKAHEAD(5) (newArray = NewArray())  {
      return newArray;  }
}

primaryExisting_AST PrimaryExisting(): {
    SimpleNode p1 = null;
    primaryExisiting2_AST p2 = null;
}
{
  (p1 = PrimaryExisting_1()  (p2 = PrimaryExisting_2())?  {
    jjtThis.p1 = p1;
    jjtThis.p2 = p2;
    return jjtThis;  }) #primaryExisting_AST
}

SimpleNode PrimaryExisting_1():{
  Token t = null;
  List<binaryExpression_AST> arguments = null;
  List<binaryExpression_AST> arrayIndices = new ArrayList<binaryExpression_AST>();
  binaryExpression_AST arrayExpr = null;
  int size = 0;
}
{
  LOOKAHEAD(3)
    Literal()    {
      return jjtThis;    }#literal_AST
  | LOOKAHEAD(3)
    <THIS>    {
      return jjtThis;    }#thisExpr_AST
  | LOOKAHEAD(3)
    <SUPER> {
      return jjtThis;
    }#superExpr_AST
  | LOOKAHEAD(3)
    <LP> Expression() <RP> {
      return jjtThis;
    } #binaryExpression_AST
  | LOOKAHEAD(3)
    (<NEW> t = <ID> <LP> (arguments = ActualArguments())? <RP>    {
      jjtThis.name = t.image;
      IntegerMuted intBaseMuted = new IntegerMuted(-1);
      ClassUnit classUnit = (ClassUnit) SYMBOL_TABLE.lookUp(t.image, UnitType.CLASS, intBaseMuted);
      jjtThis.arguments =  arguments;
      if (classUnit == null) {
        throw new ParseException("Class " + t.image + " has not been declared.");      }
      jjtThis.classUnit = classUnit;
      return jjtThis;    }) #newClassExpr_AST
  | LOOKAHEAD(3)
    (t = <ID>  <LP> (arguments = ActualArguments())? <RP>    {
      jjtThis.name = t.image;
      IntegerMuted intBaseMuted = new IntegerMuted(-1);
      MethodUnit methodUnit = (MethodUnit) SYMBOL_TABLE.lookUp(t.image, UnitType.METHOD, intBaseMuted);
      jjtThis.arguments =  arguments;
      if (methodUnit == null) {
        throw new ParseException("Method " + t.image + " has not been defined.");
      }
      jjtThis.methodUnit = methodUnit;
      return jjtThis;    }) #methodExpr_AST
  | LOOKAHEAD(3)
    (t = <ID> (<LSB> arrayExpr = Expression() <RSB>    {
      size = size + 1;
      arrayIndices.add(arrayExpr);    })+    {
      jjtThis.name = t.image;
      jjtThis.size = size;
      jjtThis.arrayIndices = arrayIndices;
      IntegerMuted intBaseMuted = new IntegerMuted(-1);
      VariableUnit variableUnit = (VariableUnit) SYMBOL_TABLE.lookUp(t.image, UnitType.VARIABLE, intBaseMuted);
      if (variableUnit == null) {
        throw new ParseException("Variable " + t.image + " has not been defined.");
      }
      jjtThis.variableUnit = variableUnit;
      return jjtThis;    }) #arrayExpr_AST
  | t = <ID>  {
    jjtThis.name = t.image;
    IntegerMuted intBaseMuted = new IntegerMuted(-1);
    VariableUnit variableUnit = (VariableUnit) SYMBOL_TABLE.lookUp(t.image, UnitType.VARIABLE, intBaseMuted);
    if (variableUnit == null) {
	  throw new ParseException("Variable " + t.image + " has not been defined.");
	}
    jjtThis.variableUnit = variableUnit;
    return jjtThis;
  } #idExpr_AST
}
 
primaryExisiting2_AST PrimaryExisting_2():{
    Token t = null;
    List<binaryExpression_AST> args = null;
    binaryExpression_AST arrayExpression = null;
    primaryExisiting2_AST p2 = null;
}
{
    ((<DOT> t = <ID> #fieldExpr_AST) ((<LP> (args = ActualArguments())? <RP> #methodExpr_AST)
    | (<LSB> arrayExpression = Expression() <RSB> #arrayExpr_AST))? (p2 = PrimaryExisting_2())?    {
      jjtThis.attribute = t.image;
      jjtThis.arguments = args;
      jjtThis.arrayExpression = arrayExpression;
      jjtThis.p2 = p2;
      return jjtThis;    }) #primaryExisiting2_AST  
    
    /*LOOKAHEAD(5)  
      < DOT > <ID > <LP> (ActualArguments())? <RP> #methodExpr_AST PrimaryExisting_2()
    | LOOKAHEAD(5)
      < DOT > <ID > #fieldExpr_AST PrimaryExisting_2()
    | LOOKAHEAD(5)
      < DOT > <ID > <LSB> Expression() <RSB> #arrayExpr_AST PrimaryExisting_2()
    | LOOKAHEAD(3)
      < DOT > <ID > <LSB> Expression() <RSB> #arrayExpr_AST
    | LOOKAHEAD(3)
      < DOT > <ID > <LP> (ActualArguments())? <RP> #methodExpr_AST
    | < DOT > <ID > #fieldExpr_AST*/
}

newArray_AST NewArray():{
	SimpleNode type = null;
	List<binaryExpression_AST> arrayIndices = new ArrayList<binaryExpression_AST>();
	binaryExpression_AST arrayIndex  = null;
	int size  = 0;
}
{
  (<NEW> type = Type() (<LSB> arrayIndex = Expression() <RSB>  {
 	size = size + 1;
 	arrayIndices.add(arrayIndex);      })+  {
    type.typeObj.arraySize = size;
    type.typeObj.isArray = true;
    jjtThis.size = size;
    jjtThis.arrayIndices = arrayIndices;
    jjtThis.typeObj = type.typeObj;
    return jjtThis;  })#newArray_AST
}
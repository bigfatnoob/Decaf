/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  MULTI = true;
  NODE_DEFAULT_VOID = true;
  NODE_PREFIX = "";
}

PARSER_BEGIN(Decaf)
package stage2;

public class Decaf
{
  public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    Decaf parser = new Decaf(System.in);
    try
    {
      List<Unit> units = parser.Start();
      for (Unit unit: units) {
        System.out.println("\n");
      }
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(Decaf)

SKIP :  /* Whitespace */
{
  " "
| "\r"
| "\t"
| "\n"
| <"//"(~["\n","\r"])*("\n"|"\r"|"\n\r")>   // Single Line Comment
| <"/*">: CMNT_BODY                         // Multi Line Comment
}

<CMNT_BODY>
SKIP:
{
  <"*/">: DEFAULT
| <~[]>
}



TOKEN : 
{
  /* Keywords */
  < BREAK : "break">
| < CLASS : "class">
| < CONTINUE : "continue">
| < ELSE : "else">
| < EXTENDS : "extends">
| < IF : "if">
| < NEW : "new">
| < PRIVATE : "private">
| < PROTECTED : "protected">
| < PUBLIC : "public">
| < RETURN : "return">
| < STATIC : "static">
| < SUPER : "super">
| < THIS : "this">
| < WHILE : "while">
| < BOOLEAN : "boolean">
| < CHAR : "char" >
| < VOID : "void" >
| < INT : "int">
  /* Forbidden Keywords from JAVA */
| < ABSTRACT : "abstract">
| < BYTE : "byte">
| < CASE : "case">
| < CATCH : "catch">
| < CONST : "const">
| < DEFLT : "default">
| < DO : "do">
| < DOUBLE : "double">
| < FINAL : "final">
| < FINALLY : "finally">
| < FOR : "for">
| < IMPLEMENTS : "implements">
| < IMPORT : "import">
| < INSTANCEOF : "instanceof">
| < INTERFACE : "interface">
| < LONG : "long">
| < NATIVE : "native">
| < GOTO : "goto">
| < PACKAGE : "package">
| < SHORT : "short">
| < SWITCH : "switch">
| < SYNCHRONIZED : "synchronized">
| < THROW : "throw">
| < THROWS : "throws">
| < TRANSIENT : "transient">
| < TRY : "try">
| < VOLATILE : "volatile">
  /* Reserved for possible future extension */
| < BYVALUE : "byvalue">
| < CAST : "cast">
| < FUTURE : "future">
| < GENERIC : "generic">
| < INNER : "inner">
| < NONE : "none">
| < OPERATOR : "operator">
| < OUTER : "outer">
| < REST : "rest">
| < VAR : "var">
  /* Literals */
| < INTEGER: "0"|(["1"-"9"](["0"-"9"])*)>
| < TRUE: "true" >
| < FALSE: "false" >
// TODO verify character definition
//| < CHARLITERAL: "'"(~["'", "\\"])|("\\"["a"-"z", "A"-"Z", "0"-"9"])|(" ")"'">
| < CHARLITERAL: "'"((~["'", "\\"])|" "|("\\t")|("\\n"))"'">
| < STRINGLITERAL: "\""((~["\"","\n","\r"])|("\\\""))*"\"">
| < NULL: "null">
  /* Punctuation */
| < LP: "(" >
| < RP: ")" >
| < LCB: "{" >
| < RCB: "}" >
| < LSB: "[" >
| < RSB: "]" >
| < SCOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
  /* Operators */
| < ASSIGN: "=" >
| < GREATER: ">" >
| < LESSER: "<" >
| < NOT: "!" >
| < EQUAL: "==" >
| < GREATEREQ: ">=" >
| < LESSEREQ: "<=" >
| < NOTEQUAL: "!=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < AND: "&&">
| < OR: "||">
| < MODULO: "%">
  /* Identifiers */
| < #Let : ["a"-"z", "A"-"Z"]>
| < #Dig : ["0"-"9"]>
| < ID: ("$"|"_"|<Let>)("$"|"_"|<Let>|<Dig>)*>
| < EMPTY : ""> : MATCH_NON_EMPTY
}

< MATCH_NON_EMPTY>
TOKEN:
{
  <NON_EMPTY : ~[]>
}

String ID():
{
  Token t;
}
{
  t = <ID>{return t.image;}
}

List<Unit> Start():
{
  Unit classUnit = null;
  List<Unit> classUnitList = new ArrayList<Unit >();
}
{
  (classUnit = Class(){classUnitList.add(classUnit);})*<EOF>
  {return classUnitList;}
}

Unit Class():
{
  Unit classUnit = null;
  List<Unit> classFields = new ArrayList<Unit>();
  List<Unit> classFieldsCollection = new ArrayList<Unit>();
}
{
  <CLASS> <ID> (< EXTENDS > < ID>)? <LCB>
    (classFields = Member(){classFieldsCollection.addAll(classFields);})*
    {
        classUnit = new Unit();
        // Symbol table insertion to be performed
        return classUnit;
    }
   <RCB>
}

List<Unit> Member():
{
  Unit member = null;
  List<Unit> memberList = null;
  List<Unit> allMembers = new ArrayList<Unit>();
}
{
  LOOKAHEAD(Field())
  memberList = Field(){allMembers.addAll(memberList); return memberList;}
  |LOOKAHEAD(Method())
  member = Method(){allMembers.add(member); return memberList;}
  |LOOKAHEAD(Ctor())
  member = Ctor(){allMembers.add(member); return memberList;}
}

List<Unit> Field():
{
  FieldDetails fieldDetails = new FieldDetails();
  Modifier modifier = null;
  List<Unit> fieldList = null;
}
{
  modifier = Modifier(){fieldDetails.setModifier(modifier);}
  fieldList = FieldDeclarations(fieldDetails){return fieldList;}
}

Modifier Modifier():
{
  Modifier modifier = new Modifier();
}
{
  (<PUBLIC>{modifier.setScopePublic(true);}|<PRIVATE>{modifier.setScopePrivate(true);}|<PROTECTED>{modifier.setScopeProtected(true);})?
  (<STATIC>{modifier.setScopeStatic(true);})? {return modifier;}
}

List<Unit> FieldDeclarations(FieldDetails fieldDetails):
{
  SimpleNode type = null;
  List<Unit> variables = null;
}
{
  type = Type(){fieldDetails.setType(type);}
  variables = Variables(fieldDetails)<SCOLON>{return variables;}
}

SimpleNode Type():{
  Token t = null;
}
{
  t = <INT> {return jjtThis;}#int_AST
  |t = <CHAR> {return jjtThis;}#char_AST
  |t = <BOOLEAN> {return jjtThis;}#boolean_AST
  |t = <ID>{return jjtThis;}#id_AST
}

List<Unit> Variables(FieldDetails fieldDetails):{
  List<Unit> variables = new ArrayList<Unit>();
  Unit variable = null;
}
{
  variable=Variable(fieldDetails){variables.add(variable);}
  (<COMMA> variable=Variable(fieldDetails){variables.add(variable);})*{return variables;}
}

Unit Variable(FieldDetails fieldDetails):{
  VariableUnit variable = new VariableUnit();
  String variableName = null;
}
{
  variableName = ID(){variable.setName(variableName);}(<LSB><RSB>{variable.setArray(true);})*
  {
    variable.setType(fieldDetails.getType());
    variable.setModifier(fieldDetails.getModifier());
    return variable; 
    // Symbol table insertion
  }
}

Unit Method():{
  MethodUnit methodUnit = new MethodUnit();
  Modifier modifier = null;
  SimpleNode type = null;
  List<Unit> formalArgs = null;
  Token t = null;
}
{
  modifier = Modifier(){methodUnit.setModifier(modifier);} 
  ( type = Type() | < VOID > {type = jjtThis; } #voidType_AST){methodUnit.setReturnType(type);}
  ID() <LP> (formalArgs = FormalArgs()){methodUnit.setFormalArgs(formalArgs);}<RP>
  Block()//Handle Scoping here
  {return methodUnit;}
}

Unit Ctor():{
  MethodUnit methodUnit = new MethodUnit();
  Modifier modifier = null;
  List<Unit> formalArgs = null;
  Token t = null;
}
{
  modifier = Modifier(){methodUnit.setModifier(modifier);}
  ID()<LP>(formalArgs = FormalArgs(){methodUnit.setFormalArgs(formalArgs);})?<RP>
  Block()//Handle Scoping here
  {return methodUnit;}
}

List<Unit> FormalArgs():
{
  Unit formalArg = null;
  List<Unit> formalArgs = new ArrayList<Unit>();
}
{
  formalArg = FormalArg(){formalArgs.add(formalArg);}
  (<COMMA> formalArg = FormalArg(){formalArgs.add(formalArg);})*
  {return formalArgs;}
}

Unit FormalArg():{
  FieldDetails fieldDetails = new FieldDetails();
  Unit formalArg = null;
  SimpleNode type = null;
}
{
  type = Type(){fieldDetails.setType(type);}
  formalArg = Variable(fieldDetails){return formalArg;}
}

void Block() #block_AST:{
}
{
  <LCB>(Statement())*<RCB>
}

void Statement():{
}
{
  LOOKAHEAD(3)<IF> <LP> Expression() <RP> Statement() (LOOKAHEAD(1) <ELSE> Statement())? #ifThenElseStat_AST
  |<WHILE> <LP> Expression() <RP> Statement() #whileStat_AST
  |<RETURN> (Expression())? <SCOLON> #returnStat_AST
  |LOOKAHEAD(2) StatementExpression() <SCOLON> #expressionStat_AST // Add to Statements attributes
  |LOOKAHEAD(2) FieldDeclarations(new FieldDetails())#varDeclStat_AST // Add to Statements attributes
  |<BREAK> <SCOLON> #breakStat_AST
  |<CONTINUE> <SCOLON> #continueStat_AST
  |<SCOLON> #emptyStat_AST
}

void Literal():{}
{
  <NULL> #nullExpr_AST
  |<TRUE> #boolExpr_AST
  |<FALSE> #boolExpr_AST
  |<INTEGER> #intExpr_AST
  |<CHARLITERAL> #charExpr_AST
  |<STRINGLITERAL> #stringExpr_AST
}

void StatementExpression():{}
{
  LOOKAHEAD(FieldAccess() <ASSIGN>)
  Assignment()
  |
  MethodCall()
}

void Assignment():{}
{
  FieldAccess() <ASSIGN> #assignOperator_AST Expression()
}

void FieldAccess():{}
{
  FieldAccess_1()(MethodPrime())? 
}

void FieldAccess_1():{}
{
  LOOKAHEAD(PrimaryFieldAccess() <DOT> <ID> <LSB> Expression() <RSB>)
  PrimaryFieldAccess() <DOT> <ID> #fieldExpr_AST <LSB> Expression() <RSB> #arrayExpr_AST
  | LOOKAHEAD(PrimaryFieldAccess() <DOT> <ID>)
  PrimaryFieldAccess() <DOT> <ID> #fieldExpr_AST
  | LOOKAHEAD(<ID> <LSB> Expression() <RSB>)
  <ID> #idExpr_AST <LSB> Expression() <RSB> #arrayExpr_AST 
  | <ID> #idExpr_AST
}

void PrimaryFieldAccess():{}
{
  LOOKAHEAD(MethodCall()) 
  MethodCall()
  | LOOKAHEAD(3) Literal()
  | LOOKAHEAD(3) <THIS> #thisExpr_AST
  | LOOKAHEAD(3) <SUPER> #superExpr_AST
  | LOOKAHEAD(3) <LP> Expression() <RP>
  | LOOKAHEAD(3) <NEW> <ID> <LP> (ActualArguments())? <RP> #newClassExpr_AST
}

void MethodCall() #methodCall_AST:{}
{
  LOOKAHEAD(MethodCall_1() MethodCall_2())
  MethodCall_1() MethodCall_2()
  | LOOKAHEAD(MethodCall_1())
  MethodCall_1()
}

void MethodCall_1() #methodCall_AST:{}
{
  MethodParent() (MethodPrime())? <LP>(ActualArguments())?<RP>
}

void MethodCall_2():{}
{
  LOOKAHEAD(<DOT> <ID> <LP> (ActualArguments())? <RP> MethodCall_2())<DOT> <ID> <LP> (ActualArguments())? <RP> #AstMethodExpr MethodCall_2()
  | LOOKAHEAD(<DOT> <ID> <LSB> Expression() <RSB> <LP> (ActualArguments())? <RP> MethodCall_2())
    <DOT> <ID> <LSB> Expression() <RSB> <LP> (ActualArguments())? <RP> MethodCall_2()
  | LOOKAHEAD(<DOT> <ID> MethodPrime() <LP> (ActualArguments())? <RP> MethodCall_2())
    <DOT> <ID> MethodPrime() <LP> (ActualArguments())? <RP> MethodCall_2()
  | LOOKAHEAD(<DOT> <ID> <LSB> Expression() <RSB> MethodPrime() <LP> (ActualArguments())? <RP> MethodCall_2())
    <DOT> <ID> <LSB> Expression() <RSB> MethodPrime() <LP> (ActualArguments())? <RP> MethodCall_2()
  | LOOKAHEAD(<DOT> <ID> <LP> (ActualArguments())? <RP>)
    <DOT> <ID> <LP> (ActualArguments())? <RP>
  | LOOKAHEAD(<DOT> <ID> <LSB> Expression() <RSB> <LP> (ActualArguments())? <RP>)
    <DOT> <ID> <LSB> Expression() <RSB> <LP> (ActualArguments())? <RP>
  | LOOKAHEAD(<DOT> <ID> MethodPrime() <LP> (ActualArguments())? <RP>)
    <DOT> <ID> MethodPrime() <LP> (ActualArguments())? <RP>
  | LOOKAHEAD(<DOT> <ID> <LSB> Expression() <RSB> MethodPrime() <LP> (ActualArguments())? <RP>)
    <DOT> <ID> <LSB> Expression() <RSB> MethodPrime() <LP> (ActualArguments())? <RP>
}

void MethodParent():{}
{
  (PrimaryMethodParent() <DOT> <ID> #fieldExpr_AST)  (<LSB> Expression() <RSB> #arrayExpr_AST)? 
  | (<ID> #idExpr_AST) (<LSB> Expression() <RSB> #arrayExpr_AST)? 

}

void PrimaryMethodParent():{}
{
  LOOKAHEAD(3)
    Literal()
  | LOOKAHEAD(3)
    <THIS> #thisExpr_AST
  | LOOKAHEAD(3)
    <SUPER> #superExpr_AST
  | LOOKAHEAD(3)
    <LP> Expression() <RP>
  | LOOKAHEAD(3)
    <NEW> <ID> <LP> (ActualArguments())? <RP> #methodExpr_AST
}

void MethodPrime():{}
{
  LOOKAHEAD (<DOT> <ID> MethodPrime())
    <DOT> <ID> #fieldExpr_AST MethodPrime()
  | LOOKAHEAD(<DOT> <ID> <LSB> Expression() <RSB> MethodPrime())
    <DOT> <ID> #fieldExpr_AST <LSB> Expression() <RSB> #arrayExpr_AST MethodPrime()
  | LOOKAHEAD(3) <DOT> <ID> #fieldExpr_AST <LSB> Expression() <RSB> #arrayExpr_AST
  | <DOT> <ID> #fieldExpr_AST
}

void ActualArguments():{}
{
  Expression() (<COMMA> Expression())?
}

void Expression():{}
{
  (LOOKAHEAD(OrExpression() <ASSIGN> )
  OrExpression() <ASSIGN> #assignOperator_AST Expression()
  | LOOKAHEAD(OrExpression()) OrExpression()) #binaryExpression_AST(>1)
}

void OrExpression():{}
{
  (LOOKAHEAD(AndExpression() <OR> )
  AndExpression() <OR> #orOperator_AST OrExpression()
  | LOOKAHEAD(AndExpression()) AndExpression()) #binaryExpression_AST(>1)
}

void AndExpression():{}
{
  (LOOKAHEAD(EqualityExpression() <AND> )
  EqualityExpression() <AND> #andOperator_AST AndExpression()
  | LOOKAHEAD(EqualityExpression()) EqualityExpression()) #binaryExpression_AST(>1)
}

void EqualityExpression():{}
{
  (LOOKAHEAD(RelationalExpression() <EQUAL> )
  RelationalExpression() <EQUAL> #equalOperator_AST EqualityExpression()
  | LOOKAHEAD(RelationalExpression()) RelationalExpression()) #binaryExpression_AST(>1)
}

void RelationalExpression():{}
{
  (LOOKAHEAD(SumExpression() <GREATER>) SumExpression() <GREATER> #greaterOperator_AST RelationalExpression()
  |LOOKAHEAD(SumExpression() <GREATEREQ>) SumExpression() <GREATEREQ> #greaterEqualOperator_AST RelationalExpression()
  |LOOKAHEAD(SumExpression() <LESSER>) SumExpression() <LESSER> #lesserOperator_AST RelationalExpression()
  |LOOKAHEAD(SumExpression() <LESSEREQ>) SumExpression() <LESSEREQ> #lesserEqualOperator_AST RelationalExpression()
  |LOOKAHEAD(SumExpression()) SumExpression()) #binaryExpression_AST(>1)
}

void SumExpression():{}
{
  (LOOKAHEAD(FactorExpression() <PLUS>) FactorExpression() <PLUS> #plusOperator_AST SumExpression()
  |LOOKAHEAD(FactorExpression() <MINUS>) FactorExpression() <MINUS> #minusOperator_AST SumExpression()
  |LOOKAHEAD(FactorExpression()) FactorExpression())#binaryExpression_AST(>1)
}

void FactorExpression():{}
{
  
  (LOOKAHEAD(UnaryExpression() <MULTIPLY>) UnaryExpression() <MULTIPLY> #multiplyOperator_AST FactorExpression()
  |LOOKAHEAD(UnaryExpression() <DIVIDE>) UnaryExpression() <DIVIDE> #divideOperator_AST FactorExpression()
  |LOOKAHEAD(UnaryExpression()) UnaryExpression())#binaryExpression_AST(>1)
}

void UnaryExpression():{}
{
  (<PLUS> #plusOperator_AST| <MINUS> #minusOperator_AST| <NOT> #notOperator_AST) Expression()
  | Primary()
}

void Primary(): {}
{
  LOOKAHEAD(PrimaryExisting()) PrimaryExisting()
  | LOOKAHEAD(NewArray()) NewArray()
}

void PrimaryExisting(): {}
{
  PrimaryExisting_1()  (PrimaryExisting_2())?
}

void PrimaryExisting_1():{}
{
  LOOKAHEAD(3)
    Literal()
  | LOOKAHEAD(3)
    <THIS> #thisExpr_AST
  | LOOKAHEAD(3)
    <SUPER> #superExpr_AST
  | LOOKAHEAD(3)
    <LP> Expression() <RP>
  | LOOKAHEAD(3)
    <NEW> <ID> <LP> (ActualArguments())? <RP> #newClassExpr_AST
  | LOOKAHEAD(3)
    <ID>  <LP> (ActualArguments())? <RP> #methodExpr_AST
  | LOOKAHEAD(3)
    <ID> <LSB> Expression() <RSB> #arrayExpr_AST
  | <ID> #idExpr_AST
}

void PrimaryExisting_2():{}
{
  LOOKAHEAD(< DOT > <ID > <LP> (ActualArguments())? <RP> PrimaryExisting_2())  
      < DOT > <ID > <LP> (ActualArguments())? <RP> #methodExpr_AST PrimaryExisting_2()
    | LOOKAHEAD(< DOT > <ID > PrimaryExisting_2())
      < DOT > <ID > #fieldExpr_AST PrimaryExisting_2()
    | LOOKAHEAD(< DOT > <ID > <LSB> Expression() <RSB> PrimaryExisting_2())
      < DOT > <ID > <LSB> Expression() <RSB> #arrayExpr_AST PrimaryExisting_2()
    | LOOKAHEAD(3)
      < DOT > <ID > <LSB> Expression() <RSB> #arrayExpr_AST
    | LOOKAHEAD(3)
      < DOT > <ID > <LP> (ActualArguments())? <RP> #methodExpr_AST
    | < DOT > <ID > #fieldExpr_AST
}

void NewArray():{}
{
  <NEW> Type() <LSB> Expression() <RSB>
}